
badanie-ogniw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010adc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001600  08010cb0  08010cb0  00011cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122b0  080122b0  00014240  2**0
                  CONTENTS
  4 .ARM          00000008  080122b0  080122b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122b8  080122b8  00014240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122b8  080122b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080122bc  080122bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  080122c0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030a8  20000240  08012500  00014240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200032e8  08012500  000142e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d42c  00000000  00000000  00014270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c69  00000000  00000000  0003169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  00036308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000126d  00000000  00000000  00037b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c523  00000000  00000000  00038dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002940f  00000000  00000000  000652f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f28b9  00000000  00000000  0008e6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00180fb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078c4  00000000  00000000  00180ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  001888c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010c94 	.word	0x08010c94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	08010c94 	.word	0x08010c94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9eb 	b.w	80010c0 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a0 	b.w	80010c0 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d14e      	bne.n	8000eae <__udivmoddi4+0xaa>
 8000e10:	4694      	mov	ip, r2
 8000e12:	458c      	cmp	ip, r1
 8000e14:	4686      	mov	lr, r0
 8000e16:	fab2 f282 	clz	r2, r2
 8000e1a:	d962      	bls.n	8000ee2 <__udivmoddi4+0xde>
 8000e1c:	b14a      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e1e:	f1c2 0320 	rsb	r3, r2, #32
 8000e22:	4091      	lsls	r1, r2
 8000e24:	fa20 f303 	lsr.w	r3, r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	4319      	orrs	r1, r3
 8000e2e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e36:	fa1f f68c 	uxth.w	r6, ip
 8000e3a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e42:	fb07 1114 	mls	r1, r7, r4, r1
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb04 f106 	mul.w	r1, r4, r6
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d90a      	bls.n	8000e68 <__udivmoddi4+0x64>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e5a:	f080 8112 	bcs.w	8001082 <__udivmoddi4+0x27e>
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	f240 810f 	bls.w	8001082 <__udivmoddi4+0x27e>
 8000e64:	3c02      	subs	r4, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1a59      	subs	r1, r3, r1
 8000e6a:	fa1f f38e 	uxth.w	r3, lr
 8000e6e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e72:	fb07 1110 	mls	r1, r7, r0, r1
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f606 	mul.w	r6, r0, r6
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	d90a      	bls.n	8000e98 <__udivmoddi4+0x94>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e8a:	f080 80fc 	bcs.w	8001086 <__udivmoddi4+0x282>
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	f240 80f9 	bls.w	8001086 <__udivmoddi4+0x282>
 8000e94:	4463      	add	r3, ip
 8000e96:	3802      	subs	r0, #2
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	b11d      	cbz	r5, 8000eaa <__udivmoddi4+0xa6>
 8000ea2:	40d3      	lsrs	r3, r2
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	e9c5 3200 	strd	r3, r2, [r5]
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d905      	bls.n	8000ebe <__udivmoddi4+0xba>
 8000eb2:	b10d      	cbz	r5, 8000eb8 <__udivmoddi4+0xb4>
 8000eb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e7f5      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ebe:	fab3 f183 	clz	r1, r3
 8000ec2:	2900      	cmp	r1, #0
 8000ec4:	d146      	bne.n	8000f54 <__udivmoddi4+0x150>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d302      	bcc.n	8000ed0 <__udivmoddi4+0xcc>
 8000eca:	4290      	cmp	r0, r2
 8000ecc:	f0c0 80f0 	bcc.w	80010b0 <__udivmoddi4+0x2ac>
 8000ed0:	1a86      	subs	r6, r0, r2
 8000ed2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	2d00      	cmp	r5, #0
 8000eda:	d0e6      	beq.n	8000eaa <__udivmoddi4+0xa6>
 8000edc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ee0:	e7e3      	b.n	8000eaa <__udivmoddi4+0xa6>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f040 8090 	bne.w	8001008 <__udivmoddi4+0x204>
 8000ee8:	eba1 040c 	sub.w	r4, r1, ip
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa1f f78c 	uxth.w	r7, ip
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000efa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000efe:	fb08 4416 	mls	r4, r8, r6, r4
 8000f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f06:	fb07 f006 	mul.w	r0, r7, r6
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x11c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x11a>
 8000f18:	4298      	cmp	r0, r3
 8000f1a:	f200 80cd 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000f1e:	4626      	mov	r6, r4
 8000f20:	1a1c      	subs	r4, r3, r0
 8000f22:	fa1f f38e 	uxth.w	r3, lr
 8000f26:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f2a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f32:	fb00 f707 	mul.w	r7, r0, r7
 8000f36:	429f      	cmp	r7, r3
 8000f38:	d908      	bls.n	8000f4c <__udivmoddi4+0x148>
 8000f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f42:	d202      	bcs.n	8000f4a <__udivmoddi4+0x146>
 8000f44:	429f      	cmp	r7, r3
 8000f46:	f200 80b0 	bhi.w	80010aa <__udivmoddi4+0x2a6>
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	1bdb      	subs	r3, r3, r7
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	e7a5      	b.n	8000ea0 <__udivmoddi4+0x9c>
 8000f54:	f1c1 0620 	rsb	r6, r1, #32
 8000f58:	408b      	lsls	r3, r1
 8000f5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f5e:	431f      	orrs	r7, r3
 8000f60:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f64:	fa04 f301 	lsl.w	r3, r4, r1
 8000f68:	ea43 030c 	orr.w	r3, r3, ip
 8000f6c:	40f4      	lsrs	r4, r6
 8000f6e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f72:	0c38      	lsrs	r0, r7, #16
 8000f74:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f78:	fbb4 fef0 	udiv	lr, r4, r0
 8000f7c:	fa1f fc87 	uxth.w	ip, r7
 8000f80:	fb00 441e 	mls	r4, r0, lr, r4
 8000f84:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f88:	fb0e f90c 	mul.w	r9, lr, ip
 8000f8c:	45a1      	cmp	r9, r4
 8000f8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f92:	d90a      	bls.n	8000faa <__udivmoddi4+0x1a6>
 8000f94:	193c      	adds	r4, r7, r4
 8000f96:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f9a:	f080 8084 	bcs.w	80010a6 <__udivmoddi4+0x2a2>
 8000f9e:	45a1      	cmp	r9, r4
 8000fa0:	f240 8081 	bls.w	80010a6 <__udivmoddi4+0x2a2>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	eba4 0409 	sub.w	r4, r4, r9
 8000fae:	fa1f f983 	uxth.w	r9, r3
 8000fb2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fb6:	fb00 4413 	mls	r4, r0, r3, r4
 8000fba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fc2:	45a4      	cmp	ip, r4
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x1d2>
 8000fc6:	193c      	adds	r4, r7, r4
 8000fc8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fcc:	d267      	bcs.n	800109e <__udivmoddi4+0x29a>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0x29a>
 8000fd2:	3b02      	subs	r3, #2
 8000fd4:	443c      	add	r4, r7
 8000fd6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fda:	fba0 9302 	umull	r9, r3, r0, r2
 8000fde:	eba4 040c 	sub.w	r4, r4, ip
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	46ce      	mov	lr, r9
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	d351      	bcc.n	800108e <__udivmoddi4+0x28a>
 8000fea:	d04e      	beq.n	800108a <__udivmoddi4+0x286>
 8000fec:	b155      	cbz	r5, 8001004 <__udivmoddi4+0x200>
 8000fee:	ebb8 030e 	subs.w	r3, r8, lr
 8000ff2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ff6:	fa04 f606 	lsl.w	r6, r4, r6
 8000ffa:	40cb      	lsrs	r3, r1
 8000ffc:	431e      	orrs	r6, r3
 8000ffe:	40cc      	lsrs	r4, r1
 8001000:	e9c5 6400 	strd	r6, r4, [r5]
 8001004:	2100      	movs	r1, #0
 8001006:	e750      	b.n	8000eaa <__udivmoddi4+0xa6>
 8001008:	f1c2 0320 	rsb	r3, r2, #32
 800100c:	fa20 f103 	lsr.w	r1, r0, r3
 8001010:	fa0c fc02 	lsl.w	ip, ip, r2
 8001014:	fa24 f303 	lsr.w	r3, r4, r3
 8001018:	4094      	lsls	r4, r2
 800101a:	430c      	orrs	r4, r1
 800101c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001020:	fa00 fe02 	lsl.w	lr, r0, r2
 8001024:	fa1f f78c 	uxth.w	r7, ip
 8001028:	fbb3 f0f8 	udiv	r0, r3, r8
 800102c:	fb08 3110 	mls	r1, r8, r0, r3
 8001030:	0c23      	lsrs	r3, r4, #16
 8001032:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001036:	fb00 f107 	mul.w	r1, r0, r7
 800103a:	4299      	cmp	r1, r3
 800103c:	d908      	bls.n	8001050 <__udivmoddi4+0x24c>
 800103e:	eb1c 0303 	adds.w	r3, ip, r3
 8001042:	f100 36ff 	add.w	r6, r0, #4294967295
 8001046:	d22c      	bcs.n	80010a2 <__udivmoddi4+0x29e>
 8001048:	4299      	cmp	r1, r3
 800104a:	d92a      	bls.n	80010a2 <__udivmoddi4+0x29e>
 800104c:	3802      	subs	r0, #2
 800104e:	4463      	add	r3, ip
 8001050:	1a5b      	subs	r3, r3, r1
 8001052:	b2a4      	uxth	r4, r4
 8001054:	fbb3 f1f8 	udiv	r1, r3, r8
 8001058:	fb08 3311 	mls	r3, r8, r1, r3
 800105c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001060:	fb01 f307 	mul.w	r3, r1, r7
 8001064:	42a3      	cmp	r3, r4
 8001066:	d908      	bls.n	800107a <__udivmoddi4+0x276>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001070:	d213      	bcs.n	800109a <__udivmoddi4+0x296>
 8001072:	42a3      	cmp	r3, r4
 8001074:	d911      	bls.n	800109a <__udivmoddi4+0x296>
 8001076:	3902      	subs	r1, #2
 8001078:	4464      	add	r4, ip
 800107a:	1ae4      	subs	r4, r4, r3
 800107c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001080:	e739      	b.n	8000ef6 <__udivmoddi4+0xf2>
 8001082:	4604      	mov	r4, r0
 8001084:	e6f0      	b.n	8000e68 <__udivmoddi4+0x64>
 8001086:	4608      	mov	r0, r1
 8001088:	e706      	b.n	8000e98 <__udivmoddi4+0x94>
 800108a:	45c8      	cmp	r8, r9
 800108c:	d2ae      	bcs.n	8000fec <__udivmoddi4+0x1e8>
 800108e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001092:	eb63 0c07 	sbc.w	ip, r3, r7
 8001096:	3801      	subs	r0, #1
 8001098:	e7a8      	b.n	8000fec <__udivmoddi4+0x1e8>
 800109a:	4631      	mov	r1, r6
 800109c:	e7ed      	b.n	800107a <__udivmoddi4+0x276>
 800109e:	4603      	mov	r3, r0
 80010a0:	e799      	b.n	8000fd6 <__udivmoddi4+0x1d2>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e7d4      	b.n	8001050 <__udivmoddi4+0x24c>
 80010a6:	46d6      	mov	lr, sl
 80010a8:	e77f      	b.n	8000faa <__udivmoddi4+0x1a6>
 80010aa:	4463      	add	r3, ip
 80010ac:	3802      	subs	r0, #2
 80010ae:	e74d      	b.n	8000f4c <__udivmoddi4+0x148>
 80010b0:	4606      	mov	r6, r0
 80010b2:	4623      	mov	r3, r4
 80010b4:	4608      	mov	r0, r1
 80010b6:	e70f      	b.n	8000ed8 <__udivmoddi4+0xd4>
 80010b8:	3e02      	subs	r6, #2
 80010ba:	4463      	add	r3, ip
 80010bc:	e730      	b.n	8000f20 <__udivmoddi4+0x11c>
 80010be:	bf00      	nop

080010c0 <__aeabi_idiv0>:
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
  return tmp;
#endif
#if(BMP_SPI == 1)
    uint8_t tmp[2];
	tmp[0] = addr;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e2:	480c      	ldr	r0, [pc, #48]	@ (8001114 <BMP280_Read8+0x50>)
 80010e4:	f003 fdbe 	bl	8004c64 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <BMP280_Read8+0x54>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	f107 020c 	add.w	r2, r7, #12
 80010f0:	f107 010c 	add.w	r1, r7, #12
 80010f4:	230a      	movs	r3, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2302      	movs	r3, #2
 80010fa:	f006 fb9b 	bl	8007834 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001104:	4803      	ldr	r0, [pc, #12]	@ (8001114 <BMP280_Read8+0x50>)
 8001106:	f003 fdad 	bl	8004c64 <HAL_GPIO_WritePin>
	return tmp[1];
 800110a:	7b7b      	ldrb	r3, [r7, #13]
#endif
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	2000025c 	.word	0x2000025c

0800111c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
	return ((tmp[0] << 8) | tmp[1]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[3];
	tmp[0] = addr;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 800112a:	7b3b      	ldrb	r3, [r7, #12]
 800112c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001130:	b2db      	uxtb	r3, r3
 8001132:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113a:	4810      	ldr	r0, [pc, #64]	@ (800117c <BMP280_Read16+0x60>)
 800113c:	f003 fd92 	bl	8004c64 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <BMP280_Read16+0x64>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	f107 010c 	add.w	r1, r7, #12
 800114c:	230a      	movs	r3, #10
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2303      	movs	r3, #3
 8001152:	f006 fb6f 	bl	8007834 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800115c:	4807      	ldr	r0, [pc, #28]	@ (800117c <BMP280_Read16+0x60>)
 800115e:	f003 fd81 	bl	8004c64 <HAL_GPIO_WritePin>
	return ((tmp[1] << 8) | tmp[2]);
 8001162:	7b7b      	ldrb	r3, [r7, #13]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29b      	uxth	r3, r3
#endif
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	2000025c 	.word	0x2000025c

08001184 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffc3 	bl	800111c <BMP280_Read16>
 8001196:	4603      	mov	r3, r0
 8001198:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800119a:	89fb      	ldrh	r3, [r7, #14]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	b29b      	uxth	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	460a      	mov	r2, r1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[2];
	tmp[0] = address;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	733b      	strb	r3, [r7, #12]
	tmp[0] &= ~(1<<7);
 80011cc:	7b3b      	ldrb	r3, [r7, #12]
 80011ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <BMP280_Write8+0x58>)
 80011e2:	f003 fd3f 	bl	8004c64 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <BMP280_Write8+0x5c>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	f107 010c 	add.w	r1, r7, #12
 80011f2:	230a      	movs	r3, #10
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	f006 fb1c 	bl	8007834 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <BMP280_Write8+0x58>)
 8001204:	f003 fd2e 	bl	8004c64 <HAL_GPIO_WritePin>
#endif
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	2000025c 	.word	0x2000025c

08001218 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af02      	add	r7, sp, #8
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
#endif
#if(BMP_SPI == 1)
	uint8_t tmp[4];
	tmp[0] = addr;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8001226:	7b3b      	ldrb	r3, [r7, #12]
 8001228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800122c:	b2db      	uxtb	r3, r3
 800122e:	733b      	strb	r3, [r7, #12]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <BMP280_Read24+0x5c>)
 8001238:	f003 fd14 	bl	8004c64 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <BMP280_Read24+0x60>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	f107 010c 	add.w	r1, r7, #12
 8001248:	230a      	movs	r3, #10
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2303      	movs	r3, #3
 800124e:	f006 faf1 	bl	8007834 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <BMP280_Read24+0x5c>)
 800125a:	f003 fd03 	bl	8004c64 <HAL_GPIO_WritePin>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 800125e:	7b7b      	ldrb	r3, [r7, #13]
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	7bbb      	ldrb	r3, [r7, #14]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	4313      	orrs	r3, r2
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	4313      	orrs	r3, r2
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40021000 	.word	0x40021000
 8001278:	2000025c 	.word	0x2000025c

0800127c <BMP280_Init>:
{
	i2c_h = i2c_handler;
#endif
#if(BMP_SPI == 1)
void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4603      	mov	r3, r0
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	460b      	mov	r3, r1
 8001290:	70bb      	strb	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	707b      	strb	r3, [r7, #1]
	spi_h = spi_handler;
 8001296:	4a4f      	ldr	r2, [pc, #316]	@ (80013d4 <BMP280_Init+0x158>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a2:	484d      	ldr	r0, [pc, #308]	@ (80013d8 <BMP280_Init+0x15c>)
 80012a4:	f003 fcde 	bl	8004c64 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012a8:	2005      	movs	r0, #5
 80012aa:	f003 fa25 	bl	80046f8 <HAL_Delay>
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b4:	4848      	ldr	r0, [pc, #288]	@ (80013d8 <BMP280_Init+0x15c>)
 80012b6:	f003 fcd5 	bl	8004c64 <HAL_GPIO_WritePin>
#endif
	if (mode > BMP280_NORMALMODE)
 80012ba:	787b      	ldrb	r3, [r7, #1]
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d901      	bls.n	80012c4 <BMP280_Init+0x48>
	    mode = BMP280_NORMALMODE;
 80012c0:	2303      	movs	r3, #3
 80012c2:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 80012c4:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <BMP280_Init+0x160>)
 80012c6:	787b      	ldrb	r3, [r7, #1]
 80012c8:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 80012ca:	787b      	ldrb	r3, [r7, #1]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <BMP280_Init+0x58>
		mode = BMP280_SLEEPMODE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d901      	bls.n	80012de <BMP280_Init+0x62>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 80012da:	2305      	movs	r3, #5
 80012dc:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80012de:	4a40      	ldr	r2, [pc, #256]	@ (80013e0 <BMP280_Init+0x164>)
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d901      	bls.n	80012ee <BMP280_Init+0x72>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80012ea:	2305      	movs	r3, #5
 80012ec:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80012ee:	4a3d      	ldr	r2, [pc, #244]	@ (80013e4 <BMP280_Init+0x168>)
 80012f0:	78bb      	ldrb	r3, [r7, #2]
 80012f2:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80012f4:	bf00      	nop
 80012f6:	20d0      	movs	r0, #208	@ 0xd0
 80012f8:	f7ff fee4 	bl	80010c4 <BMP280_Read8>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b58      	cmp	r3, #88	@ 0x58
 8001300:	d1f9      	bne.n	80012f6 <BMP280_Init+0x7a>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001302:	2088      	movs	r0, #136	@ 0x88
 8001304:	f7ff ff3e 	bl	8001184 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <BMP280_Init+0x16c>)
 800130e:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001310:	208a      	movs	r0, #138	@ 0x8a
 8001312:	f7ff ff37 	bl	8001184 <BMP280_Read16LE>
 8001316:	4603      	mov	r3, r0
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <BMP280_Init+0x170>)
 800131c:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 800131e:	208c      	movs	r0, #140	@ 0x8c
 8001320:	f7ff ff30 	bl	8001184 <BMP280_Read16LE>
 8001324:	4603      	mov	r3, r0
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b31      	ldr	r3, [pc, #196]	@ (80013f0 <BMP280_Init+0x174>)
 800132a:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 800132c:	208e      	movs	r0, #142	@ 0x8e
 800132e:	f7ff ff29 	bl	8001184 <BMP280_Read16LE>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <BMP280_Init+0x178>)
 8001338:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 800133a:	2090      	movs	r0, #144	@ 0x90
 800133c:	f7ff ff22 	bl	8001184 <BMP280_Read16LE>
 8001340:	4603      	mov	r3, r0
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <BMP280_Init+0x17c>)
 8001346:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 8001348:	2092      	movs	r0, #146	@ 0x92
 800134a:	f7ff ff1b 	bl	8001184 <BMP280_Read16LE>
 800134e:	4603      	mov	r3, r0
 8001350:	b21a      	sxth	r2, r3
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <BMP280_Init+0x180>)
 8001354:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001356:	2094      	movs	r0, #148	@ 0x94
 8001358:	f7ff ff14 	bl	8001184 <BMP280_Read16LE>
 800135c:	4603      	mov	r3, r0
 800135e:	b21a      	sxth	r2, r3
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <BMP280_Init+0x184>)
 8001362:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001364:	2096      	movs	r0, #150	@ 0x96
 8001366:	f7ff ff0d 	bl	8001184 <BMP280_Read16LE>
 800136a:	4603      	mov	r3, r0
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <BMP280_Init+0x188>)
 8001370:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001372:	2098      	movs	r0, #152	@ 0x98
 8001374:	f7ff ff06 	bl	8001184 <BMP280_Read16LE>
 8001378:	4603      	mov	r3, r0
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <BMP280_Init+0x18c>)
 800137e:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001380:	209a      	movs	r0, #154	@ 0x9a
 8001382:	f7ff feff 	bl	8001184 <BMP280_Read16LE>
 8001386:	4603      	mov	r3, r0
 8001388:	b21a      	sxth	r2, r3
 800138a:	4b20      	ldr	r3, [pc, #128]	@ (800140c <BMP280_Init+0x190>)
 800138c:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 800138e:	209c      	movs	r0, #156	@ 0x9c
 8001390:	f7ff fef8 	bl	8001184 <BMP280_Read16LE>
 8001394:	4603      	mov	r3, r0
 8001396:	b21a      	sxth	r2, r3
 8001398:	4b1d      	ldr	r3, [pc, #116]	@ (8001410 <BMP280_Init+0x194>)
 800139a:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800139c:	209e      	movs	r0, #158	@ 0x9e
 800139e:	f7ff fef1 	bl	8001184 <BMP280_Read16LE>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <BMP280_Init+0x198>)
 80013a8:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	015b      	lsls	r3, r3, #5
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	78bb      	ldrb	r3, [r7, #2]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80013be:	4313      	orrs	r3, r2
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	20f4      	movs	r0, #244	@ 0xf4
 80013c8:	f7ff fef6 	bl	80011b8 <BMP280_Write8>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000025c 	.word	0x2000025c
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20000262 	.word	0x20000262
 80013e0:	20000260 	.word	0x20000260
 80013e4:	20000261 	.word	0x20000261
 80013e8:	20000278 	.word	0x20000278
 80013ec:	20000264 	.word	0x20000264
 80013f0:	20000266 	.word	0x20000266
 80013f4:	2000027a 	.word	0x2000027a
 80013f8:	20000268 	.word	0x20000268
 80013fc:	2000026a 	.word	0x2000026a
 8001400:	2000026c 	.word	0x2000026c
 8001404:	2000026e 	.word	0x2000026e
 8001408:	20000270 	.word	0x20000270
 800140c:	20000272 	.word	0x20000272
 8001410:	20000274 	.word	0x20000274
 8001414:	20000276 	.word	0x20000276

08001418 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 800141e:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <BMP280_ReadTemperature+0xfc>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d16d      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 8001426:	20f4      	movs	r0, #244	@ 0xf4
 8001428:	f7ff fe4c 	bl	80010c4 <BMP280_Read8>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	f023 0303 	bic.w	r3, r3, #3
 8001436:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	4619      	mov	r1, r3
 8001444:	20f4      	movs	r0, #244	@ 0xf4
 8001446:	f7ff feb7 	bl	80011b8 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800144a:	20f4      	movs	r0, #244	@ 0xf4
 800144c:	f7ff fe3a 	bl	80010c4 <BMP280_Read8>
 8001450:	4603      	mov	r3, r0
 8001452:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d14f      	bne.n	8001502 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001462:	20f4      	movs	r0, #244	@ 0xf4
 8001464:	f7ff fe2e 	bl	80010c4 <BMP280_Read8>
 8001468:	4603      	mov	r3, r0
 800146a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800146c:	7dbb      	ldrb	r3, [r7, #22]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800147a:	e7f2      	b.n	8001462 <BMP280_ReadTemperature+0x4a>
				  break;
 800147c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800147e:	20fa      	movs	r0, #250	@ 0xfa
 8001480:	f7ff feca 	bl	8001218 <BMP280_Read24>
 8001484:	4603      	mov	r3, r0
 8001486:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	111b      	asrs	r3, r3, #4
 800148c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	10da      	asrs	r2, r3, #3
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 8001494:	881b      	ldrh	r3, [r3, #0]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800149a:	4a20      	ldr	r2, [pc, #128]	@ (800151c <BMP280_ReadTemperature+0x104>)
 800149c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	12db      	asrs	r3, r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	111b      	asrs	r3, r3, #4
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014ae:	8812      	ldrh	r2, [r2, #0]
 80014b0:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	1112      	asrs	r2, r2, #4
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <BMP280_ReadTemperature+0x100>)
 80014b8:	8809      	ldrh	r1, [r1, #0]
 80014ba:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c0:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <BMP280_ReadTemperature+0x108>)
 80014c4:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80014cc:	139b      	asrs	r3, r3, #14
 80014ce:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a13      	ldr	r2, [pc, #76]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014d8:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <BMP280_ReadTemperature+0x10c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3380      	adds	r3, #128	@ 0x80
 80014e6:	121b      	asrs	r3, r3, #8
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001528 <BMP280_ReadTemperature+0x110>
 80014fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001500:	e001      	b.n	8001506 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001502:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800152c <BMP280_ReadTemperature+0x114>
}
 8001506:	eef0 7a47 	vmov.f32	s15, s14
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000262 	.word	0x20000262
 8001518:	20000278 	.word	0x20000278
 800151c:	20000264 	.word	0x20000264
 8001520:	20000266 	.word	0x20000266
 8001524:	2000027c 	.word	0x2000027c
 8001528:	42c80000 	.word	0x42c80000
 800152c:	c2c60000 	.word	0xc2c60000

08001530 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001534:	b0cc      	sub	sp, #304	@ 0x130
 8001536:	af00      	add	r7, sp, #0
 8001538:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800153c:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001540:	f7ff ff6a 	bl	8001418 <BMP280_ReadTemperature>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800154c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8001828 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800155c:	eef4 7a47 	vcmp.f32	s15, s14
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d101      	bne.n	800156a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	e2bf      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800156a:	20f7      	movs	r0, #247	@ 0xf7
 800156c:	f7ff fe54 	bl	8001218 <BMP280_Read24>
 8001570:	4603      	mov	r3, r0
 8001572:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	  adc_P >>= 4;
 8001576:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800157a:	111b      	asrs	r3, r3, #4
 800157c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001580:	4baa      	ldr	r3, [pc, #680]	@ (800182c <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	17da      	asrs	r2, r3, #31
 8001586:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800158a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800158e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001592:	460b      	mov	r3, r1
 8001594:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800159a:	4613      	mov	r3, r2
 800159c:	f143 33ff 	adc.w	r3, r3, #4294967295
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015a6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 80015aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	18ca      	adds	r2, r1, r3
 80015c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c8:	fba3 4503 	umull	r4, r5, r3, r3
 80015cc:	1953      	adds	r3, r2, r5
 80015ce:	461d      	mov	r5, r3
 80015d0:	4b97      	ldr	r3, [pc, #604]	@ (8001830 <BMP280_ReadTemperatureAndPressure+0x300>)
 80015d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	17da      	asrs	r2, r3, #31
 80015da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80015de:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80015e2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80015e6:	4603      	mov	r3, r0
 80015e8:	fb03 f205 	mul.w	r2, r3, r5
 80015ec:	460b      	mov	r3, r1
 80015ee:	fb04 f303 	mul.w	r3, r4, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	4602      	mov	r2, r0
 80015f6:	fba4 8902 	umull	r8, r9, r4, r2
 80015fa:	444b      	add	r3, r9
 80015fc:	4699      	mov	r9, r3
 80015fe:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8001602:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001606:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <BMP280_ReadTemperatureAndPressure+0x304>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	b21b      	sxth	r3, r3
 800160e:	17da      	asrs	r2, r3, #31
 8001610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001614:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001618:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800161c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001620:	462a      	mov	r2, r5
 8001622:	fb02 f203 	mul.w	r2, r2, r3
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800162a:	4621      	mov	r1, r4
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	441a      	add	r2, r3
 8001632:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001636:	4621      	mov	r1, r4
 8001638:	fba3 ab01 	umull	sl, fp, r3, r1
 800163c:	eb02 030b 	add.w	r3, r2, fp
 8001640:	469b      	mov	fp, r3
 8001642:	f04f 0000 	mov.w	r0, #0
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800164e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001652:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	643c      	str	r4, [r7, #64]	@ 0x40
 800165e:	414b      	adcs	r3, r1
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
 8001662:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800166a:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <BMP280_ReadTemperatureAndPressure+0x308>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	b21b      	sxth	r3, r3
 8001672:	17da      	asrs	r2, r3, #31
 8001674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001678:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800167c:	f04f 0000 	mov.w	r0, #0
 8001680:	f04f 0100 	mov.w	r1, #0
 8001684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001688:	00d9      	lsls	r1, r3, #3
 800168a:	2000      	movs	r0, #0
 800168c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001690:	1814      	adds	r4, r2, r0
 8001692:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001694:	414b      	adcs	r3, r1
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001698:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800169c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80016a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016a8:	fb03 f102 	mul.w	r1, r3, r2
 80016ac:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	18ca      	adds	r2, r1, r3
 80016ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016be:	fba3 1303 	umull	r1, r3, r3, r3
 80016c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016c6:	460b      	mov	r3, r1
 80016c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80016cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80016d0:	18d3      	adds	r3, r2, r3
 80016d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <BMP280_ReadTemperatureAndPressure+0x30c>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016e8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016ec:	462b      	mov	r3, r5
 80016ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80016f2:	4642      	mov	r2, r8
 80016f4:	fb02 f203 	mul.w	r2, r2, r3
 80016f8:	464b      	mov	r3, r9
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	4622      	mov	r2, r4
 8001704:	4641      	mov	r1, r8
 8001706:	fba2 1201 	umull	r1, r2, r2, r1
 800170a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800170e:	460a      	mov	r2, r1
 8001710:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8001714:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001718:	4413      	add	r3, r2
 800171a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800172a:	4623      	mov	r3, r4
 800172c:	0a18      	lsrs	r0, r3, #8
 800172e:	462b      	mov	r3, r5
 8001730:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001734:	462b      	mov	r3, r5
 8001736:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <BMP280_ReadTemperatureAndPressure+0x310>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	17da      	asrs	r2, r3, #31
 8001742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800174a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001752:	464a      	mov	r2, r9
 8001754:	fb02 f203 	mul.w	r2, r2, r3
 8001758:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800175c:	4644      	mov	r4, r8
 800175e:	fb04 f303 	mul.w	r3, r4, r3
 8001762:	441a      	add	r2, r3
 8001764:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001768:	4644      	mov	r4, r8
 800176a:	fba3 4304 	umull	r4, r3, r3, r4
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001772:	4623      	mov	r3, r4
 8001774:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800178e:	464c      	mov	r4, r9
 8001790:	0323      	lsls	r3, r4, #12
 8001792:	4644      	mov	r4, r8
 8001794:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001798:	4644      	mov	r4, r8
 800179a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800179c:	1884      	adds	r4, r0, r2
 800179e:	633c      	str	r4, [r7, #48]	@ 0x30
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017aa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80017ae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017b2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80017b6:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80017ba:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <BMP280_ReadTemperatureAndPressure+0x314>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80017d2:	462b      	mov	r3, r5
 80017d4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80017d8:	4642      	mov	r2, r8
 80017da:	fb02 f203 	mul.w	r2, r2, r3
 80017de:	464b      	mov	r3, r9
 80017e0:	4621      	mov	r1, r4
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	4622      	mov	r2, r4
 80017ea:	4641      	mov	r1, r8
 80017ec:	fba2 1201 	umull	r1, r2, r2, r1
 80017f0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80017f4:	460a      	mov	r2, r1
 80017f6:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80017fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80017fe:	4413      	add	r3, r2
 8001800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001810:	4629      	mov	r1, r5
 8001812:	104a      	asrs	r2, r1, #1
 8001814:	4629      	mov	r1, r5
 8001816:	17cb      	asrs	r3, r1, #31
 8001818:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	  if (var1 == 0) {
 800181c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001820:	4313      	orrs	r3, r2
 8001822:	d111      	bne.n	8001848 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001824:	2300      	movs	r3, #0
 8001826:	e160      	b.n	8001aea <BMP280_ReadTemperatureAndPressure+0x5ba>
 8001828:	c2c60000 	.word	0xc2c60000
 800182c:	2000027c 	.word	0x2000027c
 8001830:	20000270 	.word	0x20000270
 8001834:	2000026e 	.word	0x2000026e
 8001838:	2000026c 	.word	0x2000026c
 800183c:	2000026a 	.word	0x2000026a
 8001840:	20000268 	.word	0x20000268
 8001844:	2000027a 	.word	0x2000027a
	  }
	  p = 1048576 - adc_P;
 8001848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800184c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001850:	17da      	asrs	r2, r3, #31
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001856:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800185a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800185e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001862:	105b      	asrs	r3, r3, #1
 8001864:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001868:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800186c:	07db      	lsls	r3, r3, #31
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001872:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001876:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800187a:	4621      	mov	r1, r4
 800187c:	1a89      	subs	r1, r1, r2
 800187e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8001882:	4629      	mov	r1, r5
 8001884:	eb61 0303 	sbc.w	r3, r1, r3
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800188c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001890:	4622      	mov	r2, r4
 8001892:	462b      	mov	r3, r5
 8001894:	1891      	adds	r1, r2, r2
 8001896:	6239      	str	r1, [r7, #32]
 8001898:	415b      	adcs	r3, r3
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
 800189c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018a0:	4621      	mov	r1, r4
 80018a2:	1851      	adds	r1, r2, r1
 80018a4:	61b9      	str	r1, [r7, #24]
 80018a6:	4629      	mov	r1, r5
 80018a8:	414b      	adcs	r3, r1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	1889      	adds	r1, r1, r2
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb43 0101 	adc.w	r1, r3, r1
 80018d2:	6179      	str	r1, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018e0:	4649      	mov	r1, r9
 80018e2:	008b      	lsls	r3, r1, #2
 80018e4:	4641      	mov	r1, r8
 80018e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ea:	4641      	mov	r1, r8
 80018ec:	008a      	lsls	r2, r1, #2
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	4603      	mov	r3, r0
 80018f4:	4622      	mov	r2, r4
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	460b      	mov	r3, r1
 80018fc:	462a      	mov	r2, r5
 80018fe:	eb42 0303 	adc.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001910:	4649      	mov	r1, r9
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	4641      	mov	r1, r8
 8001916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800191a:	4641      	mov	r1, r8
 800191c:	008a      	lsls	r2, r1, #2
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	4603      	mov	r3, r0
 8001924:	4622      	mov	r2, r4
 8001926:	189b      	adds	r3, r3, r2
 8001928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800192a:	462b      	mov	r3, r5
 800192c:	460a      	mov	r2, r1
 800192e:	eb42 0303 	adc.w	r3, r2, r3
 8001932:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001934:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001938:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800193c:	f7ff f9c4 	bl	8000cc8 <__aeabi_ldivmod>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	673b      	str	r3, [r7, #112]	@ 0x70
 8001954:	677a      	str	r2, [r7, #116]	@ 0x74
 8001956:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800195a:	f04f 0000 	mov.w	r0, #0
 800195e:	f04f 0100 	mov.w	r1, #0
 8001962:	0b50      	lsrs	r0, r2, #13
 8001964:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001968:	1359      	asrs	r1, r3, #13
 800196a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800196e:	462b      	mov	r3, r5
 8001970:	fb00 f203 	mul.w	r2, r0, r3
 8001974:	4623      	mov	r3, r4
 8001976:	fb03 f301 	mul.w	r3, r3, r1
 800197a:	4413      	add	r3, r2
 800197c:	4622      	mov	r2, r4
 800197e:	fba2 1200 	umull	r1, r2, r2, r0
 8001982:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001986:	460a      	mov	r2, r1
 8001988:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800198c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001990:	4413      	add	r3, r2
 8001992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001996:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	0b50      	lsrs	r0, r2, #13
 80019a4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a8:	1359      	asrs	r1, r3, #13
 80019aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019ae:	462b      	mov	r3, r5
 80019b0:	fb00 f203 	mul.w	r2, r0, r3
 80019b4:	4623      	mov	r3, r4
 80019b6:	fb03 f301 	mul.w	r3, r3, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	4622      	mov	r2, r4
 80019be:	fba2 1200 	umull	r1, r2, r2, r0
 80019c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019c6:	460a      	mov	r2, r1
 80019c8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019d0:	4413      	add	r3, r2
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019e2:	4621      	mov	r1, r4
 80019e4:	0e4a      	lsrs	r2, r1, #25
 80019e6:	4629      	mov	r1, r5
 80019e8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019ec:	4629      	mov	r1, r5
 80019ee:	164b      	asrs	r3, r1, #25
 80019f0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80019f4:	4b41      	ldr	r3, [pc, #260]	@ (8001afc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	17da      	asrs	r2, r3, #31
 80019fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a00:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a06:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a0a:	462a      	mov	r2, r5
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a14:	4621      	mov	r1, r4
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001a20:	4621      	mov	r1, r4
 8001a22:	fba2 1201 	umull	r1, r2, r2, r1
 8001a26:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a2a:	460a      	mov	r2, r1
 8001a2c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a34:	4413      	add	r3, r2
 8001a36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a46:	4621      	mov	r1, r4
 8001a48:	0cca      	lsrs	r2, r1, #19
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a50:	4629      	mov	r1, r5
 8001a52:	14cb      	asrs	r3, r1, #19
 8001a54:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001a58:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a5c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a60:	1884      	adds	r4, r0, r2
 8001a62:	663c      	str	r4, [r7, #96]	@ 0x60
 8001a64:	eb41 0303 	adc.w	r3, r1, r3
 8001a68:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a6a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a72:	4621      	mov	r1, r4
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001a78:	4629      	mov	r1, r5
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	0a18      	lsrs	r0, r3, #8
 8001a90:	462b      	mov	r3, r5
 8001a92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a96:	462b      	mov	r3, r5
 8001a98:	1219      	asrs	r1, r3, #8
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001aa6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ab4:	464c      	mov	r4, r9
 8001ab6:	0123      	lsls	r3, r4, #4
 8001ab8:	4644      	mov	r4, r8
 8001aba:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001abe:	4644      	mov	r4, r8
 8001ac0:	0122      	lsls	r2, r4, #4
 8001ac2:	1884      	adds	r4, r0, r2
 8001ac4:	603c      	str	r4, [r7, #0]
 8001ac6:	eb41 0303 	adc.w	r3, r1, r3
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ad0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	  *pressure = (int32_t)p/256;
 8001ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da00      	bge.n	8001ade <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001adc:	33ff      	adds	r3, #255	@ 0xff
 8001ade:	121b      	asrs	r3, r3, #8
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ae6:	601a      	str	r2, [r3, #0]

	  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	20000276 	.word	0x20000276
 8001afc:	20000274 	.word	0x20000274
 8001b00:	20000272 	.word	0x20000272

08001b04 <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	2180      	movs	r1, #128	@ 0x80
 8001b2c:	f003 fc72 	bl	8005414 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	7b7b      	ldrb	r3, [r7, #13]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af04      	add	r7, sp, #16
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
 8001b54:	4613      	mov	r3, r2
 8001b56:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001b58:	883b      	ldrh	r3, [r7, #0]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001b62:	883b      	ldrh	r3, [r7, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	f003 fb32 	bl	80051ec <HAL_I2C_Mem_Write>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ffb1 	bl	8001b04 <Read16>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	08db      	lsrs	r3, r3, #3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	b29b      	uxth	r3, r3

}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff9e 	bl	8001b04 <Read16>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001bcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <INA219_ReadPower>:
 * 			Power multiplier is initialize in the calibration function.
 * @param:	Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:	Returns power level in mili-watts
 */
uint16_t INA219_ReadPower(INA219_t *ina219)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER );
 8001be0:	2103      	movs	r1, #3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff8e 	bl	8001b04 <Read16>
 8001be8:	4603      	mov	r3, r0
 8001bea:	81fb      	strh	r3, [r7, #14]
	result = result * ina219_powerMultiplier_mW; // power is the power register times the power_LSB (power multiplier)
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <INA219_ReadPower+0x30>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	89fa      	ldrh	r2, [r7, #14]
 8001bf6:	fb12 f303 	smulbb	r3, r2, r3
 8001bfa:	81fb      	strh	r3, [r7, #14]
	return (result);
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000286 	.word	0x20000286

08001c0c <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c18:	edc7 0a01 	vstr	s1, [r7, #4]
	switch(batteryState)
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d01b      	beq.n	8001c5c <INA219_HealthCheck+0x50>
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	dc2a      	bgt.n	8001c7e <INA219_HealthCheck+0x72>
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d002      	beq.n	8001c32 <INA219_HealthCheck+0x26>
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d004      	beq.n	8001c3a <INA219_HealthCheck+0x2e>
 8001c30:	e025      	b.n	8001c7e <INA219_HealthCheck+0x72>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8001c32:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
			break;
 8001c38:	e025      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001c3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dd03      	ble.n	8001c54 <INA219_HealthCheck+0x48>
			{
				batteryState = Battery_OK;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001c52:	e018      	b.n	8001c86 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001c54:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
			break;
 8001c5a:	e014      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001c5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	dd03      	ble.n	8001c76 <INA219_HealthCheck+0x6a>
			{
				batteryState = Battery_OK;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001c74:	e007      	b.n	8001c86 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	701a      	strb	r2, [r3, #0]
			break;
 8001c7c:	e003      	b.n	8001c86 <INA219_HealthCheck+0x7a>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
			break;
 8001c84:	bf00      	nop
	}
	return batteryState;
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <INA219_HealthCheck+0x8c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]

}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000280 	.word	0x20000280

08001c9c <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001ca4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ca8:	2100      	movs	r1, #0
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ff4c 	bl	8001b48 <Write16>
	HAL_Delay(1);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f002 fd21 	bl	80046f8 <HAL_Delay>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2105      	movs	r1, #5
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff39 	bl	8001b48 <Write16>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	461a      	mov	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <Write16>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001d08:	f643 139f 	movw	r3, #14751	@ 0x399f
 8001d0c:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <INA219_setCalibration_32V_2A+0x40>)
 8001d10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d14:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <INA219_setCalibration_32V_2A+0x44>)
 8001d18:	220a      	movs	r2, #10
 8001d1a:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <INA219_setCalibration_32V_2A+0x48>)
 8001d1e:	2202      	movs	r2, #2
 8001d20:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <INA219_setCalibration_32V_2A+0x40>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffc8 	bl	8001cbe <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffd3 	bl	8001cde <INA219_setConfig>
}
 8001d38:	bf00      	nop
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000282 	.word	0x20000282
 8001d44:	20000284 	.word	0x20000284
 8001d48:	20000286 	.word	0x20000286

08001d4c <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <INA219_Init+0x78>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <INA219_Init+0x7c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001d72:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <INA219_Init+0x80>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	b299      	uxth	r1, r3
 8001d80:	2302      	movs	r3, #2
 8001d82:	2203      	movs	r2, #3
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f003 fc5f 	bl	8005648 <HAL_I2C_IsDeviceReady>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <INA219_Init+0x6c>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <INA219_Init+0x84>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8001d9a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001d9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001dd4 <INA219_Init+0x88>
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff ff32 	bl	8001c0c <INA219_HealthCheck>
		INA219_Reset(ina219);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff ff77 	bl	8001c9c <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f7ff ffa6 	bl	8001d00 <INA219_setCalibration_32V_2A>

		return 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <INA219_Init+0x6e>
	}

	else
	{
		return 0;
 8001db8:	2300      	movs	r3, #0
	}
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000281 	.word	0x20000281
 8001dc8:	20000284 	.word	0x20000284
 8001dcc:	20000286 	.word	0x20000286
 8001dd0:	20000280 	.word	0x20000280
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <SELECT>:
#define SD_CS_GPIO_Port GPIOE
#define SD_CS_Pin GPIO_PIN_11

/* SPI Chip Select */
static void SELECT(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001de2:	4802      	ldr	r0, [pc, #8]	@ (8001dec <SELECT+0x14>)
 8001de4:	f002 ff3e 	bl	8004c64 <HAL_GPIO_WritePin>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000

08001df0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dfa:	4802      	ldr	r0, [pc, #8]	@ (8001e04 <DESELECT+0x14>)
 8001dfc:	f002 ff32 	bl	8004c64 <HAL_GPIO_WritePin>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <SPI_TxByte>:


static void SPI_TxByte(BYTE data)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001e12:	bf00      	nop
 8001e14:	4808      	ldr	r0, [pc, #32]	@ (8001e38 <SPI_TxByte+0x30>)
 8001e16:	f005 ff2f 	bl	8007c78 <HAL_SPI_GetState>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d1f9      	bne.n	8001e14 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001e20:	1df9      	adds	r1, r7, #7
 8001e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e26:	2201      	movs	r2, #1
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <SPI_TxByte+0x30>)
 8001e2a:	f005 fb8e 	bl	800754a <HAL_SPI_Transmit>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20002988 	.word	0x20002988

08001e3c <SPI_RxByte>:


static uint8_t SPI_RxByte(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001e42:	23ff      	movs	r3, #255	@ 0xff
 8001e44:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001e4a:	bf00      	nop
 8001e4c:	4809      	ldr	r0, [pc, #36]	@ (8001e74 <SPI_RxByte+0x38>)
 8001e4e:	f005 ff13 	bl	8007c78 <HAL_SPI_GetState>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d1f9      	bne.n	8001e4c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001e58:	1dba      	adds	r2, r7, #6
 8001e5a:	1df9      	adds	r1, r7, #7
 8001e5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2301      	movs	r3, #1
 8001e64:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <SPI_RxByte+0x38>)
 8001e66:	f005 fce5 	bl	8007834 <HAL_SPI_TransmitReceive>

  return data;
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20002988 	.word	0x20002988

08001e78 <SPI_RxBytePtr>:


static void SPI_RxBytePtr(uint8_t *buff)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001e80:	f7ff ffdc 	bl	8001e3c <SPI_RxByte>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	701a      	strb	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <SD_ReadyWait>:


static uint8_t SD_ReadyWait(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  uint8_t res;

   Timer2 = 50;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <SD_ReadyWait+0x34>)
 8001e9c:	2232      	movs	r2, #50	@ 0x32
 8001e9e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001ea0:	f7ff ffcc 	bl	8001e3c <SPI_RxByte>

  do
  {
     res = SPI_RxByte();
 8001ea4:	f7ff ffca 	bl	8001e3c <SPI_RxByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2bff      	cmp	r3, #255	@ 0xff
 8001eb0:	d004      	beq.n	8001ebc <SD_ReadyWait+0x28>
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <SD_ReadyWait+0x34>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f3      	bne.n	8001ea4 <SD_ReadyWait+0x10>

  return res;
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200029ee 	.word	0x200029ee

08001ecc <SD_PowerOn>:

 static void SD_PowerOn(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001ed2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001ed6:	617b      	str	r3, [r7, #20]

   DESELECT();
 8001ed8:	f7ff ff8a 	bl	8001df0 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e005      	b.n	8001eee <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001ee2:	20ff      	movs	r0, #255	@ 0xff
 8001ee4:	f7ff ff90 	bl	8001e08 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	3301      	adds	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	ddf6      	ble.n	8001ee2 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001ef4:	f7ff ff70 	bl	8001dd8 <SELECT>

   cmd_arg[0] = (CMD0 | 0x40);
 8001ef8:	2340      	movs	r3, #64	@ 0x40
 8001efa:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001f0c:	2395      	movs	r3, #149	@ 0x95
 8001f0e:	727b      	strb	r3, [r7, #9]

   for (int i = 0; i < 6; i++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e009      	b.n	8001f2a <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001f16:	1d3a      	adds	r2, r7, #4
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff72 	bl	8001e08 <SPI_TxByte>
   for (int i = 0; i < 6; i++)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b05      	cmp	r3, #5
 8001f2e:	ddf2      	ble.n	8001f16 <SD_PowerOn+0x4a>
  }

   while ((SPI_RxByte() != 0x01) && Count)
 8001f30:	e002      	b.n	8001f38 <SD_PowerOn+0x6c>
  {
    Count--;
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
   while ((SPI_RxByte() != 0x01) && Count)
 8001f38:	f7ff ff80 	bl	8001e3c <SPI_RxByte>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d002      	beq.n	8001f48 <SD_PowerOn+0x7c>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f4      	bne.n	8001f32 <SD_PowerOn+0x66>
  }

  DESELECT();
 8001f48:	f7ff ff52 	bl	8001df0 <DESELECT>
  SPI_TxByte(0XFF);
 8001f4c:	20ff      	movs	r0, #255	@ 0xff
 8001f4e:	f7ff ff5b 	bl	8001e08 <SPI_TxByte>

  PowerFlag = 1;
 8001f52:	4b03      	ldr	r3, [pc, #12]	@ (8001f60 <SD_PowerOn+0x94>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000289 	.word	0x20000289

08001f64 <SD_PowerOff>:

 static void SD_PowerOff(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <SD_PowerOff+0x14>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20000289 	.word	0x20000289

08001f7c <SD_CheckPower>:

 static uint8_t SD_CheckPower(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <SD_CheckPower+0x14>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000289 	.word	0x20000289

08001f94 <SD_RxDataBlock>:

 static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint8_t token;

   Timer1 = 10;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	@ (8001ffc <SD_RxDataBlock+0x68>)
 8001fa0:	220a      	movs	r2, #10
 8001fa2:	701a      	strb	r2, [r3, #0]

  do
  {
    token = SPI_RxByte();
 8001fa4:	f7ff ff4a 	bl	8001e3c <SPI_RxByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2bff      	cmp	r3, #255	@ 0xff
 8001fb0:	d104      	bne.n	8001fbc <SD_RxDataBlock+0x28>
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <SD_RxDataBlock+0x68>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f3      	bne.n	8001fa4 <SD_RxDataBlock+0x10>


  if(token != 0xFE)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001fc0:	d001      	beq.n	8001fc6 <SD_RxDataBlock+0x32>
    return FALSE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e016      	b.n	8001ff4 <SD_RxDataBlock+0x60>

  do
  {
    SPI_RxBytePtr(buff++);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff53 	bl	8001e78 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	607a      	str	r2, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff4d 	bl	8001e78 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	3b02      	subs	r3, #2
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ed      	bne.n	8001fc6 <SD_RxDataBlock+0x32>

  SPI_RxByte();
 8001fea:	f7ff ff27 	bl	8001e3c <SPI_RxByte>
  SPI_RxByte();
 8001fee:	f7ff ff25 	bl	8001e3c <SPI_RxByte>

  return TRUE;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	200029ed 	.word	0x200029ed

08002000 <SD_TxDataBlock>:


#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	737b      	strb	r3, [r7, #13]

  if (SD_ReadyWait() != 0xFF)
 8002010:	f7ff ff40 	bl	8001e94 <SD_ReadyWait>
 8002014:	4603      	mov	r3, r0
 8002016:	2bff      	cmp	r3, #255	@ 0xff
 8002018:	d001      	beq.n	800201e <SD_TxDataBlock+0x1e>
    return FALSE;
 800201a:	2300      	movs	r3, #0
 800201c:	e040      	b.n	80020a0 <SD_TxDataBlock+0xa0>

  SPI_TxByte(token);
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fef1 	bl	8001e08 <SPI_TxByte>

  if (token != 0xFD)
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	2bfd      	cmp	r3, #253	@ 0xfd
 800202a:	d031      	beq.n	8002090 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	73bb      	strb	r3, [r7, #14]

    do
    {
      SPI_TxByte(*buff++);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fee5 	bl	8001e08 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fede 	bl	8001e08 <SPI_TxByte>
    } while (--wc);
 800204c:	7bbb      	ldrb	r3, [r7, #14]
 800204e:	3b01      	subs	r3, #1
 8002050:	73bb      	strb	r3, [r7, #14]
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1eb      	bne.n	8002030 <SD_TxDataBlock+0x30>

    SPI_RxByte();
 8002058:	f7ff fef0 	bl	8001e3c <SPI_RxByte>
    SPI_RxByte();
 800205c:	f7ff feee 	bl	8001e3c <SPI_RxByte>

    while (i <= 64)
 8002060:	e00b      	b.n	800207a <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8002062:	f7ff feeb 	bl	8001e3c <SPI_RxByte>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]

      if ((resp & 0x1F) == 0x05)
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2b05      	cmp	r3, #5
 8002072:	d006      	beq.n	8002082 <SD_TxDataBlock+0x82>
        break;

      i++;
 8002074:	7b7b      	ldrb	r3, [r7, #13]
 8002076:	3301      	adds	r3, #1
 8002078:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 800207a:	7b7b      	ldrb	r3, [r7, #13]
 800207c:	2b40      	cmp	r3, #64	@ 0x40
 800207e:	d9f0      	bls.n	8002062 <SD_TxDataBlock+0x62>
 8002080:	e000      	b.n	8002084 <SD_TxDataBlock+0x84>
        break;
 8002082:	bf00      	nop
    }

    while (SPI_RxByte() == 0);
 8002084:	bf00      	nop
 8002086:	f7ff fed9 	bl	8001e3c <SPI_RxByte>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0fa      	beq.n	8002086 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2b05      	cmp	r3, #5
 8002098:	d101      	bne.n	800209e <SD_TxDataBlock+0x9e>
    return TRUE;
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  if (SD_ReadyWait() != 0xFF)
 80020b4:	f7ff feee 	bl	8001e94 <SD_ReadyWait>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2bff      	cmp	r3, #255	@ 0xff
 80020bc:	d001      	beq.n	80020c2 <SD_SendCmd+0x1a>
    return 0xFF;
 80020be:	23ff      	movs	r3, #255	@ 0xff
 80020c0:	e040      	b.n	8002144 <SD_SendCmd+0x9c>

  SPI_TxByte(cmd); 			/* Command */
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe9f 	bl	8001e08 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	0e1b      	lsrs	r3, r3, #24
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fe99 	bl	8001e08 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fe93 	bl	8001e08 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe8d 	bl	8001e08 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe88 	bl	8001e08 <SPI_TxByte>

  crc = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	2b40      	cmp	r3, #64	@ 0x40
 8002100:	d101      	bne.n	8002106 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002102:	2395      	movs	r3, #149	@ 0x95
 8002104:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b48      	cmp	r3, #72	@ 0x48
 800210a:	d101      	bne.n	8002110 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800210c:	2387      	movs	r3, #135	@ 0x87
 800210e:	73fb      	strb	r3, [r7, #15]

  /* CRC */
  SPI_TxByte(crc);
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fe78 	bl	8001e08 <SPI_TxByte>

  if (cmd == CMD12)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	2b4c      	cmp	r3, #76	@ 0x4c
 800211c:	d101      	bne.n	8002122 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800211e:	f7ff fe8d 	bl	8001e3c <SPI_RxByte>

  uint8_t n = 10;
 8002122:	230a      	movs	r3, #10
 8002124:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002126:	f7ff fe89 	bl	8001e3c <SPI_RxByte>
 800212a:	4603      	mov	r3, r0
 800212c:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800212e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da05      	bge.n	8002142 <SD_SendCmd+0x9a>
 8002136:	7bbb      	ldrb	r3, [r7, #14]
 8002138:	3b01      	subs	r3, #1
 800213a:	73bb      	strb	r3, [r7, #14]
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f1      	bne.n	8002126 <SD_SendCmd+0x7e>

  return res;
 8002142:	7b7b      	ldrb	r3, [r7, #13]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <SD_disk_initialize>:


DSTATUS SD_disk_initialize(BYTE drv)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  if(drv)
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d5      	b.n	800230c <SD_disk_initialize+0x1c0>

  if(Stat & STA_NODISK)
 8002160:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <SD_disk_initialize+0x1c8>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <SD_disk_initialize+0x2a>
    return Stat;
 800216e:	4b69      	ldr	r3, [pc, #420]	@ (8002314 <SD_disk_initialize+0x1c8>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e0ca      	b.n	800230c <SD_disk_initialize+0x1c0>

  SD_PowerOn();
 8002176:	f7ff fea9 	bl	8001ecc <SD_PowerOn>

  SELECT();
 800217a:	f7ff fe2d 	bl	8001dd8 <SELECT>

  type = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	73bb      	strb	r3, [r7, #14]

  if (SD_SendCmd(CMD0, 0) == 1)
 8002182:	2100      	movs	r1, #0
 8002184:	2040      	movs	r0, #64	@ 0x40
 8002186:	f7ff ff8f 	bl	80020a8 <SD_SendCmd>
 800218a:	4603      	mov	r3, r0
 800218c:	2b01      	cmp	r3, #1
 800218e:	f040 80a5 	bne.w	80022dc <SD_disk_initialize+0x190>
  {
    Timer1 = 100;
 8002192:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <SD_disk_initialize+0x1cc>)
 8002194:	2264      	movs	r2, #100	@ 0x64
 8002196:	701a      	strb	r2, [r3, #0]

    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002198:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800219c:	2048      	movs	r0, #72	@ 0x48
 800219e:	f7ff ff83 	bl	80020a8 <SD_SendCmd>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d158      	bne.n	800225a <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e00c      	b.n	80021c8 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80021ae:	7bfc      	ldrb	r4, [r7, #15]
 80021b0:	f7ff fe44 	bl	8001e3c <SPI_RxByte>
 80021b4:	4603      	mov	r3, r0
 80021b6:	461a      	mov	r2, r3
 80021b8:	f104 0310 	add.w	r3, r4, #16
 80021bc:	443b      	add	r3, r7
 80021be:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	3301      	adds	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d9ef      	bls.n	80021ae <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80021ce:	7abb      	ldrb	r3, [r7, #10]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 8083 	bne.w	80022dc <SD_disk_initialize+0x190>
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	2baa      	cmp	r3, #170	@ 0xaa
 80021da:	d17f      	bne.n	80022dc <SD_disk_initialize+0x190>
      {
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80021dc:	2100      	movs	r1, #0
 80021de:	2077      	movs	r0, #119	@ 0x77
 80021e0:	f7ff ff62 	bl	80020a8 <SD_SendCmd>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d807      	bhi.n	80021fa <SD_disk_initialize+0xae>
 80021ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80021ee:	2069      	movs	r0, #105	@ 0x69
 80021f0:	f7ff ff5a 	bl	80020a8 <SD_SendCmd>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80021fa:	4b47      	ldr	r3, [pc, #284]	@ (8002318 <SD_disk_initialize+0x1cc>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1eb      	bne.n	80021dc <SD_disk_initialize+0x90>
 8002204:	e000      	b.n	8002208 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002206:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002208:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <SD_disk_initialize+0x1cc>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d064      	beq.n	80022dc <SD_disk_initialize+0x190>
 8002212:	2100      	movs	r1, #0
 8002214:	207a      	movs	r0, #122	@ 0x7a
 8002216:	f7ff ff47 	bl	80020a8 <SD_SendCmd>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d15d      	bne.n	80022dc <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
 8002224:	e00c      	b.n	8002240 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002226:	7bfc      	ldrb	r4, [r7, #15]
 8002228:	f7ff fe08 	bl	8001e3c <SPI_RxByte>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	f104 0310 	add.w	r3, r4, #16
 8002234:	443b      	add	r3, r7
 8002236:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d9ef      	bls.n	8002226 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8002246:	7a3b      	ldrb	r3, [r7, #8]
 8002248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SD_disk_initialize+0x108>
 8002250:	2306      	movs	r3, #6
 8002252:	e000      	b.n	8002256 <SD_disk_initialize+0x10a>
 8002254:	2302      	movs	r3, #2
 8002256:	73bb      	strb	r3, [r7, #14]
 8002258:	e040      	b.n	80022dc <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800225a:	2100      	movs	r1, #0
 800225c:	2077      	movs	r0, #119	@ 0x77
 800225e:	f7ff ff23 	bl	80020a8 <SD_SendCmd>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d808      	bhi.n	800227a <SD_disk_initialize+0x12e>
 8002268:	2100      	movs	r1, #0
 800226a:	2069      	movs	r0, #105	@ 0x69
 800226c:	f7ff ff1c 	bl	80020a8 <SD_SendCmd>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d801      	bhi.n	800227a <SD_disk_initialize+0x12e>
 8002276:	2302      	movs	r3, #2
 8002278:	e000      	b.n	800227c <SD_disk_initialize+0x130>
 800227a:	2301      	movs	r3, #1
 800227c:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800227e:	7bbb      	ldrb	r3, [r7, #14]
 8002280:	2b02      	cmp	r3, #2
 8002282:	d10e      	bne.n	80022a2 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002284:	2100      	movs	r1, #0
 8002286:	2077      	movs	r0, #119	@ 0x77
 8002288:	f7ff ff0e 	bl	80020a8 <SD_SendCmd>
 800228c:	4603      	mov	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d80e      	bhi.n	80022b0 <SD_disk_initialize+0x164>
 8002292:	2100      	movs	r1, #0
 8002294:	2069      	movs	r0, #105	@ 0x69
 8002296:	f7ff ff07 	bl	80020a8 <SD_SendCmd>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80022a0:	e00d      	b.n	80022be <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80022a2:	2100      	movs	r1, #0
 80022a4:	2041      	movs	r0, #65	@ 0x41
 80022a6:	f7ff feff 	bl	80020a8 <SD_SendCmd>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80022b0:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <SD_disk_initialize+0x1cc>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1e1      	bne.n	800227e <SD_disk_initialize+0x132>
 80022ba:	e000      	b.n	80022be <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80022bc:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <SD_disk_initialize+0x1cc>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d007      	beq.n	80022d8 <SD_disk_initialize+0x18c>
 80022c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022cc:	2050      	movs	r0, #80	@ 0x50
 80022ce:	f7ff feeb 	bl	80020a8 <SD_SendCmd>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SD_disk_initialize+0x190>
      {
        type = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80022dc:	4a0f      	ldr	r2, [pc, #60]	@ (800231c <SD_disk_initialize+0x1d0>)
 80022de:	7bbb      	ldrb	r3, [r7, #14]
 80022e0:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80022e2:	f7ff fd85 	bl	8001df0 <DESELECT>

  SPI_RxByte();
 80022e6:	f7ff fda9 	bl	8001e3c <SPI_RxByte>

  if (type)
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80022f0:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <SD_disk_initialize+0x1c8>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <SD_disk_initialize+0x1c8>)
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e001      	b.n	8002306 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002302:	f7ff fe2f 	bl	8001f64 <SD_PowerOff>
  }

  return Stat;
 8002306:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <SD_disk_initialize+0x1c8>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}
 8002314:	20000000 	.word	0x20000000
 8002318:	200029ed 	.word	0x200029ed
 800231c:	20000288 	.word	0x20000288

08002320 <SD_disk_status>:

DSTATUS SD_disk_status(BYTE drv)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <SD_disk_status+0x14>
    return STA_NOINIT;
 8002330:	2301      	movs	r3, #1
 8002332:	e002      	b.n	800233a <SD_disk_status+0x1a>

  return Stat;
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <SD_disk_status+0x28>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000000 	.word	0x20000000

0800234c <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <SD_disk_read+0x1c>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <SD_disk_read+0x20>
    return RES_PARERR;
 8002368:	2304      	movs	r3, #4
 800236a:	e051      	b.n	8002410 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <SD_disk_read+0xcc>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800237a:	2303      	movs	r3, #3
 800237c:	e048      	b.n	8002410 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800237e:	4b27      	ldr	r3, [pc, #156]	@ (800241c <SD_disk_read+0xd0>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d102      	bne.n	8002390 <SD_disk_read+0x44>
    sector *= 512;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	025b      	lsls	r3, r3, #9
 800238e:	607b      	str	r3, [r7, #4]

  SELECT();
 8002390:	f7ff fd22 	bl	8001dd8 <SELECT>

  if (count == 1)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d111      	bne.n	80023be <SD_disk_read+0x72>
  {

    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	2051      	movs	r0, #81	@ 0x51
 800239e:	f7ff fe83 	bl	80020a8 <SD_SendCmd>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d129      	bne.n	80023fc <SD_disk_read+0xb0>
 80023a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023ac:	68b8      	ldr	r0, [r7, #8]
 80023ae:	f7ff fdf1 	bl	8001f94 <SD_RxDataBlock>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <SD_disk_read+0xb0>
      count = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	e01e      	b.n	80023fc <SD_disk_read+0xb0>
  }
  else
  {
    if (SD_SendCmd(CMD18, sector) == 0)
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	2052      	movs	r0, #82	@ 0x52
 80023c2:	f7ff fe71 	bl	80020a8 <SD_SendCmd>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d117      	bne.n	80023fc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80023cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023d0:	68b8      	ldr	r0, [r7, #8]
 80023d2:	f7ff fddf 	bl	8001f94 <SD_RxDataBlock>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <SD_disk_read+0xa6>
          break;

        buff += 512;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023e2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1ed      	bne.n	80023cc <SD_disk_read+0x80>
 80023f0:	e000      	b.n	80023f4 <SD_disk_read+0xa8>
          break;
 80023f2:	bf00      	nop

      SD_SendCmd(CMD12, 0);
 80023f4:	2100      	movs	r1, #0
 80023f6:	204c      	movs	r0, #76	@ 0x4c
 80023f8:	f7ff fe56 	bl	80020a8 <SD_SendCmd>
    }
  }

  DESELECT();
 80023fc:	f7ff fcf8 	bl	8001df0 <DESELECT>
  SPI_RxByte();
 8002400:	f7ff fd1c 	bl	8001e3c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf14      	ite	ne
 800240a:	2301      	movne	r3, #1
 800240c:	2300      	moveq	r3, #0
 800240e:	b2db      	uxtb	r3, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000000 	.word	0x20000000
 800241c:	20000288 	.word	0x20000288

08002420 <SD_disk_write>:

#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <SD_disk_write+0x1c>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <SD_disk_write+0x20>
    return RES_PARERR;
 800243c:	2304      	movs	r3, #4
 800243e:	e06b      	b.n	8002518 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8002440:	4b37      	ldr	r3, [pc, #220]	@ (8002520 <SD_disk_write+0x100>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800244e:	2303      	movs	r3, #3
 8002450:	e062      	b.n	8002518 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8002452:	4b33      	ldr	r3, [pc, #204]	@ (8002520 <SD_disk_write+0x100>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002460:	2302      	movs	r3, #2
 8002462:	e059      	b.n	8002518 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002464:	4b2f      	ldr	r3, [pc, #188]	@ (8002524 <SD_disk_write+0x104>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <SD_disk_write+0x56>
    sector *= 512;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	607b      	str	r3, [r7, #4]

  SELECT();
 8002476:	f7ff fcaf 	bl	8001dd8 <SELECT>

  if (count == 1)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d110      	bne.n	80024a2 <SD_disk_write+0x82>
  {
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	2058      	movs	r0, #88	@ 0x58
 8002484:	f7ff fe10 	bl	80020a8 <SD_SendCmd>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d13a      	bne.n	8002504 <SD_disk_write+0xe4>
 800248e:	21fe      	movs	r1, #254	@ 0xfe
 8002490:	68b8      	ldr	r0, [r7, #8]
 8002492:	f7ff fdb5 	bl	8002000 <SD_TxDataBlock>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d033      	beq.n	8002504 <SD_disk_write+0xe4>
      count = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	e030      	b.n	8002504 <SD_disk_write+0xe4>
  }
  else
  {
    if (CardType & 2)
 80024a2:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <SD_disk_write+0x104>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80024ae:	2100      	movs	r1, #0
 80024b0:	2077      	movs	r0, #119	@ 0x77
 80024b2:	f7ff fdf9 	bl	80020a8 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80024b6:	6839      	ldr	r1, [r7, #0]
 80024b8:	2057      	movs	r0, #87	@ 0x57
 80024ba:	f7ff fdf5 	bl	80020a8 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	2059      	movs	r0, #89	@ 0x59
 80024c2:	f7ff fdf1 	bl	80020a8 <SD_SendCmd>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11b      	bne.n	8002504 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80024cc:	21fc      	movs	r1, #252	@ 0xfc
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f7ff fd96 	bl	8002000 <SD_TxDataBlock>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <SD_disk_write+0xd0>
          break;

        buff += 512;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80024e0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ee      	bne.n	80024cc <SD_disk_write+0xac>
 80024ee:	e000      	b.n	80024f2 <SD_disk_write+0xd2>
          break;
 80024f0:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80024f2:	21fd      	movs	r1, #253	@ 0xfd
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff fd83 	bl	8002000 <SD_TxDataBlock>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <SD_disk_write+0xe4>
      {
        count = 1;
 8002500:	2301      	movs	r3, #1
 8002502:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002504:	f7ff fc74 	bl	8001df0 <DESELECT>
  SPI_RxByte();
 8002508:	f7ff fc98 	bl	8001e3c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000000 	.word	0x20000000
 8002524:	20000288 	.word	0x20000288

08002528 <SD_disk_ioctl>:
#endif /* _READONLY */

DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b08b      	sub	sp, #44	@ 0x2c
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	603a      	str	r2, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
 8002534:	460b      	mov	r3, r1
 8002536:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002542:	2304      	movs	r3, #4
 8002544:	e119      	b.n	800277a <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d129      	bne.n	80025a6 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d017      	beq.n	800258a <SD_disk_ioctl+0x62>
 800255a:	2b02      	cmp	r3, #2
 800255c:	dc1f      	bgt.n	800259e <SD_disk_ioctl+0x76>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <SD_disk_ioctl+0x40>
 8002562:	2b01      	cmp	r3, #1
 8002564:	d00b      	beq.n	800257e <SD_disk_ioctl+0x56>
 8002566:	e01a      	b.n	800259e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002568:	f7ff fd08 	bl	8001f7c <SD_CheckPower>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002572:	f7ff fcf7 	bl	8001f64 <SD_PowerOff>
      res = RES_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800257c:	e0fb      	b.n	8002776 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 800257e:	f7ff fca5 	bl	8001ecc <SD_PowerOn>
      res = RES_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002588:	e0f5      	b.n	8002776 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	1c5c      	adds	r4, r3, #1
 800258e:	f7ff fcf5 	bl	8001f7c <SD_CheckPower>
 8002592:	4603      	mov	r3, r0
 8002594:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800259c:	e0eb      	b.n	8002776 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 800259e:	2304      	movs	r3, #4
 80025a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025a4:	e0e7      	b.n	8002776 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80025a6:	4b77      	ldr	r3, [pc, #476]	@ (8002784 <SD_disk_ioctl+0x25c>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0e0      	b.n	800277a <SD_disk_ioctl+0x252>

    SELECT();
 80025b8:	f7ff fc0e 	bl	8001dd8 <SELECT>

    switch (ctrl)
 80025bc:	79bb      	ldrb	r3, [r7, #6]
 80025be:	2b0d      	cmp	r3, #13
 80025c0:	f200 80ca 	bhi.w	8002758 <SD_disk_ioctl+0x230>
 80025c4:	a201      	add	r2, pc, #4	@ (adr r2, 80025cc <SD_disk_ioctl+0xa4>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	080026c3 	.word	0x080026c3
 80025d0:	08002605 	.word	0x08002605
 80025d4:	080026b3 	.word	0x080026b3
 80025d8:	08002759 	.word	0x08002759
 80025dc:	08002759 	.word	0x08002759
 80025e0:	08002759 	.word	0x08002759
 80025e4:	08002759 	.word	0x08002759
 80025e8:	08002759 	.word	0x08002759
 80025ec:	08002759 	.word	0x08002759
 80025f0:	08002759 	.word	0x08002759
 80025f4:	08002759 	.word	0x08002759
 80025f8:	080026d5 	.word	0x080026d5
 80025fc:	080026f9 	.word	0x080026f9
 8002600:	0800271d 	.word	0x0800271d
    {
    case GET_SECTOR_COUNT:
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002604:	2100      	movs	r1, #0
 8002606:	2049      	movs	r0, #73	@ 0x49
 8002608:	f7ff fd4e 	bl	80020a8 <SD_SendCmd>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 80a6 	bne.w	8002760 <SD_disk_ioctl+0x238>
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	2110      	movs	r1, #16
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fcba 	bl	8001f94 <SD_RxDataBlock>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 809c 	beq.w	8002760 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8002628:	7b3b      	ldrb	r3, [r7, #12]
 800262a:	099b      	lsrs	r3, r3, #6
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10d      	bne.n	800264e <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002632:	7d7b      	ldrb	r3, [r7, #21]
 8002634:	461a      	mov	r2, r3
 8002636:	7d3b      	ldrb	r3, [r7, #20]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b29b      	uxth	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	3301      	adds	r3, #1
 8002642:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002644:	8bfb      	ldrh	r3, [r7, #30]
 8002646:	029a      	lsls	r2, r3, #10
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e02d      	b.n	80026aa <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800264e:	7c7b      	ldrb	r3, [r7, #17]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	7dbb      	ldrb	r3, [r7, #22]
 8002658:	09db      	lsrs	r3, r3, #7
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4413      	add	r3, r2
 800265e:	b2da      	uxtb	r2, r3
 8002660:	7d7b      	ldrb	r3, [r7, #21]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f003 0306 	and.w	r3, r3, #6
 800266a:	b2db      	uxtb	r3, r3
 800266c:	4413      	add	r3, r2
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3302      	adds	r3, #2
 8002672:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002676:	7d3b      	ldrb	r3, [r7, #20]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	b29b      	uxth	r3, r3
 8002684:	4413      	add	r3, r2
 8002686:	b29a      	uxth	r2, r3
 8002688:	7cbb      	ldrb	r3, [r7, #18]
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	b29b      	uxth	r3, r3
 800268e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002692:	b29b      	uxth	r3, r3
 8002694:	4413      	add	r3, r2
 8002696:	b29b      	uxth	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800269c:	8bfa      	ldrh	r2, [r7, #30]
 800269e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80026a2:	3b09      	subs	r3, #9
 80026a4:	409a      	lsls	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80026b0:	e056      	b.n	8002760 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026b8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026c0:	e055      	b.n	800276e <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF)
 80026c2:	f7ff fbe7 	bl	8001e94 <SD_ReadyWait>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2bff      	cmp	r3, #255	@ 0xff
 80026ca:	d14b      	bne.n	8002764 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026d2:	e047      	b.n	8002764 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80026d4:	2100      	movs	r1, #0
 80026d6:	2049      	movs	r0, #73	@ 0x49
 80026d8:	f7ff fce6 	bl	80020a8 <SD_SendCmd>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d142      	bne.n	8002768 <SD_disk_ioctl+0x240>
 80026e2:	2110      	movs	r1, #16
 80026e4:	6a38      	ldr	r0, [r7, #32]
 80026e6:	f7ff fc55 	bl	8001f94 <SD_RxDataBlock>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d03b      	beq.n	8002768 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80026f6:	e037      	b.n	8002768 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80026f8:	2100      	movs	r1, #0
 80026fa:	204a      	movs	r0, #74	@ 0x4a
 80026fc:	f7ff fcd4 	bl	80020a8 <SD_SendCmd>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d132      	bne.n	800276c <SD_disk_ioctl+0x244>
 8002706:	2110      	movs	r1, #16
 8002708:	6a38      	ldr	r0, [r7, #32]
 800270a:	f7ff fc43 	bl	8001f94 <SD_RxDataBlock>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d02b      	beq.n	800276c <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800271a:	e027      	b.n	800276c <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      if (SD_SendCmd(CMD58, 0) == 0)
 800271c:	2100      	movs	r1, #0
 800271e:	207a      	movs	r0, #122	@ 0x7a
 8002720:	f7ff fcc2 	bl	80020a8 <SD_SendCmd>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800272a:	2300      	movs	r3, #0
 800272c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002730:	e00b      	b.n	800274a <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8002732:	6a3c      	ldr	r4, [r7, #32]
 8002734:	1c63      	adds	r3, r4, #1
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	f7ff fb80 	bl	8001e3c <SPI_RxByte>
 800273c:	4603      	mov	r3, r0
 800273e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002744:	3301      	adds	r3, #1
 8002746:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800274a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800274e:	2b03      	cmp	r3, #3
 8002750:	d9ef      	bls.n	8002732 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8002758:	2304      	movs	r3, #4
 800275a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800275e:	e006      	b.n	800276e <SD_disk_ioctl+0x246>
      break;
 8002760:	bf00      	nop
 8002762:	e004      	b.n	800276e <SD_disk_ioctl+0x246>
      break;
 8002764:	bf00      	nop
 8002766:	e002      	b.n	800276e <SD_disk_ioctl+0x246>
      break;
 8002768:	bf00      	nop
 800276a:	e000      	b.n	800276e <SD_disk_ioctl+0x246>
      break;
 800276c:	bf00      	nop
    }

    DESELECT();
 800276e:	f7ff fb3f 	bl	8001df0 <DESELECT>
    SPI_RxByte();
 8002772:	f7ff fb63 	bl	8001e3c <SPI_RxByte>
  }

  return res;
 8002776:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800277a:	4618      	mov	r0, r3
 800277c:	372c      	adds	r7, #44	@ 0x2c
 800277e:	46bd      	mov	sp, r7
 8002780:	bd90      	pop	{r4, r7, pc}
 8002782:	bf00      	nop
 8002784:	20000000 	.word	0x20000000

08002788 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08e      	sub	sp, #56	@ 0x38
 800278c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	4b89      	ldr	r3, [pc, #548]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a88      	ldr	r2, [pc, #544]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b86      	ldr	r3, [pc, #536]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027b6:	4b83      	ldr	r3, [pc, #524]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a82      	ldr	r2, [pc, #520]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b80      	ldr	r3, [pc, #512]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b7d      	ldr	r3, [pc, #500]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	4a7c      	ldr	r2, [pc, #496]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027da:	4b7a      	ldr	r3, [pc, #488]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	4b77      	ldr	r3, [pc, #476]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a76      	ldr	r2, [pc, #472]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b74      	ldr	r3, [pc, #464]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027fe:	4b71      	ldr	r3, [pc, #452]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a70      	ldr	r2, [pc, #448]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002804:	f043 0320 	orr.w	r3, r3, #32
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b6e      	ldr	r3, [pc, #440]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002816:	4b6b      	ldr	r3, [pc, #428]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a6a      	ldr	r2, [pc, #424]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b68      	ldr	r3, [pc, #416]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800282e:	4b65      	ldr	r3, [pc, #404]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a64      	ldr	r2, [pc, #400]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b62      	ldr	r3, [pc, #392]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002846:	4b5f      	ldr	r3, [pc, #380]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a5e      	ldr	r2, [pc, #376]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 800284c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <MX_GPIO_Init+0x23c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002864:	4858      	ldr	r0, [pc, #352]	@ (80029c8 <MX_GPIO_Init+0x240>)
 8002866:	f002 f9fd 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin, GPIO_PIN_RESET);
 800286a:	2200      	movs	r2, #0
 800286c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002870:	4856      	ldr	r0, [pc, #344]	@ (80029cc <MX_GPIO_Init+0x244>)
 8002872:	f002 f9f7 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_BMP_Pin|CS_SDcard_Pin, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 800287c:	4854      	ldr	r0, [pc, #336]	@ (80029d0 <MX_GPIO_Init+0x248>)
 800287e:	f002 f9f1 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002882:	2200      	movs	r2, #0
 8002884:	2140      	movs	r1, #64	@ 0x40
 8002886:	4853      	ldr	r0, [pc, #332]	@ (80029d4 <MX_GPIO_Init+0x24c>)
 8002888:	f002 f9ec 	bl	8004c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800288c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002892:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028a0:	4619      	mov	r1, r3
 80028a2:	484d      	ldr	r0, [pc, #308]	@ (80029d8 <MX_GPIO_Init+0x250>)
 80028a4:	f002 f832 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028a8:	2332      	movs	r3, #50	@ 0x32
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028b8:	230b      	movs	r3, #11
 80028ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	4845      	ldr	r0, [pc, #276]	@ (80029d8 <MX_GPIO_Init+0x250>)
 80028c4:	f002 f822 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80028c8:	2386      	movs	r3, #134	@ 0x86
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028d8:	230b      	movs	r3, #11
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	483e      	ldr	r0, [pc, #248]	@ (80029dc <MX_GPIO_Init+0x254>)
 80028e4:	f002 f812 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80028e8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ee:	2301      	movs	r3, #1
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f6:	2300      	movs	r3, #0
 80028f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028fe:	4619      	mov	r1, r3
 8002900:	4831      	ldr	r0, [pc, #196]	@ (80029c8 <MX_GPIO_Init+0x240>)
 8002902:	f002 f803 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_OLED_Pin ST7735_RES_Pin_Pin ST7735_DC_Pin_Pin */
  GPIO_InitStruct.Pin = CS_OLED_Pin|ST7735_RES_Pin_Pin|ST7735_DC_Pin_Pin;
 8002906:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290c:	2301      	movs	r3, #1
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002914:	2300      	movs	r3, #0
 8002916:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291c:	4619      	mov	r1, r3
 800291e:	482b      	ldr	r0, [pc, #172]	@ (80029cc <MX_GPIO_Init+0x244>)
 8002920:	f001 fff4 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_BMP_Pin CS_SDcard_Pin */
  GPIO_InitStruct.Pin = CS_BMP_Pin|CS_SDcard_Pin;
 8002924:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2301      	movs	r3, #1
 800292c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800293a:	4619      	mov	r1, r3
 800293c:	4824      	ldr	r0, [pc, #144]	@ (80029d0 <MX_GPIO_Init+0x248>)
 800293e:	f001 ffe5 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002950:	2303      	movs	r3, #3
 8002952:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002954:	230b      	movs	r3, #11
 8002956:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800295c:	4619      	mov	r1, r3
 800295e:	481a      	ldr	r0, [pc, #104]	@ (80029c8 <MX_GPIO_Init+0x240>)
 8002960:	f001 ffd4 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002964:	2340      	movs	r3, #64	@ 0x40
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	2301      	movs	r3, #1
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002978:	4619      	mov	r1, r3
 800297a:	4816      	ldr	r0, [pc, #88]	@ (80029d4 <MX_GPIO_Init+0x24c>)
 800297c:	f001 ffc6 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002980:	2380      	movs	r3, #128	@ 0x80
 8002982:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800298c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002990:	4619      	mov	r1, r3
 8002992:	4810      	ldr	r0, [pc, #64]	@ (80029d4 <MX_GPIO_Init+0x24c>)
 8002994:	f001 ffba 	bl	800490c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002998:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029aa:	230b      	movs	r3, #11
 80029ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b2:	4619      	mov	r1, r3
 80029b4:	4807      	ldr	r0, [pc, #28]	@ (80029d4 <MX_GPIO_Init+0x24c>)
 80029b6:	f001 ffa9 	bl	800490c <HAL_GPIO_Init>

}
 80029ba:	bf00      	nop
 80029bc:	3738      	adds	r7, #56	@ 0x38
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020400 	.word	0x40020400
 80029cc:	40021400 	.word	0x40021400
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40021800 	.word	0x40021800
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020000 	.word	0x40020000

080029e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <MX_I2C1_Init+0x74>)
 80029e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <MX_I2C1_Init+0x78>)
 80029e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <MX_I2C1_Init+0x74>)
 80029ec:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <MX_I2C1_Init+0x7c>)
 80029ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029f0:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <MX_I2C1_Init+0x74>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029f6:	4b17      	ldr	r3, [pc, #92]	@ (8002a54 <MX_I2C1_Init+0x74>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029fc:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <MX_I2C1_Init+0x74>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a02:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <MX_I2C1_Init+0x74>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <MX_I2C1_Init+0x74>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a0e:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <MX_I2C1_Init+0x74>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <MX_I2C1_Init+0x74>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a1a:	480e      	ldr	r0, [pc, #56]	@ (8002a54 <MX_I2C1_Init+0x74>)
 8002a1c:	f002 f93c 	bl	8004c98 <HAL_I2C_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a26:	f000 fbf5 	bl	8003214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4809      	ldr	r0, [pc, #36]	@ (8002a54 <MX_I2C1_Init+0x74>)
 8002a2e:	f003 fa45 	bl	8005ebc <HAL_I2CEx_ConfigAnalogFilter>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a38:	f000 fbec 	bl	8003214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4805      	ldr	r0, [pc, #20]	@ (8002a54 <MX_I2C1_Init+0x74>)
 8002a40:	f003 fa87 	bl	8005f52 <HAL_I2CEx_ConfigDigitalFilter>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a4a:	f000 fbe3 	bl	8003214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000028c 	.word	0x2000028c
 8002a58:	40005400 	.word	0x40005400
 8002a5c:	00808cd2 	.word	0x00808cd2

08002a60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0aa      	sub	sp, #168	@ 0xa8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	2284      	movs	r2, #132	@ 0x84
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f00a fe77 	bl	800d774 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a22      	ldr	r2, [pc, #136]	@ (8002b14 <HAL_I2C_MspInit+0xb4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d13c      	bne.n	8002b0a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a94:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a9a:	f107 0310 	add.w	r3, r7, #16
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 f8b8 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aaa:	f000 fbb3 	bl	8003214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <HAL_I2C_MspInit+0xb8>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a19      	ldr	r2, [pc, #100]	@ (8002b18 <HAL_I2C_MspInit+0xb8>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b17      	ldr	r3, [pc, #92]	@ (8002b18 <HAL_I2C_MspInit+0xb8>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ac6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ace:	2312      	movs	r3, #18
 8002ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002aea:	4619      	mov	r1, r3
 8002aec:	480b      	ldr	r0, [pc, #44]	@ (8002b1c <HAL_I2C_MspInit+0xbc>)
 8002aee:	f001 ff0d 	bl	800490c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_I2C_MspInit+0xb8>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_I2C_MspInit+0xb8>)
 8002af8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_I2C_MspInit+0xb8>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	37a8      	adds	r7, #168	@ 0xa8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40005400 	.word	0x40005400
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020400 	.word	0x40020400

08002b20 <SDcardInit>:
void OLEDdisplay(struct sensors *s);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SDcardInit(char* folder_name) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    FRESULT res;
    uint8_t retry_count = 5;
 8002b28:	2305      	movs	r3, #5
 8002b2a:	73fb      	strb	r3, [r7, #15]

    while (retry_count--) {
 8002b2c:	e012      	b.n	8002b54 <SDcardInit+0x34>
        res = f_mount(&fs, "", 1);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	492b      	ldr	r1, [pc, #172]	@ (8002be0 <SDcardInit+0xc0>)
 8002b32:	482c      	ldr	r0, [pc, #176]	@ (8002be4 <SDcardInit+0xc4>)
 8002b34:	f008 fc72 	bl	800b41c <f_mount>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 8002b3c:	7bbb      	ldrb	r3, [r7, #14]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <SDcardInit+0x40>
            break;
        }
        printf("Error mounting filesystem! (%d). Retrying...\r\n", res);
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4828      	ldr	r0, [pc, #160]	@ (8002be8 <SDcardInit+0xc8>)
 8002b48:	f00a fc78 	bl	800d43c <iprintf>
        HAL_Delay(RETRY_DELAY_MS);
 8002b4c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b50:	f001 fdd2 	bl	80046f8 <HAL_Delay>
    while (retry_count--) {
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	73fa      	strb	r2, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e7      	bne.n	8002b2e <SDcardInit+0xe>
 8002b5e:	e000      	b.n	8002b62 <SDcardInit+0x42>
            break;
 8002b60:	bf00      	nop
    }

    retry_count = 5;
 8002b62:	2305      	movs	r3, #5
 8002b64:	73fb      	strb	r3, [r7, #15]
    while (retry_count--) {
 8002b66:	e012      	b.n	8002b8e <SDcardInit+0x6e>
        res = f_open(&fil, "test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002b68:	2212      	movs	r2, #18
 8002b6a:	4920      	ldr	r1, [pc, #128]	@ (8002bec <SDcardInit+0xcc>)
 8002b6c:	4820      	ldr	r0, [pc, #128]	@ (8002bf0 <SDcardInit+0xd0>)
 8002b6e:	f008 fc9b 	bl	800b4a8 <f_open>
 8002b72:	4603      	mov	r3, r0
 8002b74:	73bb      	strb	r3, [r7, #14]
        if (res == FR_OK) {
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <SDcardInit+0x7a>
            break;
        }
        printf("Error opening SDcard file! (%d). Retrying...\r\n", res);
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	481c      	ldr	r0, [pc, #112]	@ (8002bf4 <SDcardInit+0xd4>)
 8002b82:	f00a fc5b 	bl	800d43c <iprintf>
        HAL_Delay(RETRY_DELAY_MS);
 8002b86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002b8a:	f001 fdb5 	bl	80046f8 <HAL_Delay>
    while (retry_count--) {
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	1e5a      	subs	r2, r3, #1
 8002b92:	73fa      	strb	r2, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1e7      	bne.n	8002b68 <SDcardInit+0x48>
 8002b98:	e000      	b.n	8002b9c <SDcardInit+0x7c>
            break;
 8002b9a:	bf00      	nop
    }

    res = f_lseek(&fil, f_size(&fil));
 8002b9c:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <SDcardInit+0xd0>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4813      	ldr	r0, [pc, #76]	@ (8002bf0 <SDcardInit+0xd0>)
 8002ba4:	f009 f884 	bl	800bcb0 <f_lseek>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	73bb      	strb	r3, [r7, #14]
    if (res != FR_OK) {
 8002bac:	7bbb      	ldrb	r3, [r7, #14]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d008      	beq.n	8002bc4 <SDcardInit+0xa4>
        printf("Error seeking to end of file! (%d)\r\n", res);
 8002bb2:	7bbb      	ldrb	r3, [r7, #14]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4810      	ldr	r0, [pc, #64]	@ (8002bf8 <SDcardInit+0xd8>)
 8002bb8:	f00a fc40 	bl	800d43c <iprintf>
        f_close(&fil);
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <SDcardInit+0xd0>)
 8002bbe:	f009 f84d 	bl	800bc5c <f_close>
        return;
 8002bc2:	e00a      	b.n	8002bda <SDcardInit+0xba>
    }

    f_puts("\n--- Nowy pomiar ---\n", &fil);
 8002bc4:	490a      	ldr	r1, [pc, #40]	@ (8002bf0 <SDcardInit+0xd0>)
 8002bc6:	480d      	ldr	r0, [pc, #52]	@ (8002bfc <SDcardInit+0xdc>)
 8002bc8:	f009 fb0d 	bl	800c1e6 <f_puts>
    f_puts("TVOC_ppb,CO2_eq_ppm,Ethanol_signal,H2_signal,Temperatura,Cisnienie\n", &fil);
 8002bcc:	4908      	ldr	r1, [pc, #32]	@ (8002bf0 <SDcardInit+0xd0>)
 8002bce:	480c      	ldr	r0, [pc, #48]	@ (8002c00 <SDcardInit+0xe0>)
 8002bd0:	f009 fb09 	bl	800c1e6 <f_puts>

    f_sync(&fil);
 8002bd4:	4806      	ldr	r0, [pc, #24]	@ (8002bf0 <SDcardInit+0xd0>)
 8002bd6:	f008 ffc3 	bl	800bb60 <f_sync>

}
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	08010cb0 	.word	0x08010cb0
 8002be4:	200002f8 	.word	0x200002f8
 8002be8:	08010cb4 	.word	0x08010cb4
 8002bec:	08010ce4 	.word	0x08010ce4
 8002bf0:	20001330 	.word	0x20001330
 8002bf4:	08010cf0 	.word	0x08010cf0
 8002bf8:	08010d20 	.word	0x08010d20
 8002bfc:	08010d48 	.word	0x08010d48
 8002c00:	08010d60 	.word	0x08010d60

08002c04 <SDcardWriteData>:

void SDcardWriteData(struct sensors *s) {
 8002c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c08:	b0b2      	sub	sp, #200	@ 0xc8
 8002c0a:	af0a      	add	r7, sp, #40	@ 0x28
 8002c0c:	6078      	str	r0, [r7, #4]
	// ERROR SDcard -> OLED
	if (f_lseek(&fil, f_size(&fil)) != FR_OK) {
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf8 <SDcardWriteData+0xf4>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4619      	mov	r1, r3
 8002c14:	4838      	ldr	r0, [pc, #224]	@ (8002cf8 <SDcardWriteData+0xf4>)
 8002c16:	f009 f84b 	bl	800bcb0 <f_lseek>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d011      	beq.n	8002c44 <SDcardWriteData+0x40>
  	 printf("Error seeking in file!\r\n");
 8002c20:	4836      	ldr	r0, [pc, #216]	@ (8002cfc <SDcardWriteData+0xf8>)
 8002c22:	f00a fc73 	bl	800d50c <puts>
  	 ST7735_WriteString(10, 140, "Error in file!", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002c26:	4b36      	ldr	r3, [pc, #216]	@ (8002d00 <SDcardWriteData+0xfc>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	9202      	str	r2, [sp, #8]
 8002c2c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c30:	9201      	str	r2, [sp, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	9200      	str	r2, [sp, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a32      	ldr	r2, [pc, #200]	@ (8002d04 <SDcardWriteData+0x100>)
 8002c3a:	218c      	movs	r1, #140	@ 0x8c
 8002c3c:	200a      	movs	r0, #10
 8002c3e:	f001 f968 	bl	8003f12 <ST7735_WriteString>
 8002c42:	e055      	b.n	8002cf0 <SDcardWriteData+0xec>
  	 return;
	}

	char buffer[150];
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld\n",
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	891b      	ldrh	r3, [r3, #8]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld\n",
 8002c48:	469a      	mov	sl, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	895b      	ldrh	r3, [r3, #10]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld\n",
 8002c4e:	461e      	mov	r6, r3
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	899b      	ldrh	r3, [r3, #12]
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002d08 <SDcardWriteData+0x104>
 8002c60:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld\n",
 8002c64:	ee16 0a90 	vmov	r0, s13
 8002c68:	f7fd fc8e 	bl	8000588 <__aeabi_f2d>
 8002c6c:	4604      	mov	r4, r0
 8002c6e:	460d      	mov	r5, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	89db      	ldrh	r3, [r3, #14]
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c7c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002d08 <SDcardWriteData+0x104>
 8002c80:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld\n",
 8002c84:	ee16 0a90 	vmov	r0, s13
 8002c88:	f7fd fc7e 	bl	8000588 <__aeabi_f2d>
 8002c8c:	4680      	mov	r8, r0
 8002c8e:	4689      	mov	r9, r1
			s->tvoc_ppb, s->co2_eq_ppm, s->scaled_ethanol_signal/512.0f, s->scaled_h2_signal/512.0f, s->BMP280temperature, s->BMP280pressure);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
	snprintf(buffer, sizeof(buffer), "%u,%u,%.2f,%.2f,%.2f,%ld\n",
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc77 	bl	8000588 <__aeabi_f2d>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	6849      	ldr	r1, [r1, #4]
 8002ca2:	f107 0008 	add.w	r0, r7, #8
 8002ca6:	9108      	str	r1, [sp, #32]
 8002ca8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002cac:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002cb0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002cb4:	9600      	str	r6, [sp, #0]
 8002cb6:	4653      	mov	r3, sl
 8002cb8:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <SDcardWriteData+0x108>)
 8002cba:	2196      	movs	r1, #150	@ 0x96
 8002cbc:	f00a fc2e 	bl	800d51c <sniprintf>

	if (f_puts(buffer, &fil) < 0) {
 8002cc0:	f107 0308 	add.w	r3, r7, #8
 8002cc4:	490c      	ldr	r1, [pc, #48]	@ (8002cf8 <SDcardWriteData+0xf4>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f009 fa8d 	bl	800c1e6 <f_puts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da02      	bge.n	8002cd8 <SDcardWriteData+0xd4>
  	 printf("Error writing to file!\r\n");
 8002cd2:	480f      	ldr	r0, [pc, #60]	@ (8002d10 <SDcardWriteData+0x10c>)
 8002cd4:	f00a fc1a 	bl	800d50c <puts>
	}

	if (f_sync(&fil) != FR_OK) {
 8002cd8:	4807      	ldr	r0, [pc, #28]	@ (8002cf8 <SDcardWriteData+0xf4>)
 8002cda:	f008 ff41 	bl	800bb60 <f_sync>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <SDcardWriteData+0xe6>
		printf("Error syncing file!\r\n");
 8002ce4:	480b      	ldr	r0, [pc, #44]	@ (8002d14 <SDcardWriteData+0x110>)
 8002ce6:	f00a fc11 	bl	800d50c <puts>
	}
	f_sync(&fil);
 8002cea:	4803      	ldr	r0, [pc, #12]	@ (8002cf8 <SDcardWriteData+0xf4>)
 8002cec:	f008 ff38 	bl	800bb60 <f_sync>
}
 8002cf0:	37a0      	adds	r7, #160	@ 0xa0
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf8:	20001330 	.word	0x20001330
 8002cfc:	08010da4 	.word	0x08010da4
 8002d00:	20000004 	.word	0x20000004
 8002d04:	08010dbc 	.word	0x08010dbc
 8002d08:	44000000 	.word	0x44000000
 8002d0c:	08010dcc 	.word	0x08010dcc
 8002d10:	08010de8 	.word	0x08010de8
 8002d14:	08010e00 	.word	0x08010e00

08002d18 <OLEDdisplay>:
    if (f_close(&fil) != FR_OK) {
        printf("Error closing file!\r\n");
    }
}

void OLEDdisplay(struct sensors *s) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0a4      	sub	sp, #144	@ 0x90
 8002d1c:	af04      	add	r7, sp, #16
 8002d1e:	6078      	str	r0, [r7, #4]
    char buffer[100];
    int tempInt = (int)(s->BMP280temperature * 100);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8002f60 <OLEDdisplay+0x248>
 8002d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d32:	ee17 3a90 	vmov	r3, s15
 8002d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int tempFrac = tempInt % 100;
 8002d38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d3a:	4a8a      	ldr	r2, [pc, #552]	@ (8002f64 <OLEDdisplay+0x24c>)
 8002d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8002d40:	1151      	asrs	r1, r2, #5
 8002d42:	17da      	asrs	r2, r3, #31
 8002d44:	1a8a      	subs	r2, r1, r2
 8002d46:	2164      	movs	r1, #100	@ 0x64
 8002d48:	fb01 f202 	mul.w	r2, r1, r2
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Temperatura
    snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C", tempInt / 100, tempFrac);
 8002d50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002d52:	4a84      	ldr	r2, [pc, #528]	@ (8002f64 <OLEDdisplay+0x24c>)
 8002d54:	fb82 1203 	smull	r1, r2, r2, r3
 8002d58:	1152      	asrs	r2, r2, #5
 8002d5a:	17db      	asrs	r3, r3, #31
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	f107 000c 	add.w	r0, r7, #12
 8002d62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	4613      	mov	r3, r2
 8002d68:	4a7f      	ldr	r2, [pc, #508]	@ (8002f68 <OLEDdisplay+0x250>)
 8002d6a:	2164      	movs	r1, #100	@ 0x64
 8002d6c:	f00a fbd6 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  5, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002d70:	4b7e      	ldr	r3, [pc, #504]	@ (8002f6c <OLEDdisplay+0x254>)
 8002d72:	f107 010c 	add.w	r1, r7, #12
 8002d76:	2200      	movs	r2, #0
 8002d78:	9202      	str	r2, [sp, #8]
 8002d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d7e:	9201      	str	r2, [sp, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	9200      	str	r2, [sp, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	460a      	mov	r2, r1
 8002d88:	2105      	movs	r1, #5
 8002d8a:	2005      	movs	r0, #5
 8002d8c:	f001 f8c1 	bl	8003f12 <ST7735_WriteString>

    // Ciśnienie
    snprintf(buffer, sizeof(buffer), "Prs:  %ld Pa", s->BMP280pressure);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f107 000c 	add.w	r0, r7, #12
 8002d98:	4a75      	ldr	r2, [pc, #468]	@ (8002f70 <OLEDdisplay+0x258>)
 8002d9a:	2164      	movs	r1, #100	@ 0x64
 8002d9c:	f00a fbbe 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  20, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002da0:	4b72      	ldr	r3, [pc, #456]	@ (8002f6c <OLEDdisplay+0x254>)
 8002da2:	f107 010c 	add.w	r1, r7, #12
 8002da6:	2200      	movs	r2, #0
 8002da8:	9202      	str	r2, [sp, #8]
 8002daa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dae:	9201      	str	r2, [sp, #4]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	9200      	str	r2, [sp, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	460a      	mov	r2, r1
 8002db8:	2114      	movs	r1, #20
 8002dba:	2005      	movs	r0, #5
 8002dbc:	f001 f8a9 	bl	8003f12 <ST7735_WriteString>

    // TVOC
    snprintf(buffer, sizeof(buffer), "TVOC: %4u ppb", s->tvoc_ppb);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	891b      	ldrh	r3, [r3, #8]
 8002dc4:	f107 000c 	add.w	r0, r7, #12
 8002dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f74 <OLEDdisplay+0x25c>)
 8002dca:	2164      	movs	r1, #100	@ 0x64
 8002dcc:	f00a fba6 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  35, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002dd0:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <OLEDdisplay+0x254>)
 8002dd2:	f107 010c 	add.w	r1, r7, #12
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	9202      	str	r2, [sp, #8]
 8002dda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dde:	9201      	str	r2, [sp, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	9200      	str	r2, [sp, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	460a      	mov	r2, r1
 8002de8:	2123      	movs	r1, #35	@ 0x23
 8002dea:	2005      	movs	r0, #5
 8002dec:	f001 f891 	bl	8003f12 <ST7735_WriteString>

    // CO2eq
    snprintf(buffer, sizeof(buffer), "CO2:  %4u ppm", s->co2_eq_ppm);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	895b      	ldrh	r3, [r3, #10]
 8002df4:	f107 000c 	add.w	r0, r7, #12
 8002df8:	4a5f      	ldr	r2, [pc, #380]	@ (8002f78 <OLEDdisplay+0x260>)
 8002dfa:	2164      	movs	r1, #100	@ 0x64
 8002dfc:	f00a fb8e 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  50, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002e00:	4b5a      	ldr	r3, [pc, #360]	@ (8002f6c <OLEDdisplay+0x254>)
 8002e02:	f107 010c 	add.w	r1, r7, #12
 8002e06:	2200      	movs	r2, #0
 8002e08:	9202      	str	r2, [sp, #8]
 8002e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e0e:	9201      	str	r2, [sp, #4]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	9200      	str	r2, [sp, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	460a      	mov	r2, r1
 8002e18:	2132      	movs	r1, #50	@ 0x32
 8002e1a:	2005      	movs	r0, #5
 8002e1c:	f001 f879 	bl	8003f12 <ST7735_WriteString>

    // Etanol/512.0
    float ethanol = s->scaled_ethanol_signal / 512.0f;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	899b      	ldrh	r3, [r3, #12]
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e2c:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8002f7c <OLEDdisplay+0x264>
 8002e30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e34:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    snprintf(buffer, sizeof(buffer), "EtOH: %.2f", ethanol);
 8002e38:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002e3a:	f7fd fba5 	bl	8000588 <__aeabi_f2d>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	f107 000c 	add.w	r0, r7, #12
 8002e46:	e9cd 2300 	strd	r2, r3, [sp]
 8002e4a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f80 <OLEDdisplay+0x268>)
 8002e4c:	2164      	movs	r1, #100	@ 0x64
 8002e4e:	f00a fb65 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  65, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002e52:	4b46      	ldr	r3, [pc, #280]	@ (8002f6c <OLEDdisplay+0x254>)
 8002e54:	f107 010c 	add.w	r1, r7, #12
 8002e58:	2200      	movs	r2, #0
 8002e5a:	9202      	str	r2, [sp, #8]
 8002e5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e60:	9201      	str	r2, [sp, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	9200      	str	r2, [sp, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	460a      	mov	r2, r1
 8002e6a:	2141      	movs	r1, #65	@ 0x41
 8002e6c:	2005      	movs	r0, #5
 8002e6e:	f001 f850 	bl	8003f12 <ST7735_WriteString>

    // H2/512.0
    float h2 = s->scaled_h2_signal / 512.0f;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	89db      	ldrh	r3, [r3, #14]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e7e:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002f7c <OLEDdisplay+0x264>
 8002e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e86:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
    snprintf(buffer, sizeof(buffer), "H2:   %.2f", h2);
 8002e8a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002e8c:	f7fd fb7c 	bl	8000588 <__aeabi_f2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	f107 000c 	add.w	r0, r7, #12
 8002e98:	e9cd 2300 	strd	r2, r3, [sp]
 8002e9c:	4a39      	ldr	r2, [pc, #228]	@ (8002f84 <OLEDdisplay+0x26c>)
 8002e9e:	2164      	movs	r1, #100	@ 0x64
 8002ea0:	f00a fb3c 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  80, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002ea4:	4b31      	ldr	r3, [pc, #196]	@ (8002f6c <OLEDdisplay+0x254>)
 8002ea6:	f107 010c 	add.w	r1, r7, #12
 8002eaa:	2200      	movs	r2, #0
 8002eac:	9202      	str	r2, [sp, #8]
 8002eae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eb2:	9201      	str	r2, [sp, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	9200      	str	r2, [sp, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	460a      	mov	r2, r1
 8002ebc:	2150      	movs	r1, #80	@ 0x50
 8002ebe:	2005      	movs	r0, #5
 8002ec0:	f001 f827 	bl	8003f12 <ST7735_WriteString>

    // INA219_Current
    snprintf(buffer, sizeof(buffer), "Current:  %4d mA", s->INA219_Current);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002eca:	f107 000c 	add.w	r0, r7, #12
 8002ece:	4a2e      	ldr	r2, [pc, #184]	@ (8002f88 <OLEDdisplay+0x270>)
 8002ed0:	2164      	movs	r1, #100	@ 0x64
 8002ed2:	f00a fb23 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  95, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002ed6:	4b25      	ldr	r3, [pc, #148]	@ (8002f6c <OLEDdisplay+0x254>)
 8002ed8:	f107 010c 	add.w	r1, r7, #12
 8002edc:	2200      	movs	r2, #0
 8002ede:	9202      	str	r2, [sp, #8]
 8002ee0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ee4:	9201      	str	r2, [sp, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	9200      	str	r2, [sp, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	460a      	mov	r2, r1
 8002eee:	215f      	movs	r1, #95	@ 0x5f
 8002ef0:	2005      	movs	r0, #5
 8002ef2:	f001 f80e 	bl	8003f12 <ST7735_WriteString>

    // INA219_Voltage
    snprintf(buffer, sizeof(buffer), "Voltage:  %4u mV", s->INA219_Voltage);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8a1b      	ldrh	r3, [r3, #16]
 8002efa:	f107 000c 	add.w	r0, r7, #12
 8002efe:	4a23      	ldr	r2, [pc, #140]	@ (8002f8c <OLEDdisplay+0x274>)
 8002f00:	2164      	movs	r1, #100	@ 0x64
 8002f02:	f00a fb0b 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  110, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f06:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <OLEDdisplay+0x254>)
 8002f08:	f107 010c 	add.w	r1, r7, #12
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	9202      	str	r2, [sp, #8]
 8002f10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f14:	9201      	str	r2, [sp, #4]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	9200      	str	r2, [sp, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	216e      	movs	r1, #110	@ 0x6e
 8002f20:	2005      	movs	r0, #5
 8002f22:	f000 fff6 	bl	8003f12 <ST7735_WriteString>

    // INA219_Power
    snprintf(buffer, sizeof(buffer), "Power:  %4u mW", s->INA219_Power);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8a9b      	ldrh	r3, [r3, #20]
 8002f2a:	f107 000c 	add.w	r0, r7, #12
 8002f2e:	4a18      	ldr	r2, [pc, #96]	@ (8002f90 <OLEDdisplay+0x278>)
 8002f30:	2164      	movs	r1, #100	@ 0x64
 8002f32:	f00a faf3 	bl	800d51c <sniprintf>
    ST7735_WriteString(5,  125, buffer, Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <OLEDdisplay+0x254>)
 8002f38:	f107 010c 	add.w	r1, r7, #12
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	217d      	movs	r1, #125	@ 0x7d
 8002f50:	2005      	movs	r0, #5
 8002f52:	f000 ffde 	bl	8003f12 <ST7735_WriteString>

}
 8002f56:	bf00      	nop
 8002f58:	3780      	adds	r7, #128	@ 0x80
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	42c80000 	.word	0x42c80000
 8002f64:	51eb851f 	.word	0x51eb851f
 8002f68:	08010e30 	.word	0x08010e30
 8002f6c:	20000004 	.word	0x20000004
 8002f70:	08010e40 	.word	0x08010e40
 8002f74:	08010e50 	.word	0x08010e50
 8002f78:	08010e60 	.word	0x08010e60
 8002f7c:	44000000 	.word	0x44000000
 8002f80:	08010e70 	.word	0x08010e70
 8002f84:	08010e7c 	.word	0x08010e7c
 8002f88:	08010e88 	.word	0x08010e88
 8002f8c:	08010e9c 	.word	0x08010e9c
 8002f90:	08010eb0 	.word	0x08010eb0

08002f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f9a:	f001 fb50 	bl	800463e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f9e:	f000 f8d1 	bl	8003144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa2:	f7ff fbf1 	bl	8002788 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002fa6:	f7ff fd1b 	bl	80029e0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002faa:	f001 f9e7 	bl	800437c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002fae:	f001 fa75 	bl	800449c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8002fb2:	f000 fd9b 	bl	8003aec <MX_SPI1_Init>
  MX_FATFS_Init();
 8002fb6:	f005 ffeb 	bl	8008f90 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // OLED
  ST7735_Init();
 8002fba:	f000 ff19 	bl	8003df0 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f001 f866 	bl	8004090 <ST7735_FillScreen>

  // BMP
  BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	2101      	movs	r1, #1
 8002fca:	484b      	ldr	r0, [pc, #300]	@ (80030f8 <main+0x164>)
 8002fcc:	f7fe f956 	bl	800127c <BMP280_Init>
  // SGP
	if (sgp_probe() != STATUS_OK) {
 8002fd0:	f000 fcc2 	bl	8003958 <sgp_probe>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <main+0x4c>
		printf("SGP sensor error\r\n");
 8002fda:	4848      	ldr	r0, [pc, #288]	@ (80030fc <main+0x168>)
 8002fdc:	f00a fa96 	bl	800d50c <puts>
	}
	// INA
	INA219_t myina219;
	INA219_Init(&myina219, &hi2c1, INA219_ADDRESS);
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2240      	movs	r2, #64	@ 0x40
 8002fe4:	4946      	ldr	r1, [pc, #280]	@ (8003100 <main+0x16c>)
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe feb0 	bl	8001d4c <INA219_Init>
	//INA219_setCalibration_32V_2A(&myina219);

	// SD
	SDcardInit("test.txt");
 8002fec:	4845      	ldr	r0, [pc, #276]	@ (8003104 <main+0x170>)
 8002fee:	f7ff fd97 	bl	8002b20 <SDcardInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	// BMP
  	BMP280_ReadTemperatureAndPressure(&s.BMP280temperature, &s.BMP280pressure);
 8002ff2:	4945      	ldr	r1, [pc, #276]	@ (8003108 <main+0x174>)
 8002ff4:	4845      	ldr	r0, [pc, #276]	@ (800310c <main+0x178>)
 8002ff6:	f7fe fa9b 	bl	8001530 <BMP280_ReadTemperatureAndPressure>
  	printf("Temperature: %.2f °C, Pressure: %ld Pa\n\r", s.BMP280temperature, s.BMP280pressure);
 8002ffa:	4b44      	ldr	r3, [pc, #272]	@ (800310c <main+0x178>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fac2 	bl	8000588 <__aeabi_f2d>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4940      	ldr	r1, [pc, #256]	@ (800310c <main+0x178>)
 800300a:	6849      	ldr	r1, [r1, #4]
 800300c:	9100      	str	r1, [sp, #0]
 800300e:	4840      	ldr	r0, [pc, #256]	@ (8003110 <main+0x17c>)
 8003010:	f00a fa14 	bl	800d43c <iprintf>

  	// SGP
  	sgp_measure_iaq_blocking_read(&s.tvoc_ppb, &s.co2_eq_ppm);
 8003014:	493f      	ldr	r1, [pc, #252]	@ (8003114 <main+0x180>)
 8003016:	4840      	ldr	r0, [pc, #256]	@ (8003118 <main+0x184>)
 8003018:	f000 fc56 	bl	80038c8 <sgp_measure_iaq_blocking_read>
		sgp_measure_signals_blocking_read(&s.scaled_ethanol_signal, &s.scaled_h2_signal);
 800301c:	493f      	ldr	r1, [pc, #252]	@ (800311c <main+0x188>)
 800301e:	4840      	ldr	r0, [pc, #256]	@ (8003120 <main+0x18c>)
 8003020:	f000 fc70 	bl	8003904 <sgp_measure_signals_blocking_read>
		printf("TVOC           = %4u ppb\r\n", s.tvoc_ppb);
 8003024:	4b39      	ldr	r3, [pc, #228]	@ (800310c <main+0x178>)
 8003026:	891b      	ldrh	r3, [r3, #8]
 8003028:	4619      	mov	r1, r3
 800302a:	483e      	ldr	r0, [pc, #248]	@ (8003124 <main+0x190>)
 800302c:	f00a fa06 	bl	800d43c <iprintf>
		printf("CO2 Equivalent = %4u ppm\r\n", s.co2_eq_ppm);
 8003030:	4b36      	ldr	r3, [pc, #216]	@ (800310c <main+0x178>)
 8003032:	895b      	ldrh	r3, [r3, #10]
 8003034:	4619      	mov	r1, r3
 8003036:	483c      	ldr	r0, [pc, #240]	@ (8003128 <main+0x194>)
 8003038:	f00a fa00 	bl	800d43c <iprintf>
		printf("Etanol Signal  = %.2f\r\n", s.scaled_ethanol_signal / 512.0f);
 800303c:	4b33      	ldr	r3, [pc, #204]	@ (800310c <main+0x178>)
 800303e:	899b      	ldrh	r3, [r3, #12]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003048:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800312c <main+0x198>
 800304c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003050:	ee16 0a90 	vmov	r0, s13
 8003054:	f7fd fa98 	bl	8000588 <__aeabi_f2d>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4834      	ldr	r0, [pc, #208]	@ (8003130 <main+0x19c>)
 800305e:	f00a f9ed 	bl	800d43c <iprintf>
		printf("H2 Signal      = %.2f\r\n", s.scaled_h2_signal / 512.0f);
 8003062:	4b2a      	ldr	r3, [pc, #168]	@ (800310c <main+0x178>)
 8003064:	89db      	ldrh	r3, [r3, #14]
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306e:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800312c <main+0x198>
 8003072:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003076:	ee16 0a90 	vmov	r0, s13
 800307a:	f7fd fa85 	bl	8000588 <__aeabi_f2d>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	482c      	ldr	r0, [pc, #176]	@ (8003134 <main+0x1a0>)
 8003084:	f00a f9da 	bl	800d43c <iprintf>
		//sgp_set_absolute_humidity()

		// INA219
		s.INA219_Current = INA219_ReadCurrent_raw(&myina219);
 8003088:	463b      	mov	r3, r7
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fd94 	bl	8001bb8 <INA219_ReadCurrent_raw>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <main+0x178>)
 8003096:	825a      	strh	r2, [r3, #18]
		s.INA219_Voltage = INA219_ReadBusVoltage(&myina219);
 8003098:	463b      	mov	r3, r7
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fd79 	bl	8001b92 <INA219_ReadBusVoltage>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <main+0x178>)
 80030a6:	821a      	strh	r2, [r3, #16]
		s.INA219_Power = INA219_ReadPower(&myina219);
 80030a8:	463b      	mov	r3, r7
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe fd94 	bl	8001bd8 <INA219_ReadPower>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b15      	ldr	r3, [pc, #84]	@ (800310c <main+0x178>)
 80030b6:	829a      	strh	r2, [r3, #20]
		printf("INA219 Voltage = %4u V\r\n", s.INA219_Voltage);
 80030b8:	4b14      	ldr	r3, [pc, #80]	@ (800310c <main+0x178>)
 80030ba:	8a1b      	ldrh	r3, [r3, #16]
 80030bc:	4619      	mov	r1, r3
 80030be:	481e      	ldr	r0, [pc, #120]	@ (8003138 <main+0x1a4>)
 80030c0:	f00a f9bc 	bl	800d43c <iprintf>
		printf("INA219 Current = %4d mA\r\n", s.INA219_Current);
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <main+0x178>)
 80030c6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80030ca:	4619      	mov	r1, r3
 80030cc:	481b      	ldr	r0, [pc, #108]	@ (800313c <main+0x1a8>)
 80030ce:	f00a f9b5 	bl	800d43c <iprintf>
		printf("INA219 Power   = %4u mW\r\n", s.INA219_Power);
 80030d2:	4b0e      	ldr	r3, [pc, #56]	@ (800310c <main+0x178>)
 80030d4:	8a9b      	ldrh	r3, [r3, #20]
 80030d6:	4619      	mov	r1, r3
 80030d8:	4819      	ldr	r0, [pc, #100]	@ (8003140 <main+0x1ac>)
 80030da:	f00a f9af 	bl	800d43c <iprintf>


  	// SD
  	SDcardWriteData(&s);
 80030de:	480b      	ldr	r0, [pc, #44]	@ (800310c <main+0x178>)
 80030e0:	f7ff fd90 	bl	8002c04 <SDcardWriteData>

  	// OLED
  	OLEDdisplay(&s);
 80030e4:	4809      	ldr	r0, [pc, #36]	@ (800310c <main+0x178>)
 80030e6:	f7ff fe17 	bl	8002d18 <OLEDdisplay>

  	HAL_Delay(1000);
 80030ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030ee:	f001 fb03 	bl	80046f8 <HAL_Delay>
  	BMP280_ReadTemperatureAndPressure(&s.BMP280temperature, &s.BMP280pressure);
 80030f2:	bf00      	nop
 80030f4:	e77d      	b.n	8002ff2 <main+0x5e>
 80030f6:	bf00      	nop
 80030f8:	20002988 	.word	0x20002988
 80030fc:	08010ec0 	.word	0x08010ec0
 8003100:	2000028c 	.word	0x2000028c
 8003104:	08010ce4 	.word	0x08010ce4
 8003108:	200002e4 	.word	0x200002e4
 800310c:	200002e0 	.word	0x200002e0
 8003110:	08010ed4 	.word	0x08010ed4
 8003114:	200002ea 	.word	0x200002ea
 8003118:	200002e8 	.word	0x200002e8
 800311c:	200002ee 	.word	0x200002ee
 8003120:	200002ec 	.word	0x200002ec
 8003124:	08010f00 	.word	0x08010f00
 8003128:	08010f1c 	.word	0x08010f1c
 800312c:	44000000 	.word	0x44000000
 8003130:	08010f38 	.word	0x08010f38
 8003134:	08010f50 	.word	0x08010f50
 8003138:	08010f68 	.word	0x08010f68
 800313c:	08010f84 	.word	0x08010f84
 8003140:	08010fa0 	.word	0x08010fa0

08003144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b094      	sub	sp, #80	@ 0x50
 8003148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800314a:	f107 0320 	add.w	r3, r7, #32
 800314e:	2230      	movs	r2, #48	@ 0x30
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f00a fb0e 	bl	800d774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003168:	f003 f87a 	bl	8006260 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800316c:	4b27      	ldr	r3, [pc, #156]	@ (800320c <SystemClock_Config+0xc8>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	4a26      	ldr	r2, [pc, #152]	@ (800320c <SystemClock_Config+0xc8>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003176:	6413      	str	r3, [r2, #64]	@ 0x40
 8003178:	4b24      	ldr	r3, [pc, #144]	@ (800320c <SystemClock_Config+0xc8>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003184:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <SystemClock_Config+0xcc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800318c:	4a20      	ldr	r2, [pc, #128]	@ (8003210 <SystemClock_Config+0xcc>)
 800318e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <SystemClock_Config+0xcc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031aa:	2302      	movs	r3, #2
 80031ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80031b4:	2304      	movs	r3, #4
 80031b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80031b8:	2348      	movs	r3, #72	@ 0x48
 80031ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031bc:	2302      	movs	r3, #2
 80031be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80031c0:	2303      	movs	r3, #3
 80031c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c4:	f107 0320 	add.w	r3, r7, #32
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 f859 	bl	8006280 <HAL_RCC_OscConfig>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031d4:	f000 f81e 	bl	8003214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d8:	230f      	movs	r3, #15
 80031da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031dc:	2302      	movs	r3, #2
 80031de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	2102      	movs	r1, #2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 fae7 	bl	80067c8 <HAL_RCC_ClockConfig>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003200:	f000 f808 	bl	8003214 <Error_Handler>
  }
}
 8003204:	bf00      	nop
 8003206:	3750      	adds	r7, #80	@ 0x50
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000

08003214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003218:	b672      	cpsid	i
}
 800321a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <Error_Handler+0x8>

08003220 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 1000);
 8003228:	1d39      	adds	r1, r7, #4
 800322a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800322e:	2201      	movs	r2, #1
 8003230:	4803      	ldr	r0, [pc, #12]	@ (8003240 <__io_putchar+0x20>)
 8003232:	f004 ff05 	bl	8008040 <HAL_UART_Transmit>
	return ch;
 8003236:	687b      	ldr	r3, [r7, #4]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200029f4 	.word	0x200029f4

08003244 <sensirion_common_generate_crc>:
 */

#include "sensirion_common.h"

u8 sensirion_common_generate_crc(u8 *data, u16 count)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
    u16 current_byte;
    u8 crc = CRC8_INIT;
 8003250:	23ff      	movs	r3, #255	@ 0xff
 8003252:	737b      	strb	r3, [r7, #13]
    u8 crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003254:	2300      	movs	r3, #0
 8003256:	81fb      	strh	r3, [r7, #14]
 8003258:	e021      	b.n	800329e <sensirion_common_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 800325a:	89fb      	ldrh	r3, [r7, #14]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	7b7b      	ldrb	r3, [r7, #13]
 8003264:	4053      	eors	r3, r2
 8003266:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8003268:	2308      	movs	r3, #8
 800326a:	733b      	strb	r3, [r7, #12]
 800326c:	e011      	b.n	8003292 <sensirion_common_generate_crc+0x4e>
            if (crc & 0x80)
 800326e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003272:	2b00      	cmp	r3, #0
 8003274:	da07      	bge.n	8003286 <sensirion_common_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8003276:	7b7b      	ldrb	r3, [r7, #13]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	b25b      	sxtb	r3, r3
 800327c:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8003280:	b25b      	sxtb	r3, r3
 8003282:	737b      	strb	r3, [r7, #13]
 8003284:	e002      	b.n	800328c <sensirion_common_generate_crc+0x48>
            else
                crc = (crc << 1);
 8003286:	7b7b      	ldrb	r3, [r7, #13]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800328c:	7b3b      	ldrb	r3, [r7, #12]
 800328e:	3b01      	subs	r3, #1
 8003290:	733b      	strb	r3, [r7, #12]
 8003292:	7b3b      	ldrb	r3, [r7, #12]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <sensirion_common_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003298:	89fb      	ldrh	r3, [r7, #14]
 800329a:	3301      	adds	r3, #1
 800329c:	81fb      	strh	r3, [r7, #14]
 800329e:	89fa      	ldrh	r2, [r7, #14]
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3d9      	bcc.n	800325a <sensirion_common_generate_crc+0x16>
        }
    }
    return crc;
 80032a6:	7b7b      	ldrb	r3, [r7, #13]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <sensirion_common_check_crc>:

s8 sensirion_common_check_crc(u8 *data, u16 count, u8 checksum)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
    if (sensirion_common_generate_crc(data, count) != checksum)
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ffbb 	bl	8003244 <sensirion_common_generate_crc>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	787b      	ldrb	r3, [r7, #1]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d002      	beq.n	80032de <sensirion_common_check_crc+0x2a>
        return STATUS_FAIL;
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295
 80032dc:	e000      	b.n	80032e0 <sensirion_common_check_crc+0x2c>
    return STATUS_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <sensirion_i2c_init>:
/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init()
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
    // MX_I2C1_Init(); // already called from main
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <sensirion_i2c_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
 8003304:	4613      	mov	r3, r2
 8003306:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive(&hi2c1, address<<1, data, count, 100);
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	b29b      	uxth	r3, r3
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	b299      	uxth	r1, r3
 8003310:	88bb      	ldrh	r3, [r7, #4]
 8003312:	2264      	movs	r2, #100	@ 0x64
 8003314:	9200      	str	r2, [sp, #0]
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	4804      	ldr	r0, [pc, #16]	@ (800332c <sensirion_i2c_read+0x34>)
 800331a:	f001 fe71 	bl	8005000 <HAL_I2C_Master_Receive>
 800331e:	4603      	mov	r3, r0
 8003320:	b25b      	sxtb	r3, r3
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000028c 	.word	0x2000028c

08003330 <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, uint8_t* data, uint16_t count)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af02      	add	r7, sp, #8
 8003336:	4603      	mov	r3, r0
 8003338:	6039      	str	r1, [r7, #0]
 800333a:	71fb      	strb	r3, [r7, #7]
 800333c:	4613      	mov	r3, r2
 800333e:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, address<<1, data, count, 100);  // data is the start pointer of our array
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	b29b      	uxth	r3, r3
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	b299      	uxth	r1, r3
 8003348:	88bb      	ldrh	r3, [r7, #4]
 800334a:	2264      	movs	r2, #100	@ 0x64
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	4804      	ldr	r0, [pc, #16]	@ (8003364 <sensirion_i2c_write+0x34>)
 8003352:	f001 fd3d 	bl	8004dd0 <HAL_I2C_Master_Transmit>
 8003356:	4603      	mov	r3, r0
 8003358:	b25b      	sxtb	r3, r3
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2000028c 	.word	0x2000028c

08003368 <sensirion_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	if(useconds >= 1000)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003376:	d308      	bcc.n	800338a <sensirion_sleep_usec+0x22>
	{
		HAL_Delay(useconds / (uint32_t)1000);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <sensirion_sleep_usec+0x30>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f9b8 	bl	80046f8 <HAL_Delay>
	}
	else
	{
		HAL_Delay(1);
	}
}
 8003388:	e002      	b.n	8003390 <sensirion_sleep_usec+0x28>
		HAL_Delay(1);
 800338a:	2001      	movs	r0, #1
 800338c:	f001 f9b4 	bl	80046f8 <HAL_Delay>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	10624dd3 	.word	0x10624dd3

0800339c <sgp_i2c_read_words>:
 *              The buffer may also have been modified on STATUS_FAIL return.
 * @data_words: Number of data words to read (without CRC bytes)
 *
 * Return:      STATUS_OK on success, STATUS_FAIL otherwise
 */
static s16 sgp_i2c_read_words(u16 *data, u16 data_words) {
 800339c:	b580      	push	{r7, lr}
 800339e:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80033a8:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80033ac:	6018      	str	r0, [r3, #0]
 80033ae:	460a      	mov	r2, r1
 80033b0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80033b4:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 80033b8:	801a      	strh	r2, [r3, #0]
    s16 ret;
    u16 i, j;
    u16 size = data_words * (SGP_WORD_LEN + CRC8_LEN);
 80033ba:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80033be:	f2a3 4316 	subw	r3, r3, #1046	@ 0x416
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	0052      	lsls	r2, r2, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	f8a7 3412 	strh.w	r3, [r7, #1042]	@ 0x412
    u16 word_buf[SGP_MAX_PROFILE_RET_LEN / sizeof(u16)];
    u8 * const buf8 = (u8 *)word_buf;
 80033ce:	f107 0308 	add.w	r3, r7, #8
 80033d2:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

    ret = sensirion_i2c_read(SGP_I2C_ADDRESS, buf8, size);
 80033d6:	2358      	movs	r3, #88	@ 0x58
 80033d8:	4618      	mov	r0, r3
 80033da:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 80033de:	461a      	mov	r2, r3
 80033e0:	f8d7 140c 	ldr.w	r1, [r7, #1036]	@ 0x40c
 80033e4:	f7ff ff88 	bl	80032f8 <sensirion_i2c_read>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f8a7 340a 	strh.w	r3, [r7, #1034]	@ 0x40a

    if (ret != 0)
 80033ee:	f9b7 340a 	ldrsh.w	r3, [r7, #1034]	@ 0x40a
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <sgp_i2c_read_words+0x60>
        return STATUS_FAIL;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	e04e      	b.n	800349a <sgp_i2c_read_words+0xfe>

    /* check the CRC for each word */
    for (i = 0, j = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 8003402:	2300      	movs	r3, #0
 8003404:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 8003408:	e040      	b.n	800348c <sgp_i2c_read_words+0xf0>
         i < size;
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {

        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 800340a:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800340e:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8003412:	18d0      	adds	r0, r2, r3
                                       buf8[i + SGP_WORD_LEN]) == STATUS_FAIL) {
 8003414:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 8003418:	3302      	adds	r3, #2
 800341a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 800341e:	4413      	add	r3, r2
        if (sensirion_common_check_crc(&buf8[i], SGP_WORD_LEN,
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	2102      	movs	r1, #2
 8003426:	f7ff ff45 	bl	80032b4 <sensirion_common_check_crc>
 800342a:	4603      	mov	r3, r0
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d102      	bne.n	8003438 <sgp_i2c_read_words+0x9c>
            return STATUS_FAIL;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295
 8003436:	e030      	b.n	800349a <sgp_i2c_read_words+0xfe>
        }
        ((u8 *)data)[j]     = buf8[i];
 8003438:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800343c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8003440:	441a      	add	r2, r3
 8003442:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8003446:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 800344a:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 800344e:	6809      	ldr	r1, [r1, #0]
 8003450:	440b      	add	r3, r1
 8003452:	7812      	ldrb	r2, [r2, #0]
 8003454:	701a      	strb	r2, [r3, #0]
        ((u8 *)data)[j + 1] = buf8[i + 1];
 8003456:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800345a:	3301      	adds	r3, #1
 800345c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8003460:	441a      	add	r2, r3
 8003462:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8003466:	3301      	adds	r3, #1
 8003468:	f507 6183 	add.w	r1, r7, #1048	@ 0x418
 800346c:	f2a1 4114 	subw	r1, r1, #1044	@ 0x414
 8003470:	6809      	ldr	r1, [r1, #0]
 8003472:	440b      	add	r3, r1
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	701a      	strb	r2, [r3, #0]
         i += SGP_WORD_LEN + CRC8_LEN, j += SGP_WORD_LEN) {
 8003478:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	@ 0x416
 800347c:	3303      	adds	r3, #3
 800347e:	f8a7 3416 	strh.w	r3, [r7, #1046]	@ 0x416
 8003482:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8003486:	3302      	adds	r3, #2
 8003488:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
         i < size;
 800348c:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	@ 0x416
 8003490:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 8003494:	429a      	cmp	r2, r3
 8003496:	d3b8      	bcc.n	800340a <sgp_i2c_read_words+0x6e>
    }

    return STATUS_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <sgp_i2c_write>:
 * sgp_i2c_write() - writes to the SGP sensor
 * @command:     Command
 *
 * Return:      STATUS_OK on success.
 */
static s16 sgp_i2c_write(const sgp_command *command) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    s8 ret;

    ret = sensirion_i2c_write(SGP_I2C_ADDRESS, command->buf, SGP_COMMAND_LEN);
 80034ac:	2358      	movs	r3, #88	@ 0x58
 80034ae:	4618      	mov	r0, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f7ff ff3b 	bl	8003330 <sensirion_i2c_write>
 80034ba:	4603      	mov	r3, r0
 80034bc:	73fb      	strb	r3, [r7, #15]
    if (ret != 0)
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <sgp_i2c_write+0x28>
        return STATUS_FAIL;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ca:	e000      	b.n	80034ce <sgp_i2c_write+0x2a>

    return STATUS_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <unpack_signals>:

/**
 * unpack_signals() - unpack signals which are stored in client_data.word_buf
 * @profile:    The profile
 */
static void unpack_signals(const struct sgp_profile *profile) {
 80034d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034dc:	b089      	sub	sp, #36	@ 0x24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	466b      	mov	r3, sp
 80034e4:	461e      	mov	r6, r3
    s16 i, j;
    const struct sgp_signal *signal;
    u16 data_words = profile->number_of_signals;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	891b      	ldrh	r3, [r3, #8]
 80034ea:	837b      	strh	r3, [r7, #26]
    u16 word_buf[data_words];
 80034ec:	8b79      	ldrh	r1, [r7, #26]
 80034ee:	460b      	mov	r3, r1
 80034f0:	3b01      	subs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	b28b      	uxth	r3, r1
 80034f6:	2200      	movs	r2, #0
 80034f8:	4698      	mov	r8, r3
 80034fa:	4691      	mov	r9, r2
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003508:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800350c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003510:	b28b      	uxth	r3, r1
 8003512:	2200      	movs	r2, #0
 8003514:	461c      	mov	r4, r3
 8003516:	4615      	mov	r5, r2
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	012b      	lsls	r3, r5, #4
 8003522:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003526:	0122      	lsls	r2, r4, #4
 8003528:	460b      	mov	r3, r1
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	3307      	adds	r3, #7
 800352e:	08db      	lsrs	r3, r3, #3
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	ebad 0d03 	sub.w	sp, sp, r3
 8003536:	466b      	mov	r3, sp
 8003538:	3301      	adds	r3, #1
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	613b      	str	r3, [r7, #16]
    u16 value;

    /* copy buffer */
    for (i = 0; i < data_words; i++)
 8003540:	2300      	movs	r3, #0
 8003542:	83fb      	strh	r3, [r7, #30]
 8003544:	e011      	b.n	800356a <unpack_signals+0x92>
        word_buf[i] = client_data.word_buf[i];
 8003546:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800354a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800354e:	4936      	ldr	r1, [pc, #216]	@ (8003628 <unpack_signals+0x150>)
 8003550:	330c      	adds	r3, #12
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	440b      	add	r3, r1
 8003556:	8899      	ldrh	r1, [r3, #4]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < data_words; i++)
 800355e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003562:	b29b      	uxth	r3, r3
 8003564:	3301      	adds	r3, #1
 8003566:	b29b      	uxth	r3, r3
 8003568:	83fb      	strh	r3, [r7, #30]
 800356a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800356e:	8b7b      	ldrh	r3, [r7, #26]
 8003570:	429a      	cmp	r2, r3
 8003572:	dbe8      	blt.n	8003546 <unpack_signals+0x6e>

    /* signals are in reverse order in the data buffer */
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	891b      	ldrh	r3, [r3, #8]
 8003578:	3b01      	subs	r3, #1
 800357a:	b29b      	uxth	r3, r3
 800357c:	83fb      	strh	r3, [r7, #30]
 800357e:	2300      	movs	r3, #0
 8003580:	83bb      	strh	r3, [r7, #28]
 8003582:	e046      	b.n	8003612 <unpack_signals+0x13a>
        signal = profile->signals[profile->number_of_signals - i - 1];
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	891b      	ldrh	r3, [r3, #8]
 800358c:	4619      	mov	r1, r3
 800358e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003592:	1acb      	subs	r3, r1, r3
 8003594:	4619      	mov	r1, r3
 8003596:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800359a:	440b      	add	r3, r1
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]
        value = be16_to_cpu(word_buf[i]);
 80035a4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80035ae:	021b      	lsls	r3, r3, #8
 80035b0:	b21a      	sxth	r2, r3
 80035b2:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	b29b      	uxth	r3, r3
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	4313      	orrs	r3, r2
 80035c4:	b21b      	sxth	r3, r3
 80035c6:	817b      	strh	r3, [r7, #10]

        if (signal->conversion_function != NULL)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d010      	beq.n	80035f2 <unpack_signals+0x11a>
            client_data.word_buf[j] = signal->conversion_function(value);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80035d8:	897a      	ldrh	r2, [r7, #10]
 80035da:	4610      	mov	r0, r2
 80035dc:	4798      	blx	r3
 80035de:	4603      	mov	r3, r0
 80035e0:	4619      	mov	r1, r3
 80035e2:	4a11      	ldr	r2, [pc, #68]	@ (8003628 <unpack_signals+0x150>)
 80035e4:	f104 030c 	add.w	r3, r4, #12
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	460a      	mov	r2, r1
 80035ee:	809a      	strh	r2, [r3, #4]
 80035f0:	e007      	b.n	8003602 <unpack_signals+0x12a>
        else
            client_data.word_buf[j] = value;
 80035f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80035f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003628 <unpack_signals+0x150>)
 80035f8:	330c      	adds	r3, #12
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	897a      	ldrh	r2, [r7, #10]
 8003600:	809a      	strh	r2, [r3, #4]
    for (i = profile->number_of_signals - 1, j = 0; i >= 0; i -= 1, j += 1) {
 8003602:	8bfb      	ldrh	r3, [r7, #30]
 8003604:	3b01      	subs	r3, #1
 8003606:	b29b      	uxth	r3, r3
 8003608:	83fb      	strh	r3, [r7, #30]
 800360a:	8bbb      	ldrh	r3, [r7, #28]
 800360c:	3301      	adds	r3, #1
 800360e:	b29b      	uxth	r3, r3
 8003610:	83bb      	strh	r3, [r7, #28]
 8003612:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003616:	2b00      	cmp	r3, #0
 8003618:	dab4      	bge.n	8003584 <unpack_signals+0xac>
 800361a:	46b5      	mov	sp, r6
    }
}
 800361c:	bf00      	nop
 800361e:	3724      	adds	r7, #36	@ 0x24
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003626:	bf00      	nop
 8003628:	20002360 	.word	0x20002360

0800362c <read_measurement>:
/**
 * read_measurement() - reads the result of a profile measurement
 *
 * Return:  Length of the written data to the buffer. Negative if it fails.
 */
static s16 read_measurement(const struct sgp_profile *profile) {
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

    s16 ret;

    switch (client_data.current_state) {
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <read_measurement+0x4c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d116      	bne.n	800366a <read_measurement+0x3e>

        case MEASURING_PROFILE_STATE:
            ret = sgp_i2c_read_words(client_data.word_buf,
                                     profile->number_of_signals);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	891b      	ldrh	r3, [r3, #8]
            ret = sgp_i2c_read_words(client_data.word_buf,
 8003640:	4619      	mov	r1, r3
 8003642:	480e      	ldr	r0, [pc, #56]	@ (800367c <read_measurement+0x50>)
 8003644:	f7ff feaa 	bl	800339c <sgp_i2c_read_words>
 8003648:	4603      	mov	r3, r0
 800364a:	81fb      	strh	r3, [r7, #14]

            if (ret)
 800364c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <read_measurement+0x2e>
                /* Measurement in progress */
                return STATUS_FAIL;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	e009      	b.n	800366e <read_measurement+0x42>

            unpack_signals(profile);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff ff3c 	bl	80034d8 <unpack_signals>
            client_data.current_state = WAIT_STATE;
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <read_measurement+0x4c>)
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]

            return STATUS_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e001      	b.n	800366e <read_measurement+0x42>

        default:
            /* No command issued */
            return STATUS_FAIL;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20002360 	.word	0x20002360
 800367c:	2000237c 	.word	0x2000237c

08003680 <sgp_i2c_read_words_from_cmd>:
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_i2c_read_words_from_cmd(const sgp_command *cmd,
                                       u32 duration_us,
                                       u16 *data_words,
                                       u16 num_words) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	807b      	strh	r3, [r7, #2]

    if (sgp_i2c_write(cmd) == STATUS_FAIL)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff ff08 	bl	80034a4 <sgp_i2c_write>
 8003694:	4603      	mov	r3, r0
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d102      	bne.n	80036a2 <sgp_i2c_read_words_from_cmd+0x22>
        return STATUS_FAIL;
 800369c:	f04f 33ff 	mov.w	r3, #4294967295
 80036a0:	e008      	b.n	80036b4 <sgp_i2c_read_words_from_cmd+0x34>

    /* the chip needs some time to write the data into the RAM */
    sensirion_sleep_usec(duration_us);
 80036a2:	68b8      	ldr	r0, [r7, #8]
 80036a4:	f7ff fe60 	bl	8003368 <sensirion_sleep_usec>
    return sgp_i2c_read_words(data_words, num_words);
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	4619      	mov	r1, r3
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fe75 	bl	800339c <sgp_i2c_read_words>
 80036b2:	4603      	mov	r3, r0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <sgp_run_profile>:
 * sgp_run_profile() - run a profile and read write its return to client_data
 * @profile     A pointer to the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile(const struct sgp_profile *profile) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
    u32 duration_us = profile->duration_us + 5;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3305      	adds	r3, #5
 80036ca:	60fb      	str	r3, [r7, #12]

    if (sgp_i2c_write(&profile->command) == STATUS_FAIL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	330c      	adds	r3, #12
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fee7 	bl	80034a4 <sgp_i2c_write>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036dc:	d102      	bne.n	80036e4 <sgp_run_profile+0x28>
        return STATUS_FAIL;
 80036de:	f04f 33ff 	mov.w	r3, #4294967295
 80036e2:	e00f      	b.n	8003704 <sgp_run_profile+0x48>

    sensirion_sleep_usec(duration_us);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f7ff fe3f 	bl	8003368 <sensirion_sleep_usec>

    if (profile->number_of_signals > 0) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	891b      	ldrh	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <sgp_run_profile+0x46>
        client_data.current_state = MEASURING_PROFILE_STATE;
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <sgp_run_profile+0x50>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
        return read_measurement(profile);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff97 	bl	800362c <read_measurement>
 80036fe:	4603      	mov	r3, r0
 8003700:	e000      	b.n	8003704 <sgp_run_profile+0x48>
    }

    return STATUS_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20002360 	.word	0x20002360

08003710 <sgp_get_profile_by_number>:
 * sgp_get_profile_by_number() - get a profile by its identifier number
 * @number      The number that identifies the profile
 *
 * Return:      A pointer to the profile or NULL if the profile does not exists
 */
static const struct sgp_profile *sgp_get_profile_by_number(u16 number) {
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
    u8 i;
    const struct sgp_profile *profile = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e010      	b.n	8003746 <sgp_get_profile_by_number+0x36>
        profile = client_data.otp_features->profiles[i];
 8003724:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <sgp_get_profile_by_number+0x68>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60bb      	str	r3, [r7, #8]
        if (number == profile->number)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	7a9b      	ldrb	r3, [r3, #10]
 8003738:	461a      	mov	r2, r3
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	4293      	cmp	r3, r2
 800373e:	d00a      	beq.n	8003756 <sgp_get_profile_by_number+0x46>
    for (i = 0; i < client_data.otp_features->number_of_profiles; i++) {
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	3301      	adds	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	b29a      	uxth	r2, r3
 800374a:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <sgp_get_profile_by_number+0x68>)
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	889b      	ldrh	r3, [r3, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d3e7      	bcc.n	8003724 <sgp_get_profile_by_number+0x14>
 8003754:	e000      	b.n	8003758 <sgp_get_profile_by_number+0x48>
            break;
 8003756:	bf00      	nop
    }

    if (i == client_data.otp_features->number_of_profiles) {
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	b29a      	uxth	r2, r3
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <sgp_get_profile_by_number+0x68>)
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	889b      	ldrh	r3, [r3, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d101      	bne.n	800376a <sgp_get_profile_by_number+0x5a>
        return NULL;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <sgp_get_profile_by_number+0x5c>
    }

    return profile;
 800376a:	68bb      	ldr	r3, [r7, #8]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	20002360 	.word	0x20002360

0800377c <sgp_run_profile_by_number>:
 * sgp_run_profile_by_number() - run a profile by its identifier number
 * @number:     The number that identifies the profile
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
static s16 sgp_run_profile_by_number(u16 number) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	80fb      	strh	r3, [r7, #6]
    const struct sgp_profile *profile;

    profile = sgp_get_profile_by_number(number);
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ffc1 	bl	8003710 <sgp_get_profile_by_number>
 800378e:	60f8      	str	r0, [r7, #12]
    if (profile == NULL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <sgp_run_profile_by_number+0x20>
        return STATUS_FAIL;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	e00a      	b.n	80037b2 <sgp_run_profile_by_number+0x36>

    if (sgp_run_profile(profile) == STATUS_FAIL)
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff ff8d 	bl	80036bc <sgp_run_profile>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d102      	bne.n	80037b0 <sgp_run_profile_by_number+0x34>
        return STATUS_FAIL;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e000      	b.n	80037b2 <sgp_run_profile_by_number+0x36>

    return STATUS_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <sgp_detect_featureset_version>:
 *
 * @featureset:  Pointer to the featureset bits
 *
 * Return:    STATUS_OK on success
 */
static s16 sgp_detect_featureset_version(u16 *featureset) {
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
    s16 i, j;
    s16 ret = STATUS_FAIL;
 80037c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037c8:	827b      	strh	r3, [r7, #18]
    u16 feature_set_version = be16_to_cpu(*featureset);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	b21a      	sxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b21b      	sxth	r3, r3
 80037dc:	4313      	orrs	r3, r2
 80037de:	b21b      	sxth	r3, r3
 80037e0:	823b      	strh	r3, [r7, #16]
    const struct sgp_otp_featureset *sgp_featureset;

    client_data.info.feature_set_version = feature_set_version;
 80037e2:	4a36      	ldr	r2, [pc, #216]	@ (80038bc <sgp_detect_featureset_version+0x100>)
 80037e4:	8a3b      	ldrh	r3, [r7, #16]
 80037e6:	8213      	strh	r3, [r2, #16]
    client_data.otp_features = &sgp_features_unknown;
 80037e8:	4b34      	ldr	r3, [pc, #208]	@ (80038bc <sgp_detect_featureset_version+0x100>)
 80037ea:	4a35      	ldr	r2, [pc, #212]	@ (80038c0 <sgp_detect_featureset_version+0x104>)
 80037ec:	619a      	str	r2, [r3, #24]
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 80037ee:	2300      	movs	r3, #0
 80037f0:	82fb      	strh	r3, [r7, #22]
 80037f2:	e054      	b.n	800389e <sgp_detect_featureset_version+0xe2>
        sgp_featureset = sgp_supported_featuresets.featuresets[i];
 80037f4:	4b33      	ldr	r3, [pc, #204]	@ (80038c4 <sgp_detect_featureset_version+0x108>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8003804:	2300      	movs	r3, #0
 8003806:	82bb      	strh	r3, [r7, #20]
 8003808:	e03f      	b.n	800388a <sgp_detect_featureset_version+0xce>
            if (SGP_FS_COMPAT(feature_set_version,
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	4413      	add	r3, r2
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800381c:	2b00      	cmp	r3, #0
 800381e:	dd0f      	ble.n	8003840 <sgp_detect_featureset_version+0x84>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	8a3b      	ldrh	r3, [r7, #16]
 8003830:	4053      	eors	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	f24f 13e0 	movw	r3, #61920	@ 0xf1e0
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01a      	beq.n	8003876 <sgp_detect_featureset_version+0xba>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d115      	bne.n	8003882 <sgp_detect_featureset_version+0xc6>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	8a3b      	ldrh	r3, [r7, #16]
 8003866:	4053      	eors	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	f24f 13ff 	movw	r3, #61951	@ 0xf1ff
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <sgp_detect_featureset_version+0xc6>
                              sgp_featureset->supported_featureset_versions[j])) {
                client_data.otp_features = sgp_featureset;
 8003876:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <sgp_detect_featureset_version+0x100>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6193      	str	r3, [r2, #24]
                ret = STATUS_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	827b      	strh	r3, [r7, #18]
                break;
 8003880:	e009      	b.n	8003896 <sgp_detect_featureset_version+0xda>
        for (j = 0; j < sgp_featureset->number_of_supported_featureset_versions; ++j) {
 8003882:	8abb      	ldrh	r3, [r7, #20]
 8003884:	3301      	adds	r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	82bb      	strh	r3, [r7, #20]
 800388a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	8992      	ldrh	r2, [r2, #12]
 8003892:	4293      	cmp	r3, r2
 8003894:	dbb9      	blt.n	800380a <sgp_detect_featureset_version+0x4e>
    for (i = 0; i < sgp_supported_featuresets.number_of_supported_featuresets; ++i) {
 8003896:	8afb      	ldrh	r3, [r7, #22]
 8003898:	3301      	adds	r3, #1
 800389a:	b29b      	uxth	r3, r3
 800389c:	82fb      	strh	r3, [r7, #22]
 800389e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038a2:	4a08      	ldr	r2, [pc, #32]	@ (80038c4 <sgp_detect_featureset_version+0x108>)
 80038a4:	8892      	ldrh	r2, [r2, #4]
 80038a6:	4293      	cmp	r3, r2
 80038a8:	dba4      	blt.n	80037f4 <sgp_detect_featureset_version+0x38>
            }
        }
    }
    return ret;
 80038aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20002360 	.word	0x20002360
 80038c0:	08011778 	.word	0x08011778
 80038c4:	080119ac 	.word	0x080119ac

080038c8 <sgp_measure_iaq_blocking_read>:
 *
 * The profile is executed synchronously.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_iaq_blocking_read(u16 *tvoc_ppb, u16 *co2_eq_ppm) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    if (sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_MEASURE) == STATUS_FAIL)
 80038d2:	2001      	movs	r0, #1
 80038d4:	f7ff ff52 	bl	800377c <sgp_run_profile_by_number>
 80038d8:	4603      	mov	r3, r0
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d102      	bne.n	80038e6 <sgp_measure_iaq_blocking_read+0x1e>
        return STATUS_FAIL;
 80038e0:	f04f 33ff 	mov.w	r3, #4294967295
 80038e4:	e008      	b.n	80038f8 <sgp_measure_iaq_blocking_read+0x30>

    *tvoc_ppb = client_data.word_buf[0];
 80038e6:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <sgp_measure_iaq_blocking_read+0x38>)
 80038e8:	8b9a      	ldrh	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	801a      	strh	r2, [r3, #0]
    *co2_eq_ppm = client_data.word_buf[1];
 80038ee:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <sgp_measure_iaq_blocking_read+0x38>)
 80038f0:	8bda      	ldrh	r2, [r3, #30]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20002360 	.word	0x20002360

08003904 <sgp_measure_signals_blocking_read>:
 *                    value by 512 to get the real signal.
 *
 * Return:      STATUS_OK on success, else STATUS_FAIL
 */
s16 sgp_measure_signals_blocking_read(u16 *scaled_ethanol_signal,
                                      u16 *scaled_h2_signal) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

    if (sgp_run_profile_by_number(PROFILE_NUMBER_MEASURE_SIGNALS) == STATUS_FAIL)
 800390e:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <sgp_measure_signals_blocking_read+0x3c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff32 	bl	800377c <sgp_run_profile_by_number>
 8003918:	4603      	mov	r3, r0
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d102      	bne.n	8003926 <sgp_measure_signals_blocking_read+0x22>
        return STATUS_FAIL;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
 8003924:	e008      	b.n	8003938 <sgp_measure_signals_blocking_read+0x34>

    *scaled_ethanol_signal = client_data.word_buf[0];
 8003926:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <sgp_measure_signals_blocking_read+0x40>)
 8003928:	8b9a      	ldrh	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	801a      	strh	r2, [r3, #0]
    *scaled_h2_signal = client_data.word_buf[1];
 800392e:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <sgp_measure_signals_blocking_read+0x40>)
 8003930:	8bda      	ldrh	r2, [r3, #30]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	801a      	strh	r2, [r3, #0]

    return STATUS_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	08011788 	.word	0x08011788
 8003944:	20002360 	.word	0x20002360

08003948 <sgp_iaq_init>:
/**
 * sgp_iaq_init() - reset the SGP's internal IAQ baselines
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_iaq_init() {
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
    return sgp_run_profile_by_number(PROFILE_NUMBER_IAQ_INIT);
 800394c:	2000      	movs	r0, #0
 800394e:	f7ff ff15 	bl	800377c <sgp_run_profile_by_number>
 8003952:	4603      	mov	r3, r0
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}

08003958 <sgp_probe>:
 *
 * This call aleady initializes the IAQ baselines (sgp_iaq_init())
 *
 * Return:  STATUS_OK on success.
 */
s16 sgp_probe() {
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
    s16 err;
    const u64 *serial_buf = (const u64 *)client_data.word_buf;
 8003960:	4b5e      	ldr	r3, [pc, #376]	@ (8003adc <sgp_probe+0x184>)
 8003962:	607b      	str	r3, [r7, #4]

    client_data.current_state = WAIT_STATE;
 8003964:	4b5e      	ldr	r3, [pc, #376]	@ (8003ae0 <sgp_probe+0x188>)
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]

    /* Initialize I2C */
    sensirion_i2c_init();
 800396a:	f7ff fcbd 	bl	80032e8 <sensirion_i2c_init>

    /* try to read the serial ID */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_serial_id,
 800396e:	2302      	movs	r3, #2
 8003970:	4a5a      	ldr	r2, [pc, #360]	@ (8003adc <sgp_probe+0x184>)
 8003972:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003976:	485b      	ldr	r0, [pc, #364]	@ (8003ae4 <sgp_probe+0x18c>)
 8003978:	f7ff fe82 	bl	8003680 <sgp_i2c_read_words_from_cmd>
 800397c:	4603      	mov	r3, r0
 800397e:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_SERIAL_ID_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_SERIAL_ID_WORDS);
    if (err == STATUS_FAIL)
 8003980:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d102      	bne.n	8003990 <sgp_probe+0x38>
        return err;
 800398a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800398e:	e09f      	b.n	8003ad0 <sgp_probe+0x178>

    client_data.info.serial_id = be64_to_cpu(*serial_buf) >> 16;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	b293      	uxth	r3, r2
 8003998:	0219      	lsls	r1, r3, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	b293      	uxth	r3, r2
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	430b      	orrs	r3, r1
 80039a8:	041e      	lsls	r6, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	0c02      	lsrs	r2, r0, #16
 80039ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039be:	0c0b      	lsrs	r3, r1, #16
 80039c0:	b293      	uxth	r3, r2
 80039c2:	ea4f 2c03 	mov.w	ip, r3, lsl #8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	0c02      	lsrs	r2, r0, #16
 80039d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039da:	0c0b      	lsrs	r3, r1, #16
 80039dc:	b293      	uxth	r3, r2
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	ea4c 0303 	orr.w	r3, ip, r3
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	4333      	orrs	r3, r6
 80039ea:	2200      	movs	r2, #0
 80039ec:	469a      	mov	sl, r3
 80039ee:	4693      	mov	fp, r2
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	4653      	mov	r3, sl
 80039fa:	2200      	movs	r2, #0
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	4658      	mov	r0, fp
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	b281      	uxth	r1, r0
 8003a10:	020e      	lsls	r6, r1, #8
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003a18:	f04f 0000 	mov.w	r0, #0
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	4658      	mov	r0, fp
 8003a22:	2100      	movs	r1, #0
 8003a24:	b281      	uxth	r1, r0
 8003a26:	0a09      	lsrs	r1, r1, #8
 8003a28:	b289      	uxth	r1, r1
 8003a2a:	4331      	orrs	r1, r6
 8003a2c:	040e      	lsls	r6, r1, #16
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003a34:	f04f 0000 	mov.w	r0, #0
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8003a40:	2100      	movs	r1, #0
 8003a42:	b281      	uxth	r1, r0
 8003a44:	ea4f 2c01 	mov.w	ip, r1, lsl #8
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8003a4e:	f04f 0000 	mov.w	r0, #0
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	ea4f 401b 	mov.w	r0, fp, lsr #16
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	b281      	uxth	r1, r0
 8003a5e:	0a09      	lsrs	r1, r1, #8
 8003a60:	b289      	uxth	r1, r1
 8003a62:	ea4c 0101 	orr.w	r1, ip, r1
 8003a66:	b289      	uxth	r1, r1
 8003a68:	4331      	orrs	r1, r6
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	4688      	mov	r8, r1
 8003a6e:	4681      	mov	r9, r0
 8003a70:	ea42 0408 	orr.w	r4, r2, r8
 8003a74:	ea43 0509 	orr.w	r5, r3, r9
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	0c22      	lsrs	r2, r4, #16
 8003a82:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8003a86:	0c2b      	lsrs	r3, r5, #16
 8003a88:	4915      	ldr	r1, [pc, #84]	@ (8003ae0 <sgp_probe+0x188>)
 8003a8a:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* read the featureset version */
    err = sgp_i2c_read_words_from_cmd(&sgp_cmd_get_featureset,
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <sgp_probe+0x184>)
 8003a92:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003a96:	4814      	ldr	r0, [pc, #80]	@ (8003ae8 <sgp_probe+0x190>)
 8003a98:	f7ff fdf2 	bl	8003680 <sgp_i2c_read_words_from_cmd>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	807b      	strh	r3, [r7, #2]
                                      SGP_CMD_GET_FEATURESET_DURATION_US,
                                      client_data.word_buf,
                                      SGP_CMD_GET_FEATURESET_WORDS);
    if (err == STATUS_FAIL)
 8003aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d102      	bne.n	8003ab0 <sgp_probe+0x158>
        return STATUS_FAIL;
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	e00f      	b.n	8003ad0 <sgp_probe+0x178>

    err = sgp_detect_featureset_version(client_data.word_buf);
 8003ab0:	480a      	ldr	r0, [pc, #40]	@ (8003adc <sgp_probe+0x184>)
 8003ab2:	f7ff fe83 	bl	80037bc <sgp_detect_featureset_version>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	807b      	strh	r3, [r7, #2]
    if (err == STATUS_FAIL)
 8003aba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d102      	bne.n	8003aca <sgp_probe+0x172>
        return STATUS_FAIL;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac8:	e002      	b.n	8003ad0 <sgp_probe+0x178>

    return sgp_iaq_init();
 8003aca:	f7ff ff3d 	bl	8003948 <sgp_iaq_init>
 8003ace:	4603      	mov	r3, r0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	2000237c 	.word	0x2000237c
 8003ae0:	20002360 	.word	0x20002360
 8003ae4:	08011770 	.word	0x08011770
 8003ae8:	08011774 	.word	0x08011774

08003aec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003af0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003af2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b64 <MX_SPI1_Init+0x78>)
 8003af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003af8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003afe:	4b18      	ldr	r3, [pc, #96]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b04:	4b16      	ldr	r3, [pc, #88]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003b0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b0c:	4b14      	ldr	r3, [pc, #80]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b12:	4b13      	ldr	r3, [pc, #76]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b18:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003b20:	4b0f      	ldr	r3, [pc, #60]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b22:	2230      	movs	r2, #48	@ 0x30
 8003b24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003b38:	4b09      	ldr	r3, [pc, #36]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b3a:	2207      	movs	r2, #7
 8003b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b3e:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b46:	2208      	movs	r2, #8
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b4a:	4805      	ldr	r0, [pc, #20]	@ (8003b60 <MX_SPI1_Init+0x74>)
 8003b4c:	f003 fc52 	bl	80073f4 <HAL_SPI_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003b56:	f7ff fb5d 	bl	8003214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20002988 	.word	0x20002988
 8003b64:	40013000 	.word	0x40013000

08003b68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	@ 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a25      	ldr	r2, [pc, #148]	@ (8003c1c <HAL_SPI_MspInit+0xb4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d143      	bne.n	8003c12 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b8a:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	4a24      	ldr	r2, [pc, #144]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003b90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b96:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bae:	4b1c      	ldr	r3, [pc, #112]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bba:	4b19      	ldr	r3, [pc, #100]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bc6:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <HAL_SPI_MspInit+0xb8>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003bd2:	2360      	movs	r3, #96	@ 0x60
 8003bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bde:	2303      	movs	r3, #3
 8003be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003be2:	2305      	movs	r3, #5
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4619      	mov	r1, r3
 8003bec:	480d      	ldr	r0, [pc, #52]	@ (8003c24 <HAL_SPI_MspInit+0xbc>)
 8003bee:	f000 fe8d 	bl	800490c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c02:	2305      	movs	r3, #5
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4806      	ldr	r0, [pc, #24]	@ (8003c28 <HAL_SPI_MspInit+0xc0>)
 8003c0e:	f000 fe7d 	bl	800490c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c12:	bf00      	nop
 8003c14:	3728      	adds	r7, #40	@ 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40013000 	.word	0x40013000
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40020000 	.word	0x40020000
 8003c28:	40020400 	.word	0x40020400

08003c2c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c36:	4802      	ldr	r0, [pc, #8]	@ (8003c40 <ST7735_Select+0x14>)
 8003c38:	f001 f814 	bl	8004c64 <HAL_GPIO_WritePin>
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021400 	.word	0x40021400

08003c44 <ST7735_Unselect>:

void ST7735_Unselect() {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003c4e:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <ST7735_Unselect+0x14>)
 8003c50:	f001 f808 	bl	8004c64 <HAL_GPIO_WritePin>
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021400 	.word	0x40021400

08003c5c <ST7735_Reset>:

static void ST7735_Reset() {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c66:	4807      	ldr	r0, [pc, #28]	@ (8003c84 <ST7735_Reset+0x28>)
 8003c68:	f000 fffc 	bl	8004c64 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003c6c:	2005      	movs	r0, #5
 8003c6e:	f000 fd43 	bl	80046f8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8003c72:	2201      	movs	r2, #1
 8003c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003c78:	4802      	ldr	r0, [pc, #8]	@ (8003c84 <ST7735_Reset+0x28>)
 8003c7a:	f000 fff3 	bl	8004c64 <HAL_GPIO_WritePin>
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021400 	.word	0x40021400

08003c88 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003c92:	2200      	movs	r2, #0
 8003c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c98:	4806      	ldr	r0, [pc, #24]	@ (8003cb4 <ST7735_WriteCommand+0x2c>)
 8003c9a:	f000 ffe3 	bl	8004c64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003c9e:	1df9      	adds	r1, r7, #7
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	4804      	ldr	r0, [pc, #16]	@ (8003cb8 <ST7735_WriteCommand+0x30>)
 8003ca8:	f003 fc4f 	bl	800754a <HAL_SPI_Transmit>
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	20002988 	.word	0x20002988

08003cbc <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ccc:	4807      	ldr	r0, [pc, #28]	@ (8003cec <ST7735_WriteData+0x30>)
 8003cce:	f000 ffc9 	bl	8004c64 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4804      	ldr	r0, [pc, #16]	@ (8003cf0 <ST7735_WriteData+0x34>)
 8003cde:	f003 fc34 	bl	800754a <HAL_SPI_Transmit>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021400 	.word	0x40021400
 8003cf0:	20002988 	.word	0x20002988

08003cf4 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003d06:	e034      	b.n	8003d72 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003d12:	7afb      	ldrb	r3, [r7, #11]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ffb7 	bl	8003c88 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003d24:	7abb      	ldrb	r3, [r7, #10]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8003d2e:	7abb      	ldrb	r3, [r7, #10]
 8003d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d34:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003d36:	7abb      	ldrb	r3, [r7, #10]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003d3c:	7abb      	ldrb	r3, [r7, #10]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ffbb 	bl	8003cbc <ST7735_WriteData>
            addr += numArgs;
 8003d46:	7abb      	ldrb	r3, [r7, #10]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003d4e:	89bb      	ldrh	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8003d5e:	89bb      	ldrh	r3, [r7, #12]
 8003d60:	2bff      	cmp	r3, #255	@ 0xff
 8003d62:	d102      	bne.n	8003d6a <ST7735_ExecuteCommandList+0x76>
 8003d64:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003d68:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8003d6a:	89bb      	ldrh	r3, [r7, #12]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fcc3 	bl	80046f8 <HAL_Delay>
    while(numCommands--) {
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	1e5a      	subs	r2, r3, #1
 8003d76:	73fa      	strb	r2, [r7, #15]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1c5      	bne.n	8003d08 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003d86:	b590      	push	{r4, r7, lr}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	4608      	mov	r0, r1
 8003d90:	4611      	mov	r1, r2
 8003d92:	461a      	mov	r2, r3
 8003d94:	4623      	mov	r3, r4
 8003d96:	71fb      	strb	r3, [r7, #7]
 8003d98:	4603      	mov	r3, r0
 8003d9a:	71bb      	strb	r3, [r7, #6]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	717b      	strb	r3, [r7, #5]
 8003da0:	4613      	mov	r3, r2
 8003da2:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003da4:	202a      	movs	r0, #42	@ 0x2a
 8003da6:	f7ff ff6f 	bl	8003c88 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003daa:	2300      	movs	r3, #0
 8003dac:	733b      	strb	r3, [r7, #12]
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	737b      	strb	r3, [r7, #13]
 8003db2:	2300      	movs	r3, #0
 8003db4:	73bb      	strb	r3, [r7, #14]
 8003db6:	797b      	ldrb	r3, [r7, #5]
 8003db8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003dba:	f107 030c 	add.w	r3, r7, #12
 8003dbe:	2104      	movs	r1, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff7b 	bl	8003cbc <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003dc6:	202b      	movs	r0, #43	@ 0x2b
 8003dc8:	f7ff ff5e 	bl	8003c88 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8003dcc:	79bb      	ldrb	r3, [r7, #6]
 8003dce:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8003dd0:	793b      	ldrb	r3, [r7, #4]
 8003dd2:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	2104      	movs	r1, #4
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff6e 	bl	8003cbc <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003de0:	202c      	movs	r0, #44	@ 0x2c
 8003de2:	f7ff ff51 	bl	8003c88 <ST7735_WriteCommand>
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}
	...

08003df0 <ST7735_Init>:

void ST7735_Init() {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
    ST7735_Select();
 8003df4:	f7ff ff1a 	bl	8003c2c <ST7735_Select>
    ST7735_Reset();
 8003df8:	f7ff ff30 	bl	8003c5c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8003dfc:	4806      	ldr	r0, [pc, #24]	@ (8003e18 <ST7735_Init+0x28>)
 8003dfe:	f7ff ff79 	bl	8003cf4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8003e02:	4806      	ldr	r0, [pc, #24]	@ (8003e1c <ST7735_Init+0x2c>)
 8003e04:	f7ff ff76 	bl	8003cf4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8003e08:	4805      	ldr	r0, [pc, #20]	@ (8003e20 <ST7735_Init+0x30>)
 8003e0a:	f7ff ff73 	bl	8003cf4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8003e0e:	f7ff ff19 	bl	8003c44 <ST7735_Unselect>
}
 8003e12:	bf00      	nop
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	080119b4 	.word	0x080119b4
 8003e1c:	080119f0 	.word	0x080119f0
 8003e20:	08011a00 	.word	0x08011a00

08003e24 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003e24:	b082      	sub	sp, #8
 8003e26:	b590      	push	{r4, r7, lr}
 8003e28:	b089      	sub	sp, #36	@ 0x24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
 8003e32:	460b      	mov	r3, r1
 8003e34:	80bb      	strh	r3, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	b2d8      	uxtb	r0, r3
 8003e3e:	88bb      	ldrh	r3, [r7, #4]
 8003e40:	b2d9      	uxtb	r1, r3
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003e4a:	4413      	add	r3, r2
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b2dc      	uxtb	r4, r3
 8003e52:	88bb      	ldrh	r3, [r7, #4]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003e5a:	4413      	add	r3, r2
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	4622      	mov	r2, r4
 8003e64:	f7ff ff8f 	bl	8003d86 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	e043      	b.n	8003ef6 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8003e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	3b20      	subs	r3, #32
 8003e74:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	440b      	add	r3, r1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
 8003e8e:	e029      	b.n	8003ee4 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8003ea0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003ea2:	0a1b      	lsrs	r3, r3, #8
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	743b      	strb	r3, [r7, #16]
 8003eaa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8003eb0:	f107 0310 	add.w	r3, r7, #16
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff00 	bl	8003cbc <ST7735_WriteData>
 8003ebc:	e00f      	b.n	8003ede <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003ebe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ec2:	0a1b      	lsrs	r3, r3, #8
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	733b      	strb	r3, [r7, #12]
 8003eca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff feef 	bl	8003cbc <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	61bb      	str	r3, [r7, #24]
 8003ee4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003ee8:	461a      	mov	r2, r3
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d3cf      	bcc.n	8003e90 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003efa:	461a      	mov	r2, r3
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d3b5      	bcc.n	8003e6e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	3724      	adds	r7, #36	@ 0x24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003f0e:	b002      	add	sp, #8
 8003f10:	4770      	bx	lr

08003f12 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003f12:	b082      	sub	sp, #8
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af04      	add	r7, sp, #16
 8003f1a:	603a      	str	r2, [r7, #0]
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
 8003f22:	460b      	mov	r3, r1
 8003f24:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8003f26:	f7ff fe81 	bl	8003c2c <ST7735_Select>

    while(*str) {
 8003f2a:	e02d      	b.n	8003f88 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	7d3a      	ldrb	r2, [r7, #20]
 8003f30:	4413      	add	r3, r2
 8003f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f34:	dd13      	ble.n	8003f5e <ST7735_WriteString+0x4c>
            x = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8003f3a:	7d7b      	ldrb	r3, [r7, #21]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	88bb      	ldrh	r3, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8003f44:	88bb      	ldrh	r3, [r7, #4]
 8003f46:	7d7a      	ldrb	r2, [r7, #21]
 8003f48:	4413      	add	r3, r2
 8003f4a:	2b9f      	cmp	r3, #159	@ 0x9f
 8003f4c:	dc21      	bgt.n	8003f92 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d103      	bne.n	8003f5e <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	603b      	str	r3, [r7, #0]
                continue;
 8003f5c:	e014      	b.n	8003f88 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	88b9      	ldrh	r1, [r7, #4]
 8003f64:	88f8      	ldrh	r0, [r7, #6]
 8003f66:	8c3b      	ldrh	r3, [r7, #32]
 8003f68:	9302      	str	r3, [sp, #8]
 8003f6a:	8bbb      	ldrh	r3, [r7, #28]
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f7ff ff56 	bl	8003e24 <ST7735_WriteChar>
        x += font.width;
 8003f78:	7d3b      	ldrb	r3, [r7, #20]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	4413      	add	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
        str++;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	603b      	str	r3, [r7, #0]
    while(*str) {
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1cd      	bne.n	8003f2c <ST7735_WriteString+0x1a>
 8003f90:	e000      	b.n	8003f94 <ST7735_WriteString+0x82>
                break;
 8003f92:	bf00      	nop
    }

    ST7735_Unselect();
 8003f94:	f7ff fe56 	bl	8003c44 <ST7735_Unselect>
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fa2:	b002      	add	sp, #8
 8003fa4:	4770      	bx	lr
	...

08003fa8 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	80fb      	strh	r3, [r7, #6]
 8003fba:	4603      	mov	r3, r0
 8003fbc:	80bb      	strh	r3, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	807b      	strh	r3, [r7, #2]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fca:	d858      	bhi.n	800407e <ST7735_FillRectangle+0xd6>
 8003fcc:	88bb      	ldrh	r3, [r7, #4]
 8003fce:	2b9f      	cmp	r3, #159	@ 0x9f
 8003fd0:	d855      	bhi.n	800407e <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	2b80      	cmp	r3, #128	@ 0x80
 8003fda:	dd03      	ble.n	8003fe4 <ST7735_FillRectangle+0x3c>
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003fe2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8003fe4:	88ba      	ldrh	r2, [r7, #4]
 8003fe6:	883b      	ldrh	r3, [r7, #0]
 8003fe8:	4413      	add	r3, r2
 8003fea:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fec:	dd03      	ble.n	8003ff6 <ST7735_FillRectangle+0x4e>
 8003fee:	88bb      	ldrh	r3, [r7, #4]
 8003ff0:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8003ff4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8003ff6:	f7ff fe19 	bl	8003c2c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	b2d8      	uxtb	r0, r3
 8003ffe:	88bb      	ldrh	r3, [r7, #4]
 8004000:	b2d9      	uxtb	r1, r3
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	4413      	add	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b2dc      	uxtb	r4, r3
 8004012:	88bb      	ldrh	r3, [r7, #4]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	883b      	ldrh	r3, [r7, #0]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	4413      	add	r3, r2
 800401c:	b2db      	uxtb	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4622      	mov	r2, r4
 8004024:	f7ff feaf 	bl	8003d86 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8004028:	8c3b      	ldrh	r3, [r7, #32]
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	b29b      	uxth	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	733b      	strb	r3, [r7, #12]
 8004032:	8c3b      	ldrh	r3, [r7, #32]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8004038:	2201      	movs	r2, #1
 800403a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800403e:	4812      	ldr	r0, [pc, #72]	@ (8004088 <ST7735_FillRectangle+0xe0>)
 8004040:	f000 fe10 	bl	8004c64 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8004044:	883b      	ldrh	r3, [r7, #0]
 8004046:	80bb      	strh	r3, [r7, #4]
 8004048:	e013      	b.n	8004072 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	80fb      	strh	r3, [r7, #6]
 800404e:	e00a      	b.n	8004066 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8004050:	f107 010c 	add.w	r1, r7, #12
 8004054:	f04f 33ff 	mov.w	r3, #4294967295
 8004058:	2202      	movs	r2, #2
 800405a:	480c      	ldr	r0, [pc, #48]	@ (800408c <ST7735_FillRectangle+0xe4>)
 800405c:	f003 fa75 	bl	800754a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8004060:	88fb      	ldrh	r3, [r7, #6]
 8004062:	3b01      	subs	r3, #1
 8004064:	80fb      	strh	r3, [r7, #6]
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f1      	bne.n	8004050 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 800406c:	88bb      	ldrh	r3, [r7, #4]
 800406e:	3b01      	subs	r3, #1
 8004070:	80bb      	strh	r3, [r7, #4]
 8004072:	88bb      	ldrh	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e8      	bne.n	800404a <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8004078:	f7ff fde4 	bl	8003c44 <ST7735_Unselect>
 800407c:	e000      	b.n	8004080 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800407e:	bf00      	nop
}
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}
 8004086:	bf00      	nop
 8004088:	40021400 	.word	0x40021400
 800408c:	20002988 	.word	0x20002988

08004090 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af02      	add	r7, sp, #8
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	23a0      	movs	r3, #160	@ 0xa0
 80040a0:	2280      	movs	r2, #128	@ 0x80
 80040a2:	2100      	movs	r1, #0
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7ff ff7f 	bl	8003fa8 <ST7735_FillRectangle>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <HAL_MspInit+0x44>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	4a0e      	ldr	r2, [pc, #56]	@ (80040f8 <HAL_MspInit+0x44>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c6:	4b0c      	ldr	r3, [pc, #48]	@ (80040f8 <HAL_MspInit+0x44>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d2:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <HAL_MspInit+0x44>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	4a08      	ldr	r2, [pc, #32]	@ (80040f8 <HAL_MspInit+0x44>)
 80040d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_MspInit+0x44>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800

080040fc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004100:	4b0e      	ldr	r3, [pc, #56]	@ (800413c <SDTimer_Handler+0x40>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <SDTimer_Handler+0x1c>
    Timer1--;
 800410a:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <SDTimer_Handler+0x40>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b2da      	uxtb	r2, r3
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <SDTimer_Handler+0x40>)
 8004116:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8004118:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <SDTimer_Handler+0x44>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <SDTimer_Handler+0x34>
    Timer2--;
 8004122:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <SDTimer_Handler+0x44>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	4b04      	ldr	r3, [pc, #16]	@ (8004140 <SDTimer_Handler+0x44>)
 800412e:	701a      	strb	r2, [r3, #0]
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	200029ed 	.word	0x200029ed
 8004140:	200029ee 	.word	0x200029ee

08004144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004148:	bf00      	nop
 800414a:	e7fd      	b.n	8004148 <NMI_Handler+0x4>

0800414c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <HardFault_Handler+0x4>

08004154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004158:	bf00      	nop
 800415a:	e7fd      	b.n	8004158 <MemManage_Handler+0x4>

0800415c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <BusFault_Handler+0x4>

08004164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <UsageFault_Handler+0x4>

0800416c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 800419c:	4b0a      	ldr	r3, [pc, #40]	@ (80041c8 <SysTick_Handler+0x30>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <SysTick_Handler+0x30>)
 80041a8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80041aa:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <SysTick_Handler+0x30>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b09      	cmp	r3, #9
 80041b2:	d904      	bls.n	80041be <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 80041b4:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <SysTick_Handler+0x30>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 80041ba:	f7ff ff9f 	bl	80040fc <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041be:	f000 fa7b 	bl	80046b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	200029ec 	.word	0x200029ec

080041cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return 1;
 80041d0:	2301      	movs	r3, #1
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_kill>:

int _kill(int pid, int sig)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041e6:	f009 fb27 	bl	800d838 <__errno>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2216      	movs	r2, #22
 80041ee:	601a      	str	r2, [r3, #0]
  return -1;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <_exit>:

void _exit (int status)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ffe7 	bl	80041dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <_exit+0x12>

08004212 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e00a      	b.n	800423a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004224:	f3af 8000 	nop.w
 8004228:	4601      	mov	r1, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	60ba      	str	r2, [r7, #8]
 8004230:	b2ca      	uxtb	r2, r1
 8004232:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	429a      	cmp	r2, r3
 8004240:	dbf0      	blt.n	8004224 <_read+0x12>
  }

  return len;
 8004242:	687b      	ldr	r3, [r7, #4]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	e009      	b.n	8004272 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	60ba      	str	r2, [r7, #8]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe ffda 	bl	8003220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3301      	adds	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	429a      	cmp	r2, r3
 8004278:	dbf1      	blt.n	800425e <_write+0x12>
  }
  return len;
 800427a:	687b      	ldr	r3, [r7, #4]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <_close>:

int _close(int file)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042ac:	605a      	str	r2, [r3, #4]
  return 0;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_isatty>:

int _isatty(int file)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042c4:	2301      	movs	r3, #1
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042f4:	4a14      	ldr	r2, [pc, #80]	@ (8004348 <_sbrk+0x5c>)
 80042f6:	4b15      	ldr	r3, [pc, #84]	@ (800434c <_sbrk+0x60>)
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <_sbrk+0x64>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <_sbrk+0x64>)
 800430a:	4a12      	ldr	r2, [pc, #72]	@ (8004354 <_sbrk+0x68>)
 800430c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800430e:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <_sbrk+0x64>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	429a      	cmp	r2, r3
 800431a:	d207      	bcs.n	800432c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800431c:	f009 fa8c 	bl	800d838 <__errno>
 8004320:	4603      	mov	r3, r0
 8004322:	220c      	movs	r2, #12
 8004324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	e009      	b.n	8004340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800432c:	4b08      	ldr	r3, [pc, #32]	@ (8004350 <_sbrk+0x64>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004332:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <_sbrk+0x64>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	4a05      	ldr	r2, [pc, #20]	@ (8004350 <_sbrk+0x64>)
 800433c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800433e:	68fb      	ldr	r3, [r7, #12]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20050000 	.word	0x20050000
 800434c:	00000400 	.word	0x00000400
 8004350:	200029f0 	.word	0x200029f0
 8004354:	200032e8 	.word	0x200032e8

08004358 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800435c:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <SystemInit+0x20>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004362:	4a05      	ldr	r2, [pc, #20]	@ (8004378 <SystemInit+0x20>)
 8004364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800436c:	bf00      	nop
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004380:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 8004382:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <MX_USART3_UART_Init+0x5c>)
 8004384:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004386:	4b13      	ldr	r3, [pc, #76]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 8004388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800438c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800438e:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004394:	4b0f      	ldr	r3, [pc, #60]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800439a:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80043a0:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 80043a2:	220c      	movs	r2, #12
 80043a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80043ac:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043b2:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80043be:	4805      	ldr	r0, [pc, #20]	@ (80043d4 <MX_USART3_UART_Init+0x58>)
 80043c0:	f003 fdf0 	bl	8007fa4 <HAL_UART_Init>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80043ca:	f7fe ff23 	bl	8003214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200029f4 	.word	0x200029f4
 80043d8:	40004800 	.word	0x40004800

080043dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0aa      	sub	sp, #168	@ 0xa8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80043f4:	f107 0310 	add.w	r3, r7, #16
 80043f8:	2284      	movs	r2, #132	@ 0x84
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f009 f9b9 	bl	800d774 <memset>
  if(uartHandle->Instance==USART3)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a22      	ldr	r2, [pc, #136]	@ (8004490 <HAL_UART_MspInit+0xb4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d13c      	bne.n	8004486 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800440c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004410:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004412:	2300      	movs	r3, #0
 8004414:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004416:	f107 0310 	add.w	r3, r7, #16
 800441a:	4618      	mov	r0, r3
 800441c:	f002 fbfa 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004426:	f7fe fef5 	bl	8003214 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800442a:	4b1a      	ldr	r3, [pc, #104]	@ (8004494 <HAL_UART_MspInit+0xb8>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	4a19      	ldr	r2, [pc, #100]	@ (8004494 <HAL_UART_MspInit+0xb8>)
 8004430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004434:	6413      	str	r3, [r2, #64]	@ 0x40
 8004436:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <HAL_UART_MspInit+0xb8>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004442:	4b14      	ldr	r3, [pc, #80]	@ (8004494 <HAL_UART_MspInit+0xb8>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	4a13      	ldr	r2, [pc, #76]	@ (8004494 <HAL_UART_MspInit+0xb8>)
 8004448:	f043 0308 	orr.w	r3, r3, #8
 800444c:	6313      	str	r3, [r2, #48]	@ 0x30
 800444e:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <HAL_UART_MspInit+0xb8>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800445a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800445e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004462:	2302      	movs	r3, #2
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004468:	2301      	movs	r3, #1
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446e:	2303      	movs	r3, #3
 8004470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004474:	2307      	movs	r3, #7
 8004476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800447a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800447e:	4619      	mov	r1, r3
 8004480:	4805      	ldr	r0, [pc, #20]	@ (8004498 <HAL_UART_MspInit+0xbc>)
 8004482:	f000 fa43 	bl	800490c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004486:	bf00      	nop
 8004488:	37a8      	adds	r7, #168	@ 0xa8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40004800 	.word	0x40004800
 8004494:	40023800 	.word	0x40023800
 8004498:	40020c00 	.word	0x40020c00

0800449c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80044a0:	4b14      	ldr	r3, [pc, #80]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044a2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80044a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044aa:	2206      	movs	r2, #6
 80044ac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80044ae:	4b11      	ldr	r3, [pc, #68]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044b0:	2202      	movs	r2, #2
 80044b2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80044b4:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80044ba:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044bc:	2202      	movs	r2, #2
 80044be:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80044d2:	4b08      	ldr	r3, [pc, #32]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044da:	2200      	movs	r2, #0
 80044dc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80044de:	4805      	ldr	r0, [pc, #20]	@ (80044f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80044e0:	f001 fd83 	bl	8005fea <HAL_PCD_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80044ea:	f7fe fe93 	bl	8003214 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20002a7c 	.word	0x20002a7c

080044f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0ac      	sub	sp, #176	@ 0xb0
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004510:	f107 0318 	add.w	r3, r7, #24
 8004514:	2284      	movs	r2, #132	@ 0x84
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f009 f92b 	bl	800d774 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004526:	d159      	bne.n	80045dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004528:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800452c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004534:	f107 0318 	add.w	r3, r7, #24
 8004538:	4618      	mov	r0, r3
 800453a:	f002 fb6b 	bl	8006c14 <HAL_RCCEx_PeriphCLKConfig>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004544:	f7fe fe66 	bl	8003214 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004548:	4b26      	ldr	r3, [pc, #152]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	4a25      	ldr	r2, [pc, #148]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6313      	str	r3, [r2, #48]	@ 0x30
 8004554:	4b23      	ldr	r3, [pc, #140]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004560:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8004564:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004568:	2302      	movs	r3, #2
 800456a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	2300      	movs	r3, #0
 8004570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004574:	2303      	movs	r3, #3
 8004576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800457a:	230a      	movs	r3, #10
 800457c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004580:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004584:	4619      	mov	r1, r3
 8004586:	4818      	ldr	r0, [pc, #96]	@ (80045e8 <HAL_PCD_MspInit+0xf0>)
 8004588:	f000 f9c0 	bl	800490c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800458c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004594:	2300      	movs	r3, #0
 8004596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80045a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80045a4:	4619      	mov	r1, r3
 80045a6:	4810      	ldr	r0, [pc, #64]	@ (80045e8 <HAL_PCD_MspInit+0xf0>)
 80045a8:	f000 f9b0 	bl	800490c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80045ac:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 80045ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b0:	4a0c      	ldr	r2, [pc, #48]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 80045b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 80045ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 80045c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c8:	4a06      	ldr	r2, [pc, #24]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 80045ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80045d0:	4b04      	ldr	r3, [pc, #16]	@ (80045e4 <HAL_PCD_MspInit+0xec>)
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80045dc:	bf00      	nop
 80045de:	37b0      	adds	r7, #176	@ 0xb0
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40020000 	.word	0x40020000

080045ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004624 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045f0:	f7ff feb2 	bl	8004358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045f4:	480c      	ldr	r0, [pc, #48]	@ (8004628 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80045f6:	490d      	ldr	r1, [pc, #52]	@ (800462c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80045f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004630 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80045fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045fc:	e002      	b.n	8004604 <LoopCopyDataInit>

080045fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004602:	3304      	adds	r3, #4

08004604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004608:	d3f9      	bcc.n	80045fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800460a:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800460c:	4c0a      	ldr	r4, [pc, #40]	@ (8004638 <LoopFillZerobss+0x22>)
  movs r3, #0
 800460e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004610:	e001      	b.n	8004616 <LoopFillZerobss>

08004612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004614:	3204      	adds	r2, #4

08004616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004618:	d3fb      	bcc.n	8004612 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800461a:	f009 f913 	bl	800d844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800461e:	f7fe fcb9 	bl	8002f94 <main>
  bx  lr    
 8004622:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004624:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800462c:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8004630:	080122c0 	.word	0x080122c0
  ldr r2, =_sbss
 8004634:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004638:	200032e8 	.word	0x200032e8

0800463c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800463c:	e7fe      	b.n	800463c <ADC_IRQHandler>

0800463e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004642:	2003      	movs	r0, #3
 8004644:	f000 f92e 	bl	80048a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004648:	2000      	movs	r0, #0
 800464a:	f000 f805 	bl	8004658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800464e:	f7ff fd31 	bl	80040b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004660:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <HAL_InitTick+0x54>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <HAL_InitTick+0x58>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800466e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f93b 	bl	80048f2 <HAL_SYSTICK_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e00e      	b.n	80046a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d80a      	bhi.n	80046a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800468c:	2200      	movs	r2, #0
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	f000 f911 	bl	80048ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004698:	4a06      	ldr	r2, [pc, #24]	@ (80046b4 <HAL_InitTick+0x5c>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000058 	.word	0x20000058
 80046b0:	20000060 	.word	0x20000060
 80046b4:	2000005c 	.word	0x2000005c

080046b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_IncTick+0x20>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <HAL_IncTick+0x24>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4413      	add	r3, r2
 80046c8:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <HAL_IncTick+0x24>)
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000060 	.word	0x20000060
 80046dc:	20002f5c 	.word	0x20002f5c

080046e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return uwTick;
 80046e4:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_GetTick+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20002f5c 	.word	0x20002f5c

080046f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7ff ffee 	bl	80046e0 <HAL_GetTick>
 8004704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d005      	beq.n	800471e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <HAL_Delay+0x44>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800471e:	bf00      	nop
 8004720:	f7ff ffde 	bl	80046e0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d8f7      	bhi.n	8004720 <HAL_Delay+0x28>
  {
  }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	20000060 	.word	0x20000060

08004740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <__NVIC_SetPriorityGrouping+0x40>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800475c:	4013      	ands	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 800476a:	4313      	orrs	r3, r2
 800476c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800476e:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <__NVIC_SetPriorityGrouping+0x40>)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	60d3      	str	r3, [r2, #12]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	e000ed00 	.word	0xe000ed00
 8004784:	05fa0000 	.word	0x05fa0000

08004788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <__NVIC_GetPriorityGrouping+0x18>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	f003 0307 	and.w	r3, r3, #7
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db0a      	blt.n	80047ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	490c      	ldr	r1, [pc, #48]	@ (80047f0 <__NVIC_SetPriority+0x4c>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	440b      	add	r3, r1
 80047c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047cc:	e00a      	b.n	80047e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4908      	ldr	r1, [pc, #32]	@ (80047f4 <__NVIC_SetPriority+0x50>)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	3b04      	subs	r3, #4
 80047dc:	0112      	lsls	r2, r2, #4
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	440b      	add	r3, r1
 80047e2:	761a      	strb	r2, [r3, #24]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000e100 	.word	0xe000e100
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	@ 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f1c3 0307 	rsb	r3, r3, #7
 8004812:	2b04      	cmp	r3, #4
 8004814:	bf28      	it	cs
 8004816:	2304      	movcs	r3, #4
 8004818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3304      	adds	r3, #4
 800481e:	2b06      	cmp	r3, #6
 8004820:	d902      	bls.n	8004828 <NVIC_EncodePriority+0x30>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3b03      	subs	r3, #3
 8004826:	e000      	b.n	800482a <NVIC_EncodePriority+0x32>
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	f04f 32ff 	mov.w	r2, #4294967295
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	401a      	ands	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004840:	f04f 31ff 	mov.w	r1, #4294967295
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	43d9      	mvns	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	4313      	orrs	r3, r2
         );
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	@ 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
	...

08004860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3b01      	subs	r3, #1
 800486c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004870:	d301      	bcc.n	8004876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004872:	2301      	movs	r3, #1
 8004874:	e00f      	b.n	8004896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004876:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <SysTick_Config+0x40>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3b01      	subs	r3, #1
 800487c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800487e:	210f      	movs	r1, #15
 8004880:	f04f 30ff 	mov.w	r0, #4294967295
 8004884:	f7ff ff8e 	bl	80047a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <SysTick_Config+0x40>)
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800488e:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <SysTick_Config+0x40>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	e000e010 	.word	0xe000e010

080048a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff47 	bl	8004740 <__NVIC_SetPriorityGrouping>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
 80048c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048cc:	f7ff ff5c 	bl	8004788 <__NVIC_GetPriorityGrouping>
 80048d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	6978      	ldr	r0, [r7, #20]
 80048d8:	f7ff ff8e 	bl	80047f8 <NVIC_EncodePriority>
 80048dc:	4602      	mov	r2, r0
 80048de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ff5d 	bl	80047a4 <__NVIC_SetPriority>
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff ffb0 	bl	8004860 <SysTick_Config>
 8004900:	4603      	mov	r3, r0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800490c:	b480      	push	{r7}
 800490e:	b089      	sub	sp, #36	@ 0x24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e175      	b.n	8004c18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800492c:	2201      	movs	r2, #1
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4013      	ands	r3, r2
 800493e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	429a      	cmp	r2, r3
 8004946:	f040 8164 	bne.w	8004c12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d005      	beq.n	8004962 <HAL_GPIO_Init+0x56>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d130      	bne.n	80049c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	2203      	movs	r2, #3
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	fa02 f303 	lsl.w	r3, r2, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004998:	2201      	movs	r2, #1
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 0201 	and.w	r2, r3, #1
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	fa02 f303 	lsl.w	r3, r2, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d017      	beq.n	8004a00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	2203      	movs	r2, #3
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	fa02 f303 	lsl.w	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d123      	bne.n	8004a54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	08da      	lsrs	r2, r3, #3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3208      	adds	r2, #8
 8004a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	220f      	movs	r2, #15
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	08da      	lsrs	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	3208      	adds	r2, #8
 8004a4e:	69b9      	ldr	r1, [r7, #24]
 8004a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	2203      	movs	r2, #3
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0203 	and.w	r2, r3, #3
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 80be 	beq.w	8004c12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a96:	4b66      	ldr	r3, [pc, #408]	@ (8004c30 <HAL_GPIO_Init+0x324>)
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	4a65      	ldr	r2, [pc, #404]	@ (8004c30 <HAL_GPIO_Init+0x324>)
 8004a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aa2:	4b63      	ldr	r3, [pc, #396]	@ (8004c30 <HAL_GPIO_Init+0x324>)
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004aae:	4a61      	ldr	r2, [pc, #388]	@ (8004c34 <HAL_GPIO_Init+0x328>)
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	089b      	lsrs	r3, r3, #2
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	220f      	movs	r2, #15
 8004ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4013      	ands	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a58      	ldr	r2, [pc, #352]	@ (8004c38 <HAL_GPIO_Init+0x32c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d037      	beq.n	8004b4a <HAL_GPIO_Init+0x23e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a57      	ldr	r2, [pc, #348]	@ (8004c3c <HAL_GPIO_Init+0x330>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d031      	beq.n	8004b46 <HAL_GPIO_Init+0x23a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a56      	ldr	r2, [pc, #344]	@ (8004c40 <HAL_GPIO_Init+0x334>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d02b      	beq.n	8004b42 <HAL_GPIO_Init+0x236>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a55      	ldr	r2, [pc, #340]	@ (8004c44 <HAL_GPIO_Init+0x338>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d025      	beq.n	8004b3e <HAL_GPIO_Init+0x232>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a54      	ldr	r2, [pc, #336]	@ (8004c48 <HAL_GPIO_Init+0x33c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01f      	beq.n	8004b3a <HAL_GPIO_Init+0x22e>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a53      	ldr	r2, [pc, #332]	@ (8004c4c <HAL_GPIO_Init+0x340>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d019      	beq.n	8004b36 <HAL_GPIO_Init+0x22a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a52      	ldr	r2, [pc, #328]	@ (8004c50 <HAL_GPIO_Init+0x344>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <HAL_GPIO_Init+0x226>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a51      	ldr	r2, [pc, #324]	@ (8004c54 <HAL_GPIO_Init+0x348>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00d      	beq.n	8004b2e <HAL_GPIO_Init+0x222>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a50      	ldr	r2, [pc, #320]	@ (8004c58 <HAL_GPIO_Init+0x34c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d007      	beq.n	8004b2a <HAL_GPIO_Init+0x21e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a4f      	ldr	r2, [pc, #316]	@ (8004c5c <HAL_GPIO_Init+0x350>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_GPIO_Init+0x21a>
 8004b22:	2309      	movs	r3, #9
 8004b24:	e012      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b26:	230a      	movs	r3, #10
 8004b28:	e010      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	e00e      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b2e:	2307      	movs	r3, #7
 8004b30:	e00c      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b32:	2306      	movs	r3, #6
 8004b34:	e00a      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b36:	2305      	movs	r3, #5
 8004b38:	e008      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b3a:	2304      	movs	r3, #4
 8004b3c:	e006      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e004      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e002      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_GPIO_Init+0x240>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	f002 0203 	and.w	r2, r2, #3
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	4093      	lsls	r3, r2
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004b5c:	4935      	ldr	r1, [pc, #212]	@ (8004c34 <HAL_GPIO_Init+0x328>)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	3302      	adds	r3, #2
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b8e:	4a34      	ldr	r2, [pc, #208]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b94:	4b32      	ldr	r3, [pc, #200]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bb8:	4a29      	ldr	r2, [pc, #164]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bbe:	4b28      	ldr	r3, [pc, #160]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004be2:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c0c:	4a14      	ldr	r2, [pc, #80]	@ (8004c60 <HAL_GPIO_Init+0x354>)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	3301      	adds	r3, #1
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2b0f      	cmp	r3, #15
 8004c1c:	f67f ae86 	bls.w	800492c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	3724      	adds	r7, #36	@ 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	40013800 	.word	0x40013800
 8004c38:	40020000 	.word	0x40020000
 8004c3c:	40020400 	.word	0x40020400
 8004c40:	40020800 	.word	0x40020800
 8004c44:	40020c00 	.word	0x40020c00
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40021400 	.word	0x40021400
 8004c50:	40021800 	.word	0x40021800
 8004c54:	40021c00 	.word	0x40021c00
 8004c58:	40022000 	.word	0x40022000
 8004c5c:	40022400 	.word	0x40022400
 8004c60:	40013c00 	.word	0x40013c00

08004c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
 8004c70:	4613      	mov	r3, r2
 8004c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c74:	787b      	ldrb	r3, [r7, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7a:	887a      	ldrh	r2, [r7, #2]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c80:	e003      	b.n	8004c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e08b      	b.n	8004dc2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd fece 	bl	8002a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	@ 0x24
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ce8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689a      	ldr	r2, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	e006      	b.n	8004d20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d108      	bne.n	8004d3a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	e007      	b.n	8004d4a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <HAL_I2C_Init+0x134>)
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69d9      	ldr	r1, [r3, #28]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	02008000 	.word	0x02008000

08004dd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af02      	add	r7, sp, #8
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	460b      	mov	r3, r1
 8004dde:	817b      	strh	r3, [r7, #10]
 8004de0:	4613      	mov	r3, r2
 8004de2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	f040 80fd 	bne.w	8004fec <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_I2C_Master_Transmit+0x30>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e0f6      	b.n	8004fee <HAL_I2C_Master_Transmit+0x21e>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004e08:	f7ff fc6a 	bl	80046e0 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	2319      	movs	r3, #25
 8004e14:	2201      	movs	r2, #1
 8004e16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fdcc 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e0e1      	b.n	8004fee <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2221      	movs	r2, #33	@ 0x21
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2210      	movs	r2, #16
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	893a      	ldrh	r2, [r7, #8]
 8004e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2bff      	cmp	r3, #255	@ 0xff
 8004e5a:	d906      	bls.n	8004e6a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	22ff      	movs	r2, #255	@ 0xff
 8004e60:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004e62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e007      	b.n	8004e7a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004e74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e78:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d024      	beq.n	8004ecc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	781a      	ldrb	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	3301      	adds	r3, #1
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	4b4e      	ldr	r3, [pc, #312]	@ (8004ff8 <HAL_I2C_Master_Transmit+0x228>)
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 ffc7 	bl	8005e58 <I2C_TransferConfig>
 8004eca:	e066      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	8979      	ldrh	r1, [r7, #10]
 8004ed4:	4b48      	ldr	r3, [pc, #288]	@ (8004ff8 <HAL_I2C_Master_Transmit+0x228>)
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 ffbc 	bl	8005e58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004ee0:	e05b      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	6a39      	ldr	r1, [r7, #32]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fdbf 	bl	8005a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e07b      	b.n	8004fee <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d034      	beq.n	8004f9a <HAL_I2C_Master_Transmit+0x1ca>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d130      	bne.n	8004f9a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2180      	movs	r1, #128	@ 0x80
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fd38 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e04d      	b.n	8004fee <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2bff      	cmp	r3, #255	@ 0xff
 8004f5a:	d90e      	bls.n	8004f7a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	22ff      	movs	r2, #255	@ 0xff
 8004f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	8979      	ldrh	r1, [r7, #10]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 ff70 	bl	8005e58 <I2C_TransferConfig>
 8004f78:	e00f      	b.n	8004f9a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	8979      	ldrh	r1, [r7, #10]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 ff5f 	bl	8005e58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d19e      	bne.n	8004ee2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	6a39      	ldr	r1, [r7, #32]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fda5 	bl	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e01a      	b.n	8004fee <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b0c      	ldr	r3, [pc, #48]	@ (8004ffc <HAL_I2C_Master_Transmit+0x22c>)
 8004fcc:	400b      	ands	r3, r1
 8004fce:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e000      	b.n	8004fee <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	80002000 	.word	0x80002000
 8004ffc:	fe00e800 	.word	0xfe00e800

08005000 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	460b      	mov	r3, r1
 800500e:	817b      	strh	r3, [r7, #10]
 8005010:	4613      	mov	r3, r2
 8005012:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b20      	cmp	r3, #32
 800501e:	f040 80db 	bne.w	80051d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_I2C_Master_Receive+0x30>
 800502c:	2302      	movs	r3, #2
 800502e:	e0d4      	b.n	80051da <HAL_I2C_Master_Receive+0x1da>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005038:	f7ff fb52 	bl	80046e0 <HAL_GetTick>
 800503c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	2319      	movs	r3, #25
 8005044:	2201      	movs	r2, #1
 8005046:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fcb4 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0bf      	b.n	80051da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2222      	movs	r2, #34	@ 0x22
 800505e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2210      	movs	r2, #16
 8005066:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	893a      	ldrh	r2, [r7, #8]
 800507a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	2bff      	cmp	r3, #255	@ 0xff
 800508a:	d90e      	bls.n	80050aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2201      	movs	r2, #1
 8005090:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005096:	b2da      	uxtb	r2, r3
 8005098:	8979      	ldrh	r1, [r7, #10]
 800509a:	4b52      	ldr	r3, [pc, #328]	@ (80051e4 <HAL_I2C_Master_Receive+0x1e4>)
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fed8 	bl	8005e58 <I2C_TransferConfig>
 80050a8:	e06d      	b.n	8005186 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	8979      	ldrh	r1, [r7, #10]
 80050bc:	4b49      	ldr	r3, [pc, #292]	@ (80051e4 <HAL_I2C_Master_Receive+0x1e4>)
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fec7 	bl	8005e58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80050ca:	e05c      	b.n	8005186 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	6a39      	ldr	r1, [r7, #32]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fd55 	bl	8005b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e07c      	b.n	80051da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d034      	beq.n	8005186 <HAL_I2C_Master_Receive+0x186>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d130      	bne.n	8005186 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	2200      	movs	r2, #0
 800512c:	2180      	movs	r1, #128	@ 0x80
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fc42 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e04d      	b.n	80051da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	2bff      	cmp	r3, #255	@ 0xff
 8005146:	d90e      	bls.n	8005166 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	22ff      	movs	r2, #255	@ 0xff
 800514c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005152:	b2da      	uxtb	r2, r3
 8005154:	8979      	ldrh	r1, [r7, #10]
 8005156:	2300      	movs	r3, #0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fe7a 	bl	8005e58 <I2C_TransferConfig>
 8005164:	e00f      	b.n	8005186 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005174:	b2da      	uxtb	r2, r3
 8005176:	8979      	ldrh	r1, [r7, #10]
 8005178:	2300      	movs	r3, #0
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fe69 	bl	8005e58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d19d      	bne.n	80050cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	6a39      	ldr	r1, [r7, #32]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 fcaf 	bl	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e01a      	b.n	80051da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2220      	movs	r2, #32
 80051aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b0c      	ldr	r3, [pc, #48]	@ (80051e8 <HAL_I2C_Master_Receive+0x1e8>)
 80051b8:	400b      	ands	r3, r1
 80051ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e000      	b.n	80051da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	80002400 	.word	0x80002400
 80051e8:	fe00e800 	.word	0xfe00e800

080051ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	4608      	mov	r0, r1
 80051f6:	4611      	mov	r1, r2
 80051f8:	461a      	mov	r2, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	817b      	strh	r3, [r7, #10]
 80051fe:	460b      	mov	r3, r1
 8005200:	813b      	strh	r3, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	f040 80f9 	bne.w	8005406 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_I2C_Mem_Write+0x34>
 800521a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	d105      	bne.n	800522c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005226:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0ed      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_I2C_Mem_Write+0x4e>
 8005236:	2302      	movs	r3, #2
 8005238:	e0e6      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005242:	f7ff fa4d 	bl	80046e0 <HAL_GetTick>
 8005246:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2319      	movs	r3, #25
 800524e:	2201      	movs	r2, #1
 8005250:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fbaf 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0d1      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2221      	movs	r2, #33	@ 0x21
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2240      	movs	r2, #64	@ 0x40
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005284:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800528c:	88f8      	ldrh	r0, [r7, #6]
 800528e:	893a      	ldrh	r2, [r7, #8]
 8005290:	8979      	ldrh	r1, [r7, #10]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	4603      	mov	r3, r0
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fabf 	bl	8005820 <I2C_RequestMemoryWrite>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e0a9      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2bff      	cmp	r3, #255	@ 0xff
 80052bc:	d90e      	bls.n	80052dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	22ff      	movs	r2, #255	@ 0xff
 80052c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	8979      	ldrh	r1, [r7, #10]
 80052cc:	2300      	movs	r3, #0
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 fdbf 	bl	8005e58 <I2C_TransferConfig>
 80052da:	e00f      	b.n	80052fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	2300      	movs	r3, #0
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 fdae 	bl	8005e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 fbb2 	bl	8005a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e07b      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	781a      	ldrb	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d034      	beq.n	80053b4 <HAL_I2C_Mem_Write+0x1c8>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d130      	bne.n	80053b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005358:	2200      	movs	r2, #0
 800535a:	2180      	movs	r1, #128	@ 0x80
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fb2b 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e04d      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2bff      	cmp	r3, #255	@ 0xff
 8005374:	d90e      	bls.n	8005394 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	22ff      	movs	r2, #255	@ 0xff
 800537a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005380:	b2da      	uxtb	r2, r3
 8005382:	8979      	ldrh	r1, [r7, #10]
 8005384:	2300      	movs	r3, #0
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 fd63 	bl	8005e58 <I2C_TransferConfig>
 8005392:	e00f      	b.n	80053b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	8979      	ldrh	r1, [r7, #10]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fd52 	bl	8005e58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d19e      	bne.n	80052fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fb98 	bl	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e01a      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2220      	movs	r2, #32
 80053d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005410 <HAL_I2C_Mem_Write+0x224>)
 80053e6:	400b      	ands	r3, r1
 80053e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005402:	2300      	movs	r3, #0
 8005404:	e000      	b.n	8005408 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005406:	2302      	movs	r3, #2
  }
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	fe00e800 	.word	0xfe00e800

08005414 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4603      	mov	r3, r0
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	460b      	mov	r3, r1
 8005428:	813b      	strh	r3, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b20      	cmp	r3, #32
 8005438:	f040 80fd 	bne.w	8005636 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_I2C_Mem_Read+0x34>
 8005442:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d105      	bne.n	8005454 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800544e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0f1      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_I2C_Mem_Read+0x4e>
 800545e:	2302      	movs	r3, #2
 8005460:	e0ea      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800546a:	f7ff f939 	bl	80046e0 <HAL_GetTick>
 800546e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2319      	movs	r3, #25
 8005476:	2201      	movs	r2, #1
 8005478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa9b 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0d5      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2222      	movs	r2, #34	@ 0x22
 8005490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2240      	movs	r2, #64	@ 0x40
 8005498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a3a      	ldr	r2, [r7, #32]
 80054a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054b4:	88f8      	ldrh	r0, [r7, #6]
 80054b6:	893a      	ldrh	r2, [r7, #8]
 80054b8:	8979      	ldrh	r1, [r7, #10]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	9301      	str	r3, [sp, #4]
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4603      	mov	r3, r0
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f9ff 	bl	80058c8 <I2C_RequestMemoryRead>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e0ad      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2bff      	cmp	r3, #255	@ 0xff
 80054e4:	d90e      	bls.n	8005504 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	8979      	ldrh	r1, [r7, #10]
 80054f4:	4b52      	ldr	r3, [pc, #328]	@ (8005640 <HAL_I2C_Mem_Read+0x22c>)
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fcab 	bl	8005e58 <I2C_TransferConfig>
 8005502:	e00f      	b.n	8005524 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	b2da      	uxtb	r2, r3
 8005514:	8979      	ldrh	r1, [r7, #10]
 8005516:	4b4a      	ldr	r3, [pc, #296]	@ (8005640 <HAL_I2C_Mem_Read+0x22c>)
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f000 fc9a 	bl	8005e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	2200      	movs	r2, #0
 800552c:	2104      	movs	r1, #4
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fa42 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e07c      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d034      	beq.n	80055e4 <HAL_I2C_Mem_Read+0x1d0>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557e:	2b00      	cmp	r3, #0
 8005580:	d130      	bne.n	80055e4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005588:	2200      	movs	r2, #0
 800558a:	2180      	movs	r1, #128	@ 0x80
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 fa13 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e04d      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2bff      	cmp	r3, #255	@ 0xff
 80055a4:	d90e      	bls.n	80055c4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	8979      	ldrh	r1, [r7, #10]
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fc4b 	bl	8005e58 <I2C_TransferConfig>
 80055c2:	e00f      	b.n	80055e4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	8979      	ldrh	r1, [r7, #10]
 80055d6:	2300      	movs	r3, #0
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fc3a 	bl	8005e58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d19a      	bne.n	8005524 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fa80 	bl	8005af8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e01a      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2220      	movs	r2, #32
 8005608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <HAL_I2C_Mem_Read+0x230>)
 8005616:	400b      	ands	r3, r1
 8005618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	e000      	b.n	8005638 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005636:	2302      	movs	r3, #2
  }
}
 8005638:	4618      	mov	r0, r3
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	80002400 	.word	0x80002400
 8005644:	fe00e800 	.word	0xfe00e800

08005648 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	@ 0x28
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	460b      	mov	r3, r1
 8005656:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	f040 80d2 	bne.w	800580e <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005678:	d101      	bne.n	800567e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800567a:	2302      	movs	r3, #2
 800567c:	e0c8      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_I2C_IsDeviceReady+0x44>
 8005688:	2302      	movs	r3, #2
 800568a:	e0c1      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x1c8>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2224      	movs	r2, #36	@ 0x24
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d105      	bne.n	80056b6 <HAL_I2C_IsDeviceReady+0x6e>
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056b0:	4b59      	ldr	r3, [pc, #356]	@ (8005818 <HAL_I2C_IsDeviceReady+0x1d0>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	e004      	b.n	80056c0 <HAL_I2C_IsDeviceReady+0x78>
 80056b6:	897b      	ldrh	r3, [r7, #10]
 80056b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056bc:	4b57      	ldr	r3, [pc, #348]	@ (800581c <HAL_I2C_IsDeviceReady+0x1d4>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80056c6:	f7ff f80b 	bl	80046e0 <HAL_GetTick>
 80056ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	bf0c      	ite	eq
 80056da:	2301      	moveq	r3, #1
 80056dc:	2300      	movne	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80056f8:	e034      	b.n	8005764 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d01a      	beq.n	8005738 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fe ffed 	bl	80046e0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <HAL_I2C_IsDeviceReady+0xd0>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e06b      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b20      	cmp	r3, #32
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005764:	7ffb      	ldrb	r3, [r7, #31]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <HAL_I2C_IsDeviceReady+0x128>
 800576a:	7fbb      	ldrb	r3, [r7, #30]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0c4      	beq.n	80056fa <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f003 0310 	and.w	r3, r3, #16
 800577a:	2b10      	cmp	r3, #16
 800577c:	d01a      	beq.n	80057b4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2200      	movs	r2, #0
 8005786:	2120      	movs	r1, #32
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f915 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e03b      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2220      	movs	r2, #32
 800579e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e02d      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	2120      	movs	r1, #32
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f8fa 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e020      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2210      	movs	r2, #16
 80057d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2220      	movs	r2, #32
 80057dc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	3301      	adds	r3, #1
 80057e2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	f63f af5a 	bhi.w	80056a2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
  }
}
 8005810:	4618      	mov	r0, r3
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	02002000 	.word	0x02002000
 800581c:	02002800 	.word	0x02002800

08005820 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	4608      	mov	r0, r1
 800582a:	4611      	mov	r1, r2
 800582c:	461a      	mov	r2, r3
 800582e:	4603      	mov	r3, r0
 8005830:	817b      	strh	r3, [r7, #10]
 8005832:	460b      	mov	r3, r1
 8005834:	813b      	strh	r3, [r7, #8]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	8979      	ldrh	r1, [r7, #10]
 8005840:	4b20      	ldr	r3, [pc, #128]	@ (80058c4 <I2C_RequestMemoryWrite+0xa4>)
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fb05 	bl	8005e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f909 	bl	8005a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e02c      	b.n	80058bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d105      	bne.n	8005874 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005868:	893b      	ldrh	r3, [r7, #8]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	629a      	str	r2, [r3, #40]	@ 0x28
 8005872:	e015      	b.n	80058a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005874:	893b      	ldrh	r3, [r7, #8]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	b29b      	uxth	r3, r3
 800587a:	b2da      	uxtb	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	69b9      	ldr	r1, [r7, #24]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f8ef 	bl	8005a6a <I2C_WaitOnTXISFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e012      	b.n	80058bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005896:	893b      	ldrh	r3, [r7, #8]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	@ 0x80
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f884 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	80002000 	.word	0x80002000

080058c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	4608      	mov	r0, r1
 80058d2:	4611      	mov	r1, r2
 80058d4:	461a      	mov	r2, r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	817b      	strh	r3, [r7, #10]
 80058da:	460b      	mov	r3, r1
 80058dc:	813b      	strh	r3, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	8979      	ldrh	r1, [r7, #10]
 80058e8:	4b20      	ldr	r3, [pc, #128]	@ (800596c <I2C_RequestMemoryRead+0xa4>)
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	2300      	movs	r3, #0
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fab2 	bl	8005e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f8b6 	bl	8005a6a <I2C_WaitOnTXISFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e02c      	b.n	8005962 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800590e:	893b      	ldrh	r3, [r7, #8]
 8005910:	b2da      	uxtb	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	629a      	str	r2, [r3, #40]	@ 0x28
 8005918:	e015      	b.n	8005946 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800591a:	893b      	ldrh	r3, [r7, #8]
 800591c:	0a1b      	lsrs	r3, r3, #8
 800591e:	b29b      	uxth	r3, r3
 8005920:	b2da      	uxtb	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	69b9      	ldr	r1, [r7, #24]
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f89c 	bl	8005a6a <I2C_WaitOnTXISFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e012      	b.n	8005962 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800593c:	893b      	ldrh	r3, [r7, #8]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	2200      	movs	r2, #0
 800594e:	2140      	movs	r1, #64	@ 0x40
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f831 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	80002000 	.word	0x80002000

08005970 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b02      	cmp	r3, #2
 8005984:	d103      	bne.n	800598e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	d007      	beq.n	80059ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	699a      	ldr	r2, [r3, #24]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f042 0201 	orr.w	r2, r2, #1
 80059aa:	619a      	str	r2, [r3, #24]
  }
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c8:	e03b      	b.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f962 	bl	8005c98 <I2C_IsErrorOccurred>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e041      	b.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e4:	d02d      	beq.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e6:	f7fe fe7b 	bl	80046e0 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <I2C_WaitOnFlagUntilTimeout+0x44>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d122      	bne.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d113      	bne.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e00f      	b.n	8005a62 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	79fb      	ldrb	r3, [r7, #7]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d0b4      	beq.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a76:	e033      	b.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f90b 	bl	8005c98 <I2C_IsErrorOccurred>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e031      	b.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d025      	beq.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a94:	f7fe fe24 	bl	80046e0 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11a      	bne.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d013      	beq.n	8005ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e007      	b.n	8005af0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d1c4      	bne.n	8005a78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b04:	e02f      	b.n	8005b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f8c4 	bl	8005c98 <I2C_IsErrorOccurred>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e02d      	b.n	8005b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1a:	f7fe fde1 	bl	80046e0 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d302      	bcc.n	8005b30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d11a      	bne.n	8005b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d013      	beq.n	8005b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e007      	b.n	8005b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d1c8      	bne.n	8005b06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005b90:	e071      	b.n	8005c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f87e 	bl	8005c98 <I2C_IsErrorOccurred>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d13b      	bne.n	8005c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005bb4:	7dfb      	ldrb	r3, [r7, #23]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d138      	bne.n	8005c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d105      	bne.n	8005bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d121      	bne.n	8005c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2210      	movs	r2, #16
 8005be8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2204      	movs	r2, #4
 8005bee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b24      	ldr	r3, [pc, #144]	@ (8005c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005c04:	400b      	ands	r3, r1
 8005c06:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	75fb      	strb	r3, [r7, #23]
 8005c24:	e002      	b.n	8005c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005c2c:	f7fe fd58 	bl	80046e0 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d119      	bne.n	8005c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d116      	bne.n	8005c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d00f      	beq.n	8005c76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d002      	beq.n	8005c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d083      	beq.n	8005b92 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	fe00e800 	.word	0xfe00e800

08005c98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f003 0310 	and.w	r3, r3, #16
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d068      	beq.n	8005d96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2210      	movs	r2, #16
 8005cca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ccc:	e049      	b.n	8005d62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d045      	beq.n	8005d62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7fe fd03 	bl	80046e0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <I2C_IsErrorOccurred+0x54>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d13a      	bne.n	8005d62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d0e:	d121      	bne.n	8005d54 <I2C_IsErrorOccurred+0xbc>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d16:	d01d      	beq.n	8005d54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	d01a      	beq.n	8005d54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d2e:	f7fe fcd7 	bl	80046e0 <HAL_GetTick>
 8005d32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d34:	e00e      	b.n	8005d54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d36:	f7fe fcd3 	bl	80046e0 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b19      	cmp	r3, #25
 8005d42:	d907      	bls.n	8005d54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	f043 0320 	orr.w	r3, r3, #32
 8005d4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005d52:	e006      	b.n	8005d62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d1e9      	bne.n	8005d36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d003      	beq.n	8005d78 <I2C_IsErrorOccurred+0xe0>
 8005d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0aa      	beq.n	8005cce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d103      	bne.n	8005d88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2220      	movs	r2, #32
 8005d86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	f043 0301 	orr.w	r3, r3, #1
 8005dae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f043 0308 	orr.w	r3, r3, #8
 8005dd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f043 0302 	orr.w	r3, r3, #2
 8005df2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01c      	beq.n	8005e46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fdaf 	bl	8005970 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6859      	ldr	r1, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <I2C_IsErrorOccurred+0x1bc>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005e46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3728      	adds	r7, #40	@ 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	fe00e800 	.word	0xfe00e800

08005e58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	817b      	strh	r3, [r7, #10]
 8005e66:	4613      	mov	r3, r2
 8005e68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e70:	7a7b      	ldrb	r3, [r7, #9]
 8005e72:	041b      	lsls	r3, r3, #16
 8005e74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	0d5b      	lsrs	r3, r3, #21
 8005e92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e96:	4b08      	ldr	r3, [pc, #32]	@ (8005eb8 <I2C_TransferConfig+0x60>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	ea02 0103 	and.w	r1, r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	03ff63ff 	.word	0x03ff63ff

08005ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d138      	bne.n	8005f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e032      	b.n	8005f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	@ 0x24
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6819      	ldr	r1, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d139      	bne.n	8005fdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e033      	b.n	8005fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2224      	movs	r2, #36	@ 0x24
 8005f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0201 	bic.w	r2, r2, #1
 8005f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005fa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	021b      	lsls	r3, r3, #8
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b086      	sub	sp, #24
 8005fee:	af02      	add	r7, sp, #8
 8005ff0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e108      	b.n	800620e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fe fa6e 	bl	80044f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2203      	movs	r2, #3
 8006020:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602a:	d102      	bne.n	8006032 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f002 fd14 	bl	8008a64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	7c1a      	ldrb	r2, [r3, #16]
 8006044:	f88d 2000 	strb.w	r2, [sp]
 8006048:	3304      	adds	r3, #4
 800604a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800604c:	f002 fcb0 	bl	80089b0 <USB_CoreInit>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e0d5      	b.n	800620e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f002 fd0c 	bl	8008a86 <USB_SetCurrentMode>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e0c6      	b.n	800620e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006080:	2300      	movs	r3, #0
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	e04a      	b.n	800611c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	4413      	add	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	3315      	adds	r3, #21
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800609a:	7bfa      	ldrb	r2, [r7, #15]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	3314      	adds	r3, #20
 80060aa:	7bfa      	ldrb	r2, [r7, #15]
 80060ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060ae:	7bfa      	ldrb	r2, [r7, #15]
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	b298      	uxth	r0, r3
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	332e      	adds	r3, #46	@ 0x2e
 80060c2:	4602      	mov	r2, r0
 80060c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	440b      	add	r3, r1
 80060d4:	3318      	adds	r3, #24
 80060d6:	2200      	movs	r2, #0
 80060d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060da:	7bfa      	ldrb	r2, [r7, #15]
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	331c      	adds	r3, #28
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3320      	adds	r3, #32
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	3324      	adds	r3, #36	@ 0x24
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	3301      	adds	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	791b      	ldrb	r3, [r3, #4]
 8006120:	7bfa      	ldrb	r2, [r7, #15]
 8006122:	429a      	cmp	r2, r3
 8006124:	d3af      	bcc.n	8006086 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
 800612a:	e044      	b.n	80061b6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800612c:	7bfa      	ldrb	r2, [r7, #15]
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	4613      	mov	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800613e:	2200      	movs	r2, #0
 8006140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006142:	7bfa      	ldrb	r2, [r7, #15]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006158:	7bfa      	ldrb	r2, [r7, #15]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800616e:	7bfa      	ldrb	r2, [r7, #15]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006184:	7bfa      	ldrb	r2, [r7, #15]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	3301      	adds	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	791b      	ldrb	r3, [r3, #4]
 80061ba:	7bfa      	ldrb	r2, [r7, #15]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d3b5      	bcc.n	800612c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	7c1a      	ldrb	r2, [r3, #16]
 80061c8:	f88d 2000 	strb.w	r2, [sp]
 80061cc:	3304      	adds	r3, #4
 80061ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061d0:	f002 fca6 	bl	8008b20 <USB_DevInit>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2202      	movs	r2, #2
 80061de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e013      	b.n	800620e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	7b1b      	ldrb	r3, [r3, #12]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d102      	bne.n	8006202 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f80b 	bl	8006218 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4618      	mov	r0, r3
 8006208:	f002 fe61 	bl	8008ece <USB_DevDisconnect>

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006246:	4b05      	ldr	r3, [pc, #20]	@ (800625c <HAL_PCDEx_ActivateLPM+0x44>)
 8006248:	4313      	orrs	r3, r2
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	10000003 	.word	0x10000003

08006260 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006264:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a04      	ldr	r2, [pc, #16]	@ (800627c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800626a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800626e:	6013      	str	r3, [r2, #0]
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40007000 	.word	0x40007000

08006280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006288:	2300      	movs	r3, #0
 800628a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e291      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8087 	beq.w	80063b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062a4:	4b96      	ldr	r3, [pc, #600]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 030c 	and.w	r3, r3, #12
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d00c      	beq.n	80062ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b0:	4b93      	ldr	r3, [pc, #588]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 030c 	and.w	r3, r3, #12
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d112      	bne.n	80062e2 <HAL_RCC_OscConfig+0x62>
 80062bc:	4b90      	ldr	r3, [pc, #576]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062c8:	d10b      	bne.n	80062e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ca:	4b8d      	ldr	r3, [pc, #564]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d06c      	beq.n	80063b0 <HAL_RCC_OscConfig+0x130>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d168      	bne.n	80063b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e26b      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ea:	d106      	bne.n	80062fa <HAL_RCC_OscConfig+0x7a>
 80062ec:	4b84      	ldr	r3, [pc, #528]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a83      	ldr	r2, [pc, #524]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80062f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	e02e      	b.n	8006358 <HAL_RCC_OscConfig+0xd8>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10c      	bne.n	800631c <HAL_RCC_OscConfig+0x9c>
 8006302:	4b7f      	ldr	r3, [pc, #508]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7e      	ldr	r2, [pc, #504]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	4b7c      	ldr	r3, [pc, #496]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a7b      	ldr	r2, [pc, #492]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006314:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e01d      	b.n	8006358 <HAL_RCC_OscConfig+0xd8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006324:	d10c      	bne.n	8006340 <HAL_RCC_OscConfig+0xc0>
 8006326:	4b76      	ldr	r3, [pc, #472]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a75      	ldr	r2, [pc, #468]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800632c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	4b73      	ldr	r3, [pc, #460]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a72      	ldr	r2, [pc, #456]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e00b      	b.n	8006358 <HAL_RCC_OscConfig+0xd8>
 8006340:	4b6f      	ldr	r3, [pc, #444]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a6e      	ldr	r2, [pc, #440]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	4b6c      	ldr	r3, [pc, #432]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a6b      	ldr	r2, [pc, #428]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d013      	beq.n	8006388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7fe f9be 	bl	80046e0 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006368:	f7fe f9ba 	bl	80046e0 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	@ 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e21f      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800637a:	4b61      	ldr	r3, [pc, #388]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f0      	beq.n	8006368 <HAL_RCC_OscConfig+0xe8>
 8006386:	e014      	b.n	80063b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7fe f9aa 	bl	80046e0 <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006390:	f7fe f9a6 	bl	80046e0 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b64      	cmp	r3, #100	@ 0x64
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e20b      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063a2:	4b57      	ldr	r3, [pc, #348]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x110>
 80063ae:	e000      	b.n	80063b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d069      	beq.n	8006492 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063be:	4b50      	ldr	r3, [pc, #320]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 030c 	and.w	r3, r3, #12
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 030c 	and.w	r3, r3, #12
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d11c      	bne.n	8006410 <HAL_RCC_OscConfig+0x190>
 80063d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d116      	bne.n	8006410 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e2:	4b47      	ldr	r3, [pc, #284]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d005      	beq.n	80063fa <HAL_RCC_OscConfig+0x17a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d001      	beq.n	80063fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e1df      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fa:	4b41      	ldr	r3, [pc, #260]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	00db      	lsls	r3, r3, #3
 8006408:	493d      	ldr	r1, [pc, #244]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800640a:	4313      	orrs	r3, r2
 800640c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640e:	e040      	b.n	8006492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d023      	beq.n	8006460 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006418:	4b39      	ldr	r3, [pc, #228]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a38      	ldr	r2, [pc, #224]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fe f95c 	bl	80046e0 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800642c:	f7fe f958 	bl	80046e0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1bd      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800643e:	4b30      	ldr	r3, [pc, #192]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b2d      	ldr	r3, [pc, #180]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4929      	ldr	r1, [pc, #164]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]
 800645e:	e018      	b.n	8006492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006460:	4b27      	ldr	r3, [pc, #156]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a26      	ldr	r2, [pc, #152]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646c:	f7fe f938 	bl	80046e0 <HAL_GetTick>
 8006470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006472:	e008      	b.n	8006486 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006474:	f7fe f934 	bl	80046e0 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e199      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006486:	4b1e      	ldr	r3, [pc, #120]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f0      	bne.n	8006474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d038      	beq.n	8006510 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d019      	beq.n	80064da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064a6:	4b16      	ldr	r3, [pc, #88]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80064a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064aa:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b2:	f7fe f915 	bl	80046e0 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ba:	f7fe f911 	bl	80046e0 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e176      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80064ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0x23a>
 80064d8:	e01a      	b.n	8006510 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064da:	4b09      	ldr	r3, [pc, #36]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80064dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064de:	4a08      	ldr	r2, [pc, #32]	@ (8006500 <HAL_RCC_OscConfig+0x280>)
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e6:	f7fe f8fb 	bl	80046e0 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ec:	e00a      	b.n	8006504 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ee:	f7fe f8f7 	bl	80046e0 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d903      	bls.n	8006504 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e15c      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
 8006500:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006504:	4b91      	ldr	r3, [pc, #580]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ee      	bne.n	80064ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80a4 	beq.w	8006666 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800651e:	4b8b      	ldr	r3, [pc, #556]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10d      	bne.n	8006546 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800652a:	4b88      	ldr	r3, [pc, #544]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	4a87      	ldr	r2, [pc, #540]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006534:	6413      	str	r3, [r2, #64]	@ 0x40
 8006536:	4b85      	ldr	r3, [pc, #532]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800653e:	60bb      	str	r3, [r7, #8]
 8006540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006546:	4b82      	ldr	r3, [pc, #520]	@ (8006750 <HAL_RCC_OscConfig+0x4d0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d118      	bne.n	8006584 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006552:	4b7f      	ldr	r3, [pc, #508]	@ (8006750 <HAL_RCC_OscConfig+0x4d0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a7e      	ldr	r2, [pc, #504]	@ (8006750 <HAL_RCC_OscConfig+0x4d0>)
 8006558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800655c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800655e:	f7fe f8bf 	bl	80046e0 <HAL_GetTick>
 8006562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006566:	f7fe f8bb 	bl	80046e0 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b64      	cmp	r3, #100	@ 0x64
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e120      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006578:	4b75      	ldr	r3, [pc, #468]	@ (8006750 <HAL_RCC_OscConfig+0x4d0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d0f0      	beq.n	8006566 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d106      	bne.n	800659a <HAL_RCC_OscConfig+0x31a>
 800658c:	4b6f      	ldr	r3, [pc, #444]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800658e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006590:	4a6e      	ldr	r2, [pc, #440]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006592:	f043 0301 	orr.w	r3, r3, #1
 8006596:	6713      	str	r3, [r2, #112]	@ 0x70
 8006598:	e02d      	b.n	80065f6 <HAL_RCC_OscConfig+0x376>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10c      	bne.n	80065bc <HAL_RCC_OscConfig+0x33c>
 80065a2:	4b6a      	ldr	r3, [pc, #424]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a6:	4a69      	ldr	r2, [pc, #420]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065a8:	f023 0301 	bic.w	r3, r3, #1
 80065ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ae:	4b67      	ldr	r3, [pc, #412]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b2:	4a66      	ldr	r2, [pc, #408]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065b4:	f023 0304 	bic.w	r3, r3, #4
 80065b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ba:	e01c      	b.n	80065f6 <HAL_RCC_OscConfig+0x376>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b05      	cmp	r3, #5
 80065c2:	d10c      	bne.n	80065de <HAL_RCC_OscConfig+0x35e>
 80065c4:	4b61      	ldr	r3, [pc, #388]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c8:	4a60      	ldr	r2, [pc, #384]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065ca:	f043 0304 	orr.w	r3, r3, #4
 80065ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d0:	4b5e      	ldr	r3, [pc, #376]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d4:	4a5d      	ldr	r2, [pc, #372]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	@ 0x70
 80065dc:	e00b      	b.n	80065f6 <HAL_RCC_OscConfig+0x376>
 80065de:	4b5b      	ldr	r3, [pc, #364]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e2:	4a5a      	ldr	r2, [pc, #360]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065e4:	f023 0301 	bic.w	r3, r3, #1
 80065e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80065ea:	4b58      	ldr	r3, [pc, #352]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ee:	4a57      	ldr	r2, [pc, #348]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80065f0:	f023 0304 	bic.w	r3, r3, #4
 80065f4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d015      	beq.n	800662a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fe:	f7fe f86f 	bl	80046e0 <HAL_GetTick>
 8006602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006604:	e00a      	b.n	800661c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006606:	f7fe f86b 	bl	80046e0 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006614:	4293      	cmp	r3, r2
 8006616:	d901      	bls.n	800661c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e0ce      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800661c:	4b4b      	ldr	r3, [pc, #300]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006620:	f003 0302 	and.w	r3, r3, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0ee      	beq.n	8006606 <HAL_RCC_OscConfig+0x386>
 8006628:	e014      	b.n	8006654 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662a:	f7fe f859 	bl	80046e0 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006630:	e00a      	b.n	8006648 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006632:	f7fe f855 	bl	80046e0 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e0b8      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006648:	4b40      	ldr	r3, [pc, #256]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1ee      	bne.n	8006632 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d105      	bne.n	8006666 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800665a:	4b3c      	ldr	r3, [pc, #240]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	4a3b      	ldr	r2, [pc, #236]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006664:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80a4 	beq.w	80067b8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006670:	4b36      	ldr	r3, [pc, #216]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b08      	cmp	r3, #8
 800667a:	d06b      	beq.n	8006754 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d149      	bne.n	8006718 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006684:	4b31      	ldr	r3, [pc, #196]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a30      	ldr	r2, [pc, #192]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800668a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800668e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fe f826 	bl	80046e0 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006698:	f7fe f822 	bl	80046e0 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e087      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066aa:	4b28      	ldr	r3, [pc, #160]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	019b      	lsls	r3, r3, #6
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	3b01      	subs	r3, #1
 80066d0:	041b      	lsls	r3, r3, #16
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d8:	061b      	lsls	r3, r3, #24
 80066da:	4313      	orrs	r3, r2
 80066dc:	4a1b      	ldr	r2, [pc, #108]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80066de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066e2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066e4:	4b19      	ldr	r3, [pc, #100]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a18      	ldr	r2, [pc, #96]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 80066ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fd fff6 	bl	80046e0 <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f8:	f7fd fff2 	bl	80046e0 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e057      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800670a:	4b10      	ldr	r3, [pc, #64]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f0      	beq.n	80066f8 <HAL_RCC_OscConfig+0x478>
 8006716:	e04f      	b.n	80067b8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006718:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0b      	ldr	r2, [pc, #44]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 800671e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fd ffdc 	bl	80046e0 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fd ffd8 	bl	80046e0 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e03d      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673e:	4b03      	ldr	r3, [pc, #12]	@ (800674c <HAL_RCC_OscConfig+0x4cc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x4ac>
 800674a:	e035      	b.n	80067b8 <HAL_RCC_OscConfig+0x538>
 800674c:	40023800 	.word	0x40023800
 8006750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006754:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <HAL_RCC_OscConfig+0x544>)
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d028      	beq.n	80067b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800676c:	429a      	cmp	r2, r3
 800676e:	d121      	bne.n	80067b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677a:	429a      	cmp	r2, r3
 800677c:	d11a      	bne.n	80067b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006784:	4013      	ands	r3, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800678a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800678c:	4293      	cmp	r3, r2
 800678e:	d111      	bne.n	80067b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	3b01      	subs	r3, #1
 800679e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d107      	bne.n	80067b4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40023800 	.word	0x40023800

080067c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e0d0      	b.n	8006982 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067e0:	4b6a      	ldr	r3, [pc, #424]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d910      	bls.n	8006810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b67      	ldr	r3, [pc, #412]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f023 020f 	bic.w	r2, r3, #15
 80067f6:	4965      	ldr	r1, [pc, #404]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067fe:	4b63      	ldr	r3, [pc, #396]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	429a      	cmp	r2, r3
 800680a:	d001      	beq.n	8006810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0b8      	b.n	8006982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d020      	beq.n	800685e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006828:	4b59      	ldr	r3, [pc, #356]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4a58      	ldr	r2, [pc, #352]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800682e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006832:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006840:	4b53      	ldr	r3, [pc, #332]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	4a52      	ldr	r2, [pc, #328]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 8006846:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800684a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800684c:	4b50      	ldr	r3, [pc, #320]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	494d      	ldr	r1, [pc, #308]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800685a:	4313      	orrs	r3, r2
 800685c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d040      	beq.n	80068ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d107      	bne.n	8006882 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006872:	4b47      	ldr	r3, [pc, #284]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d115      	bne.n	80068aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e07f      	b.n	8006982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b02      	cmp	r3, #2
 8006888:	d107      	bne.n	800689a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800688a:	4b41      	ldr	r3, [pc, #260]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e073      	b.n	8006982 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689a:	4b3d      	ldr	r3, [pc, #244]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e06b      	b.n	8006982 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068aa:	4b39      	ldr	r3, [pc, #228]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f023 0203 	bic.w	r2, r3, #3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4936      	ldr	r1, [pc, #216]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068bc:	f7fd ff10 	bl	80046e0 <HAL_GetTick>
 80068c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c2:	e00a      	b.n	80068da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c4:	f7fd ff0c 	bl	80046e0 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e053      	b.n	8006982 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	4b2d      	ldr	r3, [pc, #180]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f003 020c 	and.w	r2, r3, #12
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d1eb      	bne.n	80068c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068ec:	4b27      	ldr	r3, [pc, #156]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d210      	bcs.n	800691c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068fa:	4b24      	ldr	r3, [pc, #144]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f023 020f 	bic.w	r2, r3, #15
 8006902:	4922      	ldr	r1, [pc, #136]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	4313      	orrs	r3, r2
 8006908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800690a:	4b20      	ldr	r3, [pc, #128]	@ (800698c <HAL_RCC_ClockConfig+0x1c4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	429a      	cmp	r2, r3
 8006916:	d001      	beq.n	800691c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e032      	b.n	8006982 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d008      	beq.n	800693a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006928:	4b19      	ldr	r3, [pc, #100]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4916      	ldr	r1, [pc, #88]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 8006936:	4313      	orrs	r3, r2
 8006938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006946:	4b12      	ldr	r3, [pc, #72]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	490e      	ldr	r1, [pc, #56]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 8006956:	4313      	orrs	r3, r2
 8006958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800695a:	f000 f821 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 800695e:	4602      	mov	r2, r0
 8006960:	4b0b      	ldr	r3, [pc, #44]	@ (8006990 <HAL_RCC_ClockConfig+0x1c8>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	091b      	lsrs	r3, r3, #4
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	490a      	ldr	r1, [pc, #40]	@ (8006994 <HAL_RCC_ClockConfig+0x1cc>)
 800696c:	5ccb      	ldrb	r3, [r1, r3]
 800696e:	fa22 f303 	lsr.w	r3, r2, r3
 8006972:	4a09      	ldr	r2, [pc, #36]	@ (8006998 <HAL_RCC_ClockConfig+0x1d0>)
 8006974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006976:	4b09      	ldr	r3, [pc, #36]	@ (800699c <HAL_RCC_ClockConfig+0x1d4>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f7fd fe6c 	bl	8004658 <HAL_InitTick>

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40023c00 	.word	0x40023c00
 8006990:	40023800 	.word	0x40023800
 8006994:	08011a2c 	.word	0x08011a2c
 8006998:	20000058 	.word	0x20000058
 800699c:	2000005c 	.word	0x2000005c

080069a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a4:	b094      	sub	sp, #80	@ 0x50
 80069a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ac:	2300      	movs	r3, #0
 80069ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b0:	2300      	movs	r3, #0
 80069b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069b8:	4b79      	ldr	r3, [pc, #484]	@ (8006ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f003 030c 	and.w	r3, r3, #12
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d00d      	beq.n	80069e0 <HAL_RCC_GetSysClockFreq+0x40>
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	f200 80e1 	bhi.w	8006b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_RCC_GetSysClockFreq+0x34>
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d003      	beq.n	80069da <HAL_RCC_GetSysClockFreq+0x3a>
 80069d2:	e0db      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069d4:	4b73      	ldr	r3, [pc, #460]	@ (8006ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80069d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069d8:	e0db      	b.n	8006b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069da:	4b73      	ldr	r3, [pc, #460]	@ (8006ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80069dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069de:	e0d8      	b.n	8006b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069e0:	4b6f      	ldr	r3, [pc, #444]	@ (8006ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80069ea:	4b6d      	ldr	r3, [pc, #436]	@ (8006ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d063      	beq.n	8006abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069f6:	4b6a      	ldr	r3, [pc, #424]	@ (8006ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	099b      	lsrs	r3, r3, #6
 80069fc:	2200      	movs	r2, #0
 80069fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a12:	4622      	mov	r2, r4
 8006a14:	462b      	mov	r3, r5
 8006a16:	f04f 0000 	mov.w	r0, #0
 8006a1a:	f04f 0100 	mov.w	r1, #0
 8006a1e:	0159      	lsls	r1, r3, #5
 8006a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a24:	0150      	lsls	r0, r2, #5
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	1a51      	subs	r1, r2, r1
 8006a2e:	6139      	str	r1, [r7, #16]
 8006a30:	4629      	mov	r1, r5
 8006a32:	eb63 0301 	sbc.w	r3, r3, r1
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a44:	4659      	mov	r1, fp
 8006a46:	018b      	lsls	r3, r1, #6
 8006a48:	4651      	mov	r1, sl
 8006a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a4e:	4651      	mov	r1, sl
 8006a50:	018a      	lsls	r2, r1, #6
 8006a52:	4651      	mov	r1, sl
 8006a54:	ebb2 0801 	subs.w	r8, r2, r1
 8006a58:	4659      	mov	r1, fp
 8006a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a72:	4690      	mov	r8, r2
 8006a74:	4699      	mov	r9, r3
 8006a76:	4623      	mov	r3, r4
 8006a78:	eb18 0303 	adds.w	r3, r8, r3
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	462b      	mov	r3, r5
 8006a80:	eb49 0303 	adc.w	r3, r9, r3
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a92:	4629      	mov	r1, r5
 8006a94:	024b      	lsls	r3, r1, #9
 8006a96:	4621      	mov	r1, r4
 8006a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	024a      	lsls	r2, r1, #9
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ab0:	f7fa f95a 	bl	8000d68 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4613      	mov	r3, r2
 8006aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006abc:	e058      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006abe:	4b38      	ldr	r3, [pc, #224]	@ (8006ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	099b      	lsrs	r3, r3, #6
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	4611      	mov	r1, r2
 8006aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ace:	623b      	str	r3, [r7, #32]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ad8:	4642      	mov	r2, r8
 8006ada:	464b      	mov	r3, r9
 8006adc:	f04f 0000 	mov.w	r0, #0
 8006ae0:	f04f 0100 	mov.w	r1, #0
 8006ae4:	0159      	lsls	r1, r3, #5
 8006ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aea:	0150      	lsls	r0, r2, #5
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4641      	mov	r1, r8
 8006af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006af6:	4649      	mov	r1, r9
 8006af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b10:	ebb2 040a 	subs.w	r4, r2, sl
 8006b14:	eb63 050b 	sbc.w	r5, r3, fp
 8006b18:	f04f 0200 	mov.w	r2, #0
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	00eb      	lsls	r3, r5, #3
 8006b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b26:	00e2      	lsls	r2, r4, #3
 8006b28:	4614      	mov	r4, r2
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	4643      	mov	r3, r8
 8006b2e:	18e3      	adds	r3, r4, r3
 8006b30:	603b      	str	r3, [r7, #0]
 8006b32:	464b      	mov	r3, r9
 8006b34:	eb45 0303 	adc.w	r3, r5, r3
 8006b38:	607b      	str	r3, [r7, #4]
 8006b3a:	f04f 0200 	mov.w	r2, #0
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b46:	4629      	mov	r1, r5
 8006b48:	028b      	lsls	r3, r1, #10
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b50:	4621      	mov	r1, r4
 8006b52:	028a      	lsls	r2, r1, #10
 8006b54:	4610      	mov	r0, r2
 8006b56:	4619      	mov	r1, r3
 8006b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	61bb      	str	r3, [r7, #24]
 8006b5e:	61fa      	str	r2, [r7, #28]
 8006b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b64:	f7fa f900 	bl	8000d68 <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b8a:	e002      	b.n	8006b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3750      	adds	r7, #80	@ 0x50
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	00f42400 	.word	0x00f42400
 8006ba8:	007a1200 	.word	0x007a1200

08006bac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bb0:	4b03      	ldr	r3, [pc, #12]	@ (8006bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	20000058 	.word	0x20000058

08006bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bc8:	f7ff fff0 	bl	8006bac <HAL_RCC_GetHCLKFreq>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	0a9b      	lsrs	r3, r3, #10
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	4903      	ldr	r1, [pc, #12]	@ (8006be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40023800 	.word	0x40023800
 8006be8:	08011a3c 	.word	0x08011a3c

08006bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bf0:	f7ff ffdc 	bl	8006bac <HAL_RCC_GetHCLKFreq>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b05      	ldr	r3, [pc, #20]	@ (8006c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	0b5b      	lsrs	r3, r3, #13
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4903      	ldr	r1, [pc, #12]	@ (8006c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c02:	5ccb      	ldrb	r3, [r1, r3]
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	08011a3c 	.word	0x08011a3c

08006c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d012      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c3c:	4b69      	ldr	r3, [pc, #420]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	4a68      	ldr	r2, [pc, #416]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c42:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006c46:	6093      	str	r3, [r2, #8]
 8006c48:	4b66      	ldr	r3, [pc, #408]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c50:	4964      	ldr	r1, [pc, #400]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d017      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7c:	4959      	ldr	r1, [pc, #356]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d017      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006caa:	4b4e      	ldr	r3, [pc, #312]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cb0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb8:	494a      	ldr	r1, [pc, #296]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cc8:	d101      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 808b 	beq.w	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	4a39      	ldr	r2, [pc, #228]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d04:	4b37      	ldr	r3, [pc, #220]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d0c:	60bb      	str	r3, [r7, #8]
 8006d0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d10:	4b35      	ldr	r3, [pc, #212]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a34      	ldr	r2, [pc, #208]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1c:	f7fd fce0 	bl	80046e0 <HAL_GetTick>
 8006d20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d24:	f7fd fcdc 	bl	80046e0 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b64      	cmp	r3, #100	@ 0x64
 8006d30:	d901      	bls.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e357      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d36:	4b2c      	ldr	r3, [pc, #176]	@ (8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0f0      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d42:	4b28      	ldr	r3, [pc, #160]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d035      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d02e      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d60:	4b20      	ldr	r3, [pc, #128]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d74:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d76:	4b1b      	ldr	r3, [pc, #108]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006d82:	4a18      	ldr	r2, [pc, #96]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d88:	4b16      	ldr	r3, [pc, #88]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d114      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fd fca4 	bl	80046e0 <HAL_GetTick>
 8006d98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9a:	e00a      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d9c:	f7fd fca0 	bl	80046e0 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e319      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db2:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0ee      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dca:	d111      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006dd8:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006dda:	400b      	ands	r3, r1
 8006ddc:	4901      	ldr	r1, [pc, #4]	@ (8006de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
 8006de2:	e00b      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006de4:	40023800 	.word	0x40023800
 8006de8:	40007000 	.word	0x40007000
 8006dec:	0ffffcff 	.word	0x0ffffcff
 8006df0:	4baa      	ldr	r3, [pc, #680]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4aa9      	ldr	r2, [pc, #676]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006df6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006dfa:	6093      	str	r3, [r2, #8]
 8006dfc:	4ba7      	ldr	r3, [pc, #668]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e08:	49a4      	ldr	r1, [pc, #656]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0310 	and.w	r3, r3, #16
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d010      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e1a:	4ba0      	ldr	r3, [pc, #640]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e20:	4a9e      	ldr	r2, [pc, #632]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8006e2a:	4b9c      	ldr	r3, [pc, #624]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e34:	4999      	ldr	r1, [pc, #612]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e48:	4b94      	ldr	r3, [pc, #592]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e56:	4991      	ldr	r1, [pc, #580]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e70:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e78:	4988      	ldr	r1, [pc, #544]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006e8c:	4b83      	ldr	r3, [pc, #524]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e92:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e9a:	4980      	ldr	r1, [pc, #512]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eae:	4b7b      	ldr	r3, [pc, #492]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebc:	4977      	ldr	r1, [pc, #476]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ed0:	4b72      	ldr	r3, [pc, #456]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed6:	f023 0203 	bic.w	r2, r3, #3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ede:	496f      	ldr	r1, [pc, #444]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ef2:	4b6a      	ldr	r3, [pc, #424]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef8:	f023 020c 	bic.w	r2, r3, #12
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f00:	4966      	ldr	r1, [pc, #408]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f14:	4b61      	ldr	r3, [pc, #388]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f22:	495e      	ldr	r1, [pc, #376]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f36:	4b59      	ldr	r3, [pc, #356]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f44:	4955      	ldr	r1, [pc, #340]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00a      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f58:	4b50      	ldr	r3, [pc, #320]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f66:	494d      	ldr	r1, [pc, #308]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006f7a:	4b48      	ldr	r3, [pc, #288]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f88:	4944      	ldr	r1, [pc, #272]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00a      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006faa:	493c      	ldr	r1, [pc, #240]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00a      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006fbe:	4b37      	ldr	r3, [pc, #220]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fcc:	4933      	ldr	r1, [pc, #204]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006fee:	492b      	ldr	r1, [pc, #172]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d011      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007002:	4b26      	ldr	r3, [pc, #152]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007008:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007010:	4922      	ldr	r1, [pc, #136]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007012:	4313      	orrs	r3, r2
 8007014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800701c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007020:	d101      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007022:	2301      	movs	r3, #1
 8007024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007032:	2301      	movs	r3, #1
 8007034:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007042:	4b16      	ldr	r3, [pc, #88]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007048:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007050:	4912      	ldr	r1, [pc, #72]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00b      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007064:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007074:	4909      	ldr	r1, [pc, #36]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007076:	4313      	orrs	r3, r2
 8007078:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d006      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80d9 	beq.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007090:	4b02      	ldr	r3, [pc, #8]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a01      	ldr	r2, [pc, #4]	@ (800709c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007096:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800709a:	e001      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800709c:	40023800 	.word	0x40023800
 80070a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a2:	f7fd fb1d 	bl	80046e0 <HAL_GetTick>
 80070a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070a8:	e008      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070aa:	f7fd fb19 	bl	80046e0 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b64      	cmp	r3, #100	@ 0x64
 80070b6:	d901      	bls.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e194      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f0      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d021      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11d      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80070dc:	4b64      	ldr	r3, [pc, #400]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070e2:	0c1b      	lsrs	r3, r3, #16
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070ea:	4b61      	ldr	r3, [pc, #388]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070f0:	0e1b      	lsrs	r3, r3, #24
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	019a      	lsls	r2, r3, #6
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	041b      	lsls	r3, r3, #16
 8007102:	431a      	orrs	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	061b      	lsls	r3, r3, #24
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	071b      	lsls	r3, r3, #28
 8007110:	4957      	ldr	r1, [pc, #348]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800712c:	d00a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007136:	2b00      	cmp	r3, #0
 8007138:	d02e      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007142:	d129      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007144:	4b4a      	ldr	r3, [pc, #296]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714a:	0c1b      	lsrs	r3, r3, #16
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007152:	4b47      	ldr	r3, [pc, #284]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007158:	0f1b      	lsrs	r3, r3, #28
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	019a      	lsls	r2, r3, #6
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	061b      	lsls	r3, r3, #24
 8007172:	431a      	orrs	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	071b      	lsls	r3, r3, #28
 8007178:	493d      	ldr	r1, [pc, #244]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007180:	4b3b      	ldr	r3, [pc, #236]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007182:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007186:	f023 021f 	bic.w	r2, r3, #31
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	3b01      	subs	r3, #1
 8007190:	4937      	ldr	r1, [pc, #220]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007192:	4313      	orrs	r3, r2
 8007194:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01d      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071a4:	4b32      	ldr	r3, [pc, #200]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071aa:	0e1b      	lsrs	r3, r3, #24
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071b8:	0f1b      	lsrs	r3, r3, #28
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	019a      	lsls	r2, r3, #6
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	041b      	lsls	r3, r3, #16
 80071cc:	431a      	orrs	r2, r3
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	061b      	lsls	r3, r3, #24
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	071b      	lsls	r3, r3, #28
 80071d8:	4925      	ldr	r1, [pc, #148]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d011      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	019a      	lsls	r2, r3, #6
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	061b      	lsls	r3, r3, #24
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	071b      	lsls	r3, r3, #28
 8007208:	4919      	ldr	r1, [pc, #100]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800720a:	4313      	orrs	r3, r2
 800720c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007210:	4b17      	ldr	r3, [pc, #92]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a16      	ldr	r2, [pc, #88]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007216:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800721a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800721c:	f7fd fa60 	bl	80046e0 <HAL_GetTick>
 8007220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007222:	e008      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007224:	f7fd fa5c 	bl	80046e0 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b64      	cmp	r3, #100	@ 0x64
 8007230:	d901      	bls.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e0d7      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007236:	4b0e      	ldr	r3, [pc, #56]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0f0      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	2b01      	cmp	r3, #1
 8007246:	f040 80cd 	bne.w	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800724a:	4b09      	ldr	r3, [pc, #36]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a08      	ldr	r2, [pc, #32]	@ (8007270 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007256:	f7fd fa43 	bl	80046e0 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800725c:	e00a      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800725e:	f7fd fa3f 	bl	80046e0 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b64      	cmp	r3, #100	@ 0x64
 800726a:	d903      	bls.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e0ba      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007270:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007274:	4b5e      	ldr	r3, [pc, #376]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800727c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007280:	d0ed      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d02e      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d12a      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072aa:	4b51      	ldr	r3, [pc, #324]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072b8:	4b4d      	ldr	r3, [pc, #308]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072be:	0f1b      	lsrs	r3, r3, #28
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	019a      	lsls	r2, r3, #6
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	431a      	orrs	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	071b      	lsls	r3, r3, #28
 80072de:	4944      	ldr	r1, [pc, #272]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80072e6:	4b42      	ldr	r3, [pc, #264]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072ec:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f4:	3b01      	subs	r3, #1
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	493d      	ldr	r1, [pc, #244]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d022      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007314:	d11d      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007316:	4b36      	ldr	r3, [pc, #216]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007324:	4b32      	ldr	r3, [pc, #200]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	019a      	lsls	r2, r3, #6
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	431a      	orrs	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	061b      	lsls	r3, r3, #24
 8007344:	431a      	orrs	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	071b      	lsls	r3, r3, #28
 800734a:	4929      	ldr	r1, [pc, #164]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	2b00      	cmp	r3, #0
 800735c:	d028      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800735e:	4b24      	ldr	r3, [pc, #144]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007364:	0e1b      	lsrs	r3, r3, #24
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800736c:	4b20      	ldr	r3, [pc, #128]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	019a      	lsls	r2, r3, #6
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	431a      	orrs	r2, r3
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	071b      	lsls	r3, r3, #28
 8007392:	4917      	ldr	r1, [pc, #92]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800739a:	4b15      	ldr	r3, [pc, #84]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800739c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	4911      	ldr	r1, [pc, #68]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073b0:	4b0f      	ldr	r3, [pc, #60]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a0e      	ldr	r2, [pc, #56]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073bc:	f7fd f990 	bl	80046e0 <HAL_GetTick>
 80073c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073c4:	f7fd f98c 	bl	80046e0 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b64      	cmp	r3, #100	@ 0x64
 80073d0:	d901      	bls.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e007      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073d6:	4b06      	ldr	r3, [pc, #24]	@ (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80073de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e2:	d1ef      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40023800 	.word	0x40023800

080073f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e09d      	b.n	8007542 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007416:	d009      	beq.n	800742c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	61da      	str	r2, [r3, #28]
 800741e:	e005      	b.n	800742c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fc fb8e 	bl	8003b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007462:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800746c:	d902      	bls.n	8007474 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e002      	b.n	800747a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007478:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007482:	d007      	beq.n	8007494 <HAL_SPI_Init+0xa0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800748c:	d002      	beq.n	8007494 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d6:	ea42 0103 	orr.w	r1, r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	f003 0204 	and.w	r2, r3, #4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007502:	f003 0308 	and.w	r3, r3, #8
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007510:	ea42 0103 	orr.w	r1, r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69da      	ldr	r2, [r3, #28]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b088      	sub	sp, #32
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007564:	2b01      	cmp	r3, #1
 8007566:	d101      	bne.n	800756c <HAL_SPI_Transmit+0x22>
 8007568:	2302      	movs	r3, #2
 800756a:	e15f      	b.n	800782c <HAL_SPI_Transmit+0x2e2>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007574:	f7fd f8b4 	bl	80046e0 <HAL_GetTick>
 8007578:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d002      	beq.n	8007590 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800758a:	2302      	movs	r3, #2
 800758c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800758e:	e148      	b.n	8007822 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <HAL_SPI_Transmit+0x52>
 8007596:	88fb      	ldrh	r3, [r7, #6]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d102      	bne.n	80075a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075a0:	e13f      	b.n	8007822 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2203      	movs	r2, #3
 80075a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	88fa      	ldrh	r2, [r7, #6]
 80075c0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ec:	d10f      	bne.n	800760e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800760c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007618:	2b40      	cmp	r3, #64	@ 0x40
 800761a:	d007      	beq.n	800762c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800762a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007634:	d94f      	bls.n	80076d6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_SPI_Transmit+0xfa>
 800763e:	8afb      	ldrh	r3, [r7, #22]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d142      	bne.n	80076ca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	881a      	ldrh	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	1c9a      	adds	r2, r3, #2
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007668:	e02f      	b.n	80076ca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b02      	cmp	r3, #2
 8007676:	d112      	bne.n	800769e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	881a      	ldrh	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007688:	1c9a      	adds	r2, r3, #2
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800769c:	e015      	b.n	80076ca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800769e:	f7fd f81f 	bl	80046e0 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d803      	bhi.n	80076b6 <HAL_SPI_Transmit+0x16c>
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b4:	d102      	bne.n	80076bc <HAL_SPI_Transmit+0x172>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80076c8:	e0ab      	b.n	8007822 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1ca      	bne.n	800766a <HAL_SPI_Transmit+0x120>
 80076d4:	e080      	b.n	80077d8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_SPI_Transmit+0x19a>
 80076de:	8afb      	ldrh	r3, [r7, #22]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d174      	bne.n	80077ce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d912      	bls.n	8007714 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f2:	881a      	ldrh	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b02      	subs	r3, #2
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007712:	e05c      	b.n	80077ce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	330c      	adds	r3, #12
 800771e:	7812      	ldrb	r2, [r2, #0]
 8007720:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800773a:	e048      	b.n	80077ce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b02      	cmp	r3, #2
 8007748:	d12b      	bne.n	80077a2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b01      	cmp	r3, #1
 8007752:	d912      	bls.n	800777a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	881a      	ldrh	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007764:	1c9a      	adds	r2, r3, #2
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b02      	subs	r3, #2
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007778:	e029      	b.n	80077ce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	330c      	adds	r3, #12
 8007784:	7812      	ldrb	r2, [r2, #0]
 8007786:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077a0:	e015      	b.n	80077ce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a2:	f7fc ff9d 	bl	80046e0 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d803      	bhi.n	80077ba <HAL_SPI_Transmit+0x270>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d102      	bne.n	80077c0 <HAL_SPI_Transmit+0x276>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80077cc:	e029      	b.n	8007822 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1b1      	bne.n	800773c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077d8:	69ba      	ldr	r2, [r7, #24]
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 fb77 	bl	8007ed0 <SPI_EndRxTxTransaction>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2220      	movs	r2, #32
 80077ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077f6:	2300      	movs	r3, #0
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e003      	b.n	8007822 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800782a:	7ffb      	ldrb	r3, [r7, #31]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3720      	adds	r7, #32
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	@ 0x28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007842:	2301      	movs	r3, #1
 8007844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_SPI_TransmitReceive+0x26>
 8007856:	2302      	movs	r3, #2
 8007858:	e20a      	b.n	8007c70 <HAL_SPI_TransmitReceive+0x43c>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007862:	f7fc ff3d 	bl	80046e0 <HAL_GetTick>
 8007866:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800786e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007876:	887b      	ldrh	r3, [r7, #2]
 8007878:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800787a:	887b      	ldrh	r3, [r7, #2]
 800787c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800787e:	7efb      	ldrb	r3, [r7, #27]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d00e      	beq.n	80078a2 <HAL_SPI_TransmitReceive+0x6e>
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800788a:	d106      	bne.n	800789a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <HAL_SPI_TransmitReceive+0x66>
 8007894:	7efb      	ldrb	r3, [r7, #27]
 8007896:	2b04      	cmp	r3, #4
 8007898:	d003      	beq.n	80078a2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800789a:	2302      	movs	r3, #2
 800789c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80078a0:	e1e0      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <HAL_SPI_TransmitReceive+0x80>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_SPI_TransmitReceive+0x80>
 80078ae:	887b      	ldrh	r3, [r7, #2]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80078ba:	e1d3      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d003      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2205      	movs	r2, #5
 80078cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	887a      	ldrh	r2, [r7, #2]
 80078e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	887a      	ldrh	r2, [r7, #2]
 80078e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	887a      	ldrh	r2, [r7, #2]
 80078f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	887a      	ldrh	r2, [r7, #2]
 80078fc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007912:	d802      	bhi.n	800791a <HAL_SPI_TransmitReceive+0xe6>
 8007914:	8a3b      	ldrh	r3, [r7, #16]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d908      	bls.n	800792c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	e007      	b.n	800793c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800793a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007946:	2b40      	cmp	r3, #64	@ 0x40
 8007948:	d007      	beq.n	800795a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007958:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007962:	f240 8081 	bls.w	8007a68 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_SPI_TransmitReceive+0x140>
 800796e:	8a7b      	ldrh	r3, [r7, #18]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d16d      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007978:	881a      	ldrh	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007984:	1c9a      	adds	r2, r3, #2
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800798e:	b29b      	uxth	r3, r3
 8007990:	3b01      	subs	r3, #1
 8007992:	b29a      	uxth	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007998:	e05a      	b.n	8007a50 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d11b      	bne.n	80079e0 <HAL_SPI_TransmitReceive+0x1ac>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d016      	beq.n	80079e0 <HAL_SPI_TransmitReceive+0x1ac>
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d113      	bne.n	80079e0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c8:	1c9a      	adds	r2, r3, #2
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d11c      	bne.n	8007a28 <HAL_SPI_TransmitReceive+0x1f4>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a04:	b292      	uxth	r2, r2
 8007a06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0c:	1c9a      	adds	r2, r3, #2
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a24:	2301      	movs	r3, #1
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a28:	f7fc fe5a 	bl	80046e0 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d80b      	bhi.n	8007a50 <HAL_SPI_TransmitReceive+0x21c>
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3e:	d007      	beq.n	8007a50 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007a4e:	e109      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d19f      	bne.n	800799a <HAL_SPI_TransmitReceive+0x166>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d199      	bne.n	800799a <HAL_SPI_TransmitReceive+0x166>
 8007a66:	e0e3      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_SPI_TransmitReceive+0x244>
 8007a70:	8a7b      	ldrh	r3, [r7, #18]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	f040 80cf 	bne.w	8007c16 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d912      	bls.n	8007aa8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a86:	881a      	ldrh	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a92:	1c9a      	adds	r2, r3, #2
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b02      	subs	r3, #2
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007aa6:	e0b6      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
 8007ab2:	7812      	ldrb	r2, [r2, #0]
 8007ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ace:	e0a2      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d134      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0x314>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d02f      	beq.n	8007b48 <HAL_SPI_TransmitReceive+0x314>
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d12c      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d912      	bls.n	8007b1e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afc:	881a      	ldrh	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	1c9a      	adds	r2, r3, #2
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b02      	subs	r3, #2
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b1c:	e012      	b.n	8007b44 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	330c      	adds	r3, #12
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d148      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x3b4>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d042      	beq.n	8007be8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d923      	bls.n	8007bb6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68da      	ldr	r2, [r3, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b80:	1c9a      	adds	r2, r3, #2
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	3b02      	subs	r3, #2
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d81f      	bhi.n	8007be4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bb2:	605a      	str	r2, [r3, #4]
 8007bb4:	e016      	b.n	8007be4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f103 020c 	add.w	r2, r3, #12
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007be4:	2301      	movs	r3, #1
 8007be6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007be8:	f7fc fd7a 	bl	80046e0 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d803      	bhi.n	8007c00 <HAL_SPI_TransmitReceive+0x3cc>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfe:	d102      	bne.n	8007c06 <HAL_SPI_TransmitReceive+0x3d2>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d107      	bne.n	8007c16 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007c14:	e026      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f47f af57 	bne.w	8007ad0 <HAL_SPI_TransmitReceive+0x29c>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f47f af50 	bne.w	8007ad0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f94b 	bl	8007ed0 <SPI_EndRxTxTransaction>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d003      	beq.n	8007c5c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c5a:	e003      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3728      	adds	r7, #40	@ 0x28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c86:	b2db      	uxtb	r3, r3
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ca4:	f7fc fd1c 	bl	80046e0 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cb4:	f7fc fd14 	bl	80046e0 <HAL_GetTick>
 8007cb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cba:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	015b      	lsls	r3, r3, #5
 8007cc0:	0d1b      	lsrs	r3, r3, #20
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	fb02 f303 	mul.w	r3, r2, r3
 8007cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cca:	e054      	b.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd2:	d050      	beq.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cd4:	f7fc fd04 	bl	80046e0 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d902      	bls.n	8007cea <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d13d      	bne.n	8007d66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d02:	d111      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d0c:	d004      	beq.n	8007d18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d16:	d107      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d30:	d10f      	bne.n	8007d52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e017      	b.n	8007d96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	bf0c      	ite	eq
 8007d86:	2301      	moveq	r3, #1
 8007d88:	2300      	movne	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d19b      	bne.n	8007ccc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3720      	adds	r7, #32
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000058 	.word	0x20000058

08007da4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08a      	sub	sp, #40	@ 0x28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007db6:	f7fc fc93 	bl	80046e0 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	1a9b      	subs	r3, r3, r2
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007dc6:	f7fc fc8b 	bl	80046e0 <HAL_GetTick>
 8007dca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8007ecc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	00da      	lsls	r2, r3, #3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	0d1b      	lsrs	r3, r3, #20
 8007de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007dec:	e060      	b.n	8007eb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007df4:	d107      	bne.n	8007e06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e0c:	d050      	beq.n	8007eb0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e0e:	f7fc fc67 	bl	80046e0 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d902      	bls.n	8007e24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d13d      	bne.n	8007ea0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e3c:	d111      	bne.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e46:	d004      	beq.n	8007e52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e50:	d107      	bne.n	8007e62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e6a:	d10f      	bne.n	8007e8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e010      	b.n	8007ec2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	3b01      	subs	r3, #1
 8007eae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4013      	ands	r3, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d196      	bne.n	8007dee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3728      	adds	r7, #40	@ 0x28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000058 	.word	0x20000058

08007ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff ff5b 	bl	8007da4 <SPI_WaitFifoStateUntilTimeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d007      	beq.n	8007f04 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ef8:	f043 0220 	orr.w	r2, r3, #32
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e046      	b.n	8007f92 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f04:	4b25      	ldr	r3, [pc, #148]	@ (8007f9c <SPI_EndRxTxTransaction+0xcc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a25      	ldr	r2, [pc, #148]	@ (8007fa0 <SPI_EndRxTxTransaction+0xd0>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	0d5b      	lsrs	r3, r3, #21
 8007f10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007f14:	fb02 f303 	mul.w	r3, r2, r3
 8007f18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f22:	d112      	bne.n	8007f4a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2180      	movs	r1, #128	@ 0x80
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff feb0 	bl	8007c94 <SPI_WaitFlagStateUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d016      	beq.n	8007f68 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f3e:	f043 0220 	orr.w	r2, r3, #32
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e023      	b.n	8007f92 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f60:	2b80      	cmp	r3, #128	@ 0x80
 8007f62:	d0f2      	beq.n	8007f4a <SPI_EndRxTxTransaction+0x7a>
 8007f64:	e000      	b.n	8007f68 <SPI_EndRxTxTransaction+0x98>
        break;
 8007f66:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f7ff ff15 	bl	8007da4 <SPI_WaitFifoStateUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f84:	f043 0220 	orr.w	r2, r3, #32
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e000      	b.n	8007f92 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000058 	.word	0x20000058
 8007fa0:	165e9f81 	.word	0x165e9f81

08007fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e040      	b.n	8008038 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fc fa08 	bl	80043dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2224      	movs	r2, #36	@ 0x24
 8007fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0201 	bic.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fb16 	bl	800861c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f8af 	bl	8008154 <UART_SetConfig>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e01b      	b.n	8008038 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800800e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689a      	ldr	r2, [r3, #8]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800801e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0201 	orr.w	r2, r2, #1
 800802e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb95 	bl	8008760 <UART_CheckIdleState>
 8008036:	4603      	mov	r3, r0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	@ 0x28
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	4613      	mov	r3, r2
 800804e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008054:	2b20      	cmp	r3, #32
 8008056:	d177      	bne.n	8008148 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_UART_Transmit+0x24>
 800805e:	88fb      	ldrh	r3, [r7, #6]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e070      	b.n	800814a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2221      	movs	r2, #33	@ 0x21
 8008074:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008076:	f7fc fb33 	bl	80046e0 <HAL_GetTick>
 800807a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	88fa      	ldrh	r2, [r7, #6]
 8008080:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	88fa      	ldrh	r2, [r7, #6]
 8008088:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008094:	d108      	bne.n	80080a8 <HAL_UART_Transmit+0x68>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d104      	bne.n	80080a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	e003      	b.n	80080b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080b0:	e02f      	b.n	8008112 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2200      	movs	r2, #0
 80080ba:	2180      	movs	r1, #128	@ 0x80
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fba6 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e03b      	b.n	800814a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	461a      	mov	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	3302      	adds	r3, #2
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	e007      	b.n	8008100 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	781a      	ldrb	r2, [r3, #0]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	3301      	adds	r3, #1
 80080fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1c9      	bne.n	80080b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2200      	movs	r2, #0
 8008126:	2140      	movs	r1, #64	@ 0x40
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f000 fb70 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d004      	beq.n	800813e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e005      	b.n	800814a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	e000      	b.n	800814a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008148:	2302      	movs	r3, #2
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3720      	adds	r7, #32
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4ba6      	ldr	r3, [pc, #664]	@ (8008418 <UART_SetConfig+0x2c4>)
 8008180:	4013      	ands	r3, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	6979      	ldr	r1, [r7, #20]
 8008188:	430b      	orrs	r3, r1
 800818a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a94      	ldr	r2, [pc, #592]	@ (800841c <UART_SetConfig+0x2c8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d120      	bne.n	8008212 <UART_SetConfig+0xbe>
 80081d0:	4b93      	ldr	r3, [pc, #588]	@ (8008420 <UART_SetConfig+0x2cc>)
 80081d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d816      	bhi.n	800820c <UART_SetConfig+0xb8>
 80081de:	a201      	add	r2, pc, #4	@ (adr r2, 80081e4 <UART_SetConfig+0x90>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	080081f5 	.word	0x080081f5
 80081e8:	08008201 	.word	0x08008201
 80081ec:	080081fb 	.word	0x080081fb
 80081f0:	08008207 	.word	0x08008207
 80081f4:	2301      	movs	r3, #1
 80081f6:	77fb      	strb	r3, [r7, #31]
 80081f8:	e150      	b.n	800849c <UART_SetConfig+0x348>
 80081fa:	2302      	movs	r3, #2
 80081fc:	77fb      	strb	r3, [r7, #31]
 80081fe:	e14d      	b.n	800849c <UART_SetConfig+0x348>
 8008200:	2304      	movs	r3, #4
 8008202:	77fb      	strb	r3, [r7, #31]
 8008204:	e14a      	b.n	800849c <UART_SetConfig+0x348>
 8008206:	2308      	movs	r3, #8
 8008208:	77fb      	strb	r3, [r7, #31]
 800820a:	e147      	b.n	800849c <UART_SetConfig+0x348>
 800820c:	2310      	movs	r3, #16
 800820e:	77fb      	strb	r3, [r7, #31]
 8008210:	e144      	b.n	800849c <UART_SetConfig+0x348>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a83      	ldr	r2, [pc, #524]	@ (8008424 <UART_SetConfig+0x2d0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d132      	bne.n	8008282 <UART_SetConfig+0x12e>
 800821c:	4b80      	ldr	r3, [pc, #512]	@ (8008420 <UART_SetConfig+0x2cc>)
 800821e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008222:	f003 030c 	and.w	r3, r3, #12
 8008226:	2b0c      	cmp	r3, #12
 8008228:	d828      	bhi.n	800827c <UART_SetConfig+0x128>
 800822a:	a201      	add	r2, pc, #4	@ (adr r2, 8008230 <UART_SetConfig+0xdc>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	08008265 	.word	0x08008265
 8008234:	0800827d 	.word	0x0800827d
 8008238:	0800827d 	.word	0x0800827d
 800823c:	0800827d 	.word	0x0800827d
 8008240:	08008271 	.word	0x08008271
 8008244:	0800827d 	.word	0x0800827d
 8008248:	0800827d 	.word	0x0800827d
 800824c:	0800827d 	.word	0x0800827d
 8008250:	0800826b 	.word	0x0800826b
 8008254:	0800827d 	.word	0x0800827d
 8008258:	0800827d 	.word	0x0800827d
 800825c:	0800827d 	.word	0x0800827d
 8008260:	08008277 	.word	0x08008277
 8008264:	2300      	movs	r3, #0
 8008266:	77fb      	strb	r3, [r7, #31]
 8008268:	e118      	b.n	800849c <UART_SetConfig+0x348>
 800826a:	2302      	movs	r3, #2
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e115      	b.n	800849c <UART_SetConfig+0x348>
 8008270:	2304      	movs	r3, #4
 8008272:	77fb      	strb	r3, [r7, #31]
 8008274:	e112      	b.n	800849c <UART_SetConfig+0x348>
 8008276:	2308      	movs	r3, #8
 8008278:	77fb      	strb	r3, [r7, #31]
 800827a:	e10f      	b.n	800849c <UART_SetConfig+0x348>
 800827c:	2310      	movs	r3, #16
 800827e:	77fb      	strb	r3, [r7, #31]
 8008280:	e10c      	b.n	800849c <UART_SetConfig+0x348>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a68      	ldr	r2, [pc, #416]	@ (8008428 <UART_SetConfig+0x2d4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d120      	bne.n	80082ce <UART_SetConfig+0x17a>
 800828c:	4b64      	ldr	r3, [pc, #400]	@ (8008420 <UART_SetConfig+0x2cc>)
 800828e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008292:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008296:	2b30      	cmp	r3, #48	@ 0x30
 8008298:	d013      	beq.n	80082c2 <UART_SetConfig+0x16e>
 800829a:	2b30      	cmp	r3, #48	@ 0x30
 800829c:	d814      	bhi.n	80082c8 <UART_SetConfig+0x174>
 800829e:	2b20      	cmp	r3, #32
 80082a0:	d009      	beq.n	80082b6 <UART_SetConfig+0x162>
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d810      	bhi.n	80082c8 <UART_SetConfig+0x174>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d002      	beq.n	80082b0 <UART_SetConfig+0x15c>
 80082aa:	2b10      	cmp	r3, #16
 80082ac:	d006      	beq.n	80082bc <UART_SetConfig+0x168>
 80082ae:	e00b      	b.n	80082c8 <UART_SetConfig+0x174>
 80082b0:	2300      	movs	r3, #0
 80082b2:	77fb      	strb	r3, [r7, #31]
 80082b4:	e0f2      	b.n	800849c <UART_SetConfig+0x348>
 80082b6:	2302      	movs	r3, #2
 80082b8:	77fb      	strb	r3, [r7, #31]
 80082ba:	e0ef      	b.n	800849c <UART_SetConfig+0x348>
 80082bc:	2304      	movs	r3, #4
 80082be:	77fb      	strb	r3, [r7, #31]
 80082c0:	e0ec      	b.n	800849c <UART_SetConfig+0x348>
 80082c2:	2308      	movs	r3, #8
 80082c4:	77fb      	strb	r3, [r7, #31]
 80082c6:	e0e9      	b.n	800849c <UART_SetConfig+0x348>
 80082c8:	2310      	movs	r3, #16
 80082ca:	77fb      	strb	r3, [r7, #31]
 80082cc:	e0e6      	b.n	800849c <UART_SetConfig+0x348>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a56      	ldr	r2, [pc, #344]	@ (800842c <UART_SetConfig+0x2d8>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d120      	bne.n	800831a <UART_SetConfig+0x1c6>
 80082d8:	4b51      	ldr	r3, [pc, #324]	@ (8008420 <UART_SetConfig+0x2cc>)
 80082da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80082e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80082e4:	d013      	beq.n	800830e <UART_SetConfig+0x1ba>
 80082e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082e8:	d814      	bhi.n	8008314 <UART_SetConfig+0x1c0>
 80082ea:	2b80      	cmp	r3, #128	@ 0x80
 80082ec:	d009      	beq.n	8008302 <UART_SetConfig+0x1ae>
 80082ee:	2b80      	cmp	r3, #128	@ 0x80
 80082f0:	d810      	bhi.n	8008314 <UART_SetConfig+0x1c0>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d002      	beq.n	80082fc <UART_SetConfig+0x1a8>
 80082f6:	2b40      	cmp	r3, #64	@ 0x40
 80082f8:	d006      	beq.n	8008308 <UART_SetConfig+0x1b4>
 80082fa:	e00b      	b.n	8008314 <UART_SetConfig+0x1c0>
 80082fc:	2300      	movs	r3, #0
 80082fe:	77fb      	strb	r3, [r7, #31]
 8008300:	e0cc      	b.n	800849c <UART_SetConfig+0x348>
 8008302:	2302      	movs	r3, #2
 8008304:	77fb      	strb	r3, [r7, #31]
 8008306:	e0c9      	b.n	800849c <UART_SetConfig+0x348>
 8008308:	2304      	movs	r3, #4
 800830a:	77fb      	strb	r3, [r7, #31]
 800830c:	e0c6      	b.n	800849c <UART_SetConfig+0x348>
 800830e:	2308      	movs	r3, #8
 8008310:	77fb      	strb	r3, [r7, #31]
 8008312:	e0c3      	b.n	800849c <UART_SetConfig+0x348>
 8008314:	2310      	movs	r3, #16
 8008316:	77fb      	strb	r3, [r7, #31]
 8008318:	e0c0      	b.n	800849c <UART_SetConfig+0x348>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a44      	ldr	r2, [pc, #272]	@ (8008430 <UART_SetConfig+0x2dc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d125      	bne.n	8008370 <UART_SetConfig+0x21c>
 8008324:	4b3e      	ldr	r3, [pc, #248]	@ (8008420 <UART_SetConfig+0x2cc>)
 8008326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800832a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800832e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008332:	d017      	beq.n	8008364 <UART_SetConfig+0x210>
 8008334:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008338:	d817      	bhi.n	800836a <UART_SetConfig+0x216>
 800833a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800833e:	d00b      	beq.n	8008358 <UART_SetConfig+0x204>
 8008340:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008344:	d811      	bhi.n	800836a <UART_SetConfig+0x216>
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <UART_SetConfig+0x1fe>
 800834a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800834e:	d006      	beq.n	800835e <UART_SetConfig+0x20a>
 8008350:	e00b      	b.n	800836a <UART_SetConfig+0x216>
 8008352:	2300      	movs	r3, #0
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e0a1      	b.n	800849c <UART_SetConfig+0x348>
 8008358:	2302      	movs	r3, #2
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	e09e      	b.n	800849c <UART_SetConfig+0x348>
 800835e:	2304      	movs	r3, #4
 8008360:	77fb      	strb	r3, [r7, #31]
 8008362:	e09b      	b.n	800849c <UART_SetConfig+0x348>
 8008364:	2308      	movs	r3, #8
 8008366:	77fb      	strb	r3, [r7, #31]
 8008368:	e098      	b.n	800849c <UART_SetConfig+0x348>
 800836a:	2310      	movs	r3, #16
 800836c:	77fb      	strb	r3, [r7, #31]
 800836e:	e095      	b.n	800849c <UART_SetConfig+0x348>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a2f      	ldr	r2, [pc, #188]	@ (8008434 <UART_SetConfig+0x2e0>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d125      	bne.n	80083c6 <UART_SetConfig+0x272>
 800837a:	4b29      	ldr	r3, [pc, #164]	@ (8008420 <UART_SetConfig+0x2cc>)
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008380:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008384:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008388:	d017      	beq.n	80083ba <UART_SetConfig+0x266>
 800838a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800838e:	d817      	bhi.n	80083c0 <UART_SetConfig+0x26c>
 8008390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008394:	d00b      	beq.n	80083ae <UART_SetConfig+0x25a>
 8008396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800839a:	d811      	bhi.n	80083c0 <UART_SetConfig+0x26c>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <UART_SetConfig+0x254>
 80083a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083a4:	d006      	beq.n	80083b4 <UART_SetConfig+0x260>
 80083a6:	e00b      	b.n	80083c0 <UART_SetConfig+0x26c>
 80083a8:	2301      	movs	r3, #1
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e076      	b.n	800849c <UART_SetConfig+0x348>
 80083ae:	2302      	movs	r3, #2
 80083b0:	77fb      	strb	r3, [r7, #31]
 80083b2:	e073      	b.n	800849c <UART_SetConfig+0x348>
 80083b4:	2304      	movs	r3, #4
 80083b6:	77fb      	strb	r3, [r7, #31]
 80083b8:	e070      	b.n	800849c <UART_SetConfig+0x348>
 80083ba:	2308      	movs	r3, #8
 80083bc:	77fb      	strb	r3, [r7, #31]
 80083be:	e06d      	b.n	800849c <UART_SetConfig+0x348>
 80083c0:	2310      	movs	r3, #16
 80083c2:	77fb      	strb	r3, [r7, #31]
 80083c4:	e06a      	b.n	800849c <UART_SetConfig+0x348>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <UART_SetConfig+0x2e4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d138      	bne.n	8008442 <UART_SetConfig+0x2ee>
 80083d0:	4b13      	ldr	r3, [pc, #76]	@ (8008420 <UART_SetConfig+0x2cc>)
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80083da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083de:	d017      	beq.n	8008410 <UART_SetConfig+0x2bc>
 80083e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80083e4:	d82a      	bhi.n	800843c <UART_SetConfig+0x2e8>
 80083e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083ea:	d00b      	beq.n	8008404 <UART_SetConfig+0x2b0>
 80083ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083f0:	d824      	bhi.n	800843c <UART_SetConfig+0x2e8>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <UART_SetConfig+0x2aa>
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fa:	d006      	beq.n	800840a <UART_SetConfig+0x2b6>
 80083fc:	e01e      	b.n	800843c <UART_SetConfig+0x2e8>
 80083fe:	2300      	movs	r3, #0
 8008400:	77fb      	strb	r3, [r7, #31]
 8008402:	e04b      	b.n	800849c <UART_SetConfig+0x348>
 8008404:	2302      	movs	r3, #2
 8008406:	77fb      	strb	r3, [r7, #31]
 8008408:	e048      	b.n	800849c <UART_SetConfig+0x348>
 800840a:	2304      	movs	r3, #4
 800840c:	77fb      	strb	r3, [r7, #31]
 800840e:	e045      	b.n	800849c <UART_SetConfig+0x348>
 8008410:	2308      	movs	r3, #8
 8008412:	77fb      	strb	r3, [r7, #31]
 8008414:	e042      	b.n	800849c <UART_SetConfig+0x348>
 8008416:	bf00      	nop
 8008418:	efff69f3 	.word	0xefff69f3
 800841c:	40011000 	.word	0x40011000
 8008420:	40023800 	.word	0x40023800
 8008424:	40004400 	.word	0x40004400
 8008428:	40004800 	.word	0x40004800
 800842c:	40004c00 	.word	0x40004c00
 8008430:	40005000 	.word	0x40005000
 8008434:	40011400 	.word	0x40011400
 8008438:	40007800 	.word	0x40007800
 800843c:	2310      	movs	r3, #16
 800843e:	77fb      	strb	r3, [r7, #31]
 8008440:	e02c      	b.n	800849c <UART_SetConfig+0x348>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a72      	ldr	r2, [pc, #456]	@ (8008610 <UART_SetConfig+0x4bc>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d125      	bne.n	8008498 <UART_SetConfig+0x344>
 800844c:	4b71      	ldr	r3, [pc, #452]	@ (8008614 <UART_SetConfig+0x4c0>)
 800844e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008452:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008456:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800845a:	d017      	beq.n	800848c <UART_SetConfig+0x338>
 800845c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008460:	d817      	bhi.n	8008492 <UART_SetConfig+0x33e>
 8008462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008466:	d00b      	beq.n	8008480 <UART_SetConfig+0x32c>
 8008468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800846c:	d811      	bhi.n	8008492 <UART_SetConfig+0x33e>
 800846e:	2b00      	cmp	r3, #0
 8008470:	d003      	beq.n	800847a <UART_SetConfig+0x326>
 8008472:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008476:	d006      	beq.n	8008486 <UART_SetConfig+0x332>
 8008478:	e00b      	b.n	8008492 <UART_SetConfig+0x33e>
 800847a:	2300      	movs	r3, #0
 800847c:	77fb      	strb	r3, [r7, #31]
 800847e:	e00d      	b.n	800849c <UART_SetConfig+0x348>
 8008480:	2302      	movs	r3, #2
 8008482:	77fb      	strb	r3, [r7, #31]
 8008484:	e00a      	b.n	800849c <UART_SetConfig+0x348>
 8008486:	2304      	movs	r3, #4
 8008488:	77fb      	strb	r3, [r7, #31]
 800848a:	e007      	b.n	800849c <UART_SetConfig+0x348>
 800848c:	2308      	movs	r3, #8
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e004      	b.n	800849c <UART_SetConfig+0x348>
 8008492:	2310      	movs	r3, #16
 8008494:	77fb      	strb	r3, [r7, #31]
 8008496:	e001      	b.n	800849c <UART_SetConfig+0x348>
 8008498:	2310      	movs	r3, #16
 800849a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084a4:	d15b      	bne.n	800855e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80084a6:	7ffb      	ldrb	r3, [r7, #31]
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d828      	bhi.n	80084fe <UART_SetConfig+0x3aa>
 80084ac:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <UART_SetConfig+0x360>)
 80084ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b2:	bf00      	nop
 80084b4:	080084d9 	.word	0x080084d9
 80084b8:	080084e1 	.word	0x080084e1
 80084bc:	080084e9 	.word	0x080084e9
 80084c0:	080084ff 	.word	0x080084ff
 80084c4:	080084ef 	.word	0x080084ef
 80084c8:	080084ff 	.word	0x080084ff
 80084cc:	080084ff 	.word	0x080084ff
 80084d0:	080084ff 	.word	0x080084ff
 80084d4:	080084f7 	.word	0x080084f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084d8:	f7fe fb74 	bl	8006bc4 <HAL_RCC_GetPCLK1Freq>
 80084dc:	61b8      	str	r0, [r7, #24]
        break;
 80084de:	e013      	b.n	8008508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084e0:	f7fe fb84 	bl	8006bec <HAL_RCC_GetPCLK2Freq>
 80084e4:	61b8      	str	r0, [r7, #24]
        break;
 80084e6:	e00f      	b.n	8008508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084e8:	4b4b      	ldr	r3, [pc, #300]	@ (8008618 <UART_SetConfig+0x4c4>)
 80084ea:	61bb      	str	r3, [r7, #24]
        break;
 80084ec:	e00c      	b.n	8008508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ee:	f7fe fa57 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 80084f2:	61b8      	str	r0, [r7, #24]
        break;
 80084f4:	e008      	b.n	8008508 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084fa:	61bb      	str	r3, [r7, #24]
        break;
 80084fc:	e004      	b.n	8008508 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80084fe:	2300      	movs	r3, #0
 8008500:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	77bb      	strb	r3, [r7, #30]
        break;
 8008506:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d074      	beq.n	80085f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	005a      	lsls	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	441a      	add	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d916      	bls.n	8008558 <UART_SetConfig+0x404>
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008530:	d212      	bcs.n	8008558 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	b29b      	uxth	r3, r3
 8008536:	f023 030f 	bic.w	r3, r3, #15
 800853a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	085b      	lsrs	r3, r3, #1
 8008540:	b29b      	uxth	r3, r3
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	b29a      	uxth	r2, r3
 8008548:	89fb      	ldrh	r3, [r7, #14]
 800854a:	4313      	orrs	r3, r2
 800854c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	89fa      	ldrh	r2, [r7, #14]
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	e04f      	b.n	80085f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	77bb      	strb	r3, [r7, #30]
 800855c:	e04c      	b.n	80085f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800855e:	7ffb      	ldrb	r3, [r7, #31]
 8008560:	2b08      	cmp	r3, #8
 8008562:	d828      	bhi.n	80085b6 <UART_SetConfig+0x462>
 8008564:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <UART_SetConfig+0x418>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	08008591 	.word	0x08008591
 8008570:	08008599 	.word	0x08008599
 8008574:	080085a1 	.word	0x080085a1
 8008578:	080085b7 	.word	0x080085b7
 800857c:	080085a7 	.word	0x080085a7
 8008580:	080085b7 	.word	0x080085b7
 8008584:	080085b7 	.word	0x080085b7
 8008588:	080085b7 	.word	0x080085b7
 800858c:	080085af 	.word	0x080085af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008590:	f7fe fb18 	bl	8006bc4 <HAL_RCC_GetPCLK1Freq>
 8008594:	61b8      	str	r0, [r7, #24]
        break;
 8008596:	e013      	b.n	80085c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008598:	f7fe fb28 	bl	8006bec <HAL_RCC_GetPCLK2Freq>
 800859c:	61b8      	str	r0, [r7, #24]
        break;
 800859e:	e00f      	b.n	80085c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008618 <UART_SetConfig+0x4c4>)
 80085a2:	61bb      	str	r3, [r7, #24]
        break;
 80085a4:	e00c      	b.n	80085c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a6:	f7fe f9fb 	bl	80069a0 <HAL_RCC_GetSysClockFreq>
 80085aa:	61b8      	str	r0, [r7, #24]
        break;
 80085ac:	e008      	b.n	80085c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085b2:	61bb      	str	r3, [r7, #24]
        break;
 80085b4:	e004      	b.n	80085c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	77bb      	strb	r3, [r7, #30]
        break;
 80085be:	bf00      	nop
    }

    if (pclk != 0U)
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d018      	beq.n	80085f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	085a      	lsrs	r2, r3, #1
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	441a      	add	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b0f      	cmp	r3, #15
 80085de:	d909      	bls.n	80085f4 <UART_SetConfig+0x4a0>
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085e6:	d205      	bcs.n	80085f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60da      	str	r2, [r3, #12]
 80085f2:	e001      	b.n	80085f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008604:	7fbb      	ldrb	r3, [r7, #30]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3720      	adds	r7, #32
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40007c00 	.word	0x40007c00
 8008614:	40023800 	.word	0x40023800
 8008618:	00f42400 	.word	0x00f42400

0800861c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008628:	f003 0308 	and.w	r3, r3, #8
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	430a      	orrs	r2, r1
 8008644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	430a      	orrs	r2, r1
 8008666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01a      	beq.n	8008732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800871a:	d10a      	bne.n	8008732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08c      	sub	sp, #48	@ 0x30
 8008764:	af02      	add	r7, sp, #8
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008770:	f7fb ffb6 	bl	80046e0 <HAL_GetTick>
 8008774:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b08      	cmp	r3, #8
 8008782:	d12e      	bne.n	80087e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	2200      	movs	r2, #0
 800878e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f83b 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d021      	beq.n	80087e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087b2:	623b      	str	r3, [r7, #32]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	61fb      	str	r3, [r7, #28]
 80087be:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	69b9      	ldr	r1, [r7, #24]
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	617b      	str	r3, [r7, #20]
   return(result);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2220      	movs	r2, #32
 80087d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e011      	b.n	8008806 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3728      	adds	r7, #40	@ 0x28
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	603b      	str	r3, [r7, #0]
 800881a:	4613      	mov	r3, r2
 800881c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800881e:	e04f      	b.n	80088c0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d04b      	beq.n	80088c0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008828:	f7fb ff5a 	bl	80046e0 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	429a      	cmp	r2, r3
 8008836:	d302      	bcc.n	800883e <UART_WaitOnFlagUntilTimeout+0x30>
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e04e      	b.n	80088e0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d037      	beq.n	80088c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2b80      	cmp	r3, #128	@ 0x80
 8008854:	d034      	beq.n	80088c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	2b40      	cmp	r3, #64	@ 0x40
 800885a:	d031      	beq.n	80088c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b08      	cmp	r3, #8
 8008868:	d110      	bne.n	800888c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2208      	movs	r2, #8
 8008870:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f838 	bl	80088e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2208      	movs	r2, #8
 800887c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e029      	b.n	80088e0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008896:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800889a:	d111      	bne.n	80088c0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 f81e 	bl	80088e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e00f      	b.n	80088e0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69da      	ldr	r2, [r3, #28]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	4013      	ands	r3, r2
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	bf0c      	ite	eq
 80088d0:	2301      	moveq	r3, #1
 80088d2:	2300      	movne	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	461a      	mov	r2, r3
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d0a0      	beq.n	8008820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b095      	sub	sp, #84	@ 0x54
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800890e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008910:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800891c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e6      	bne.n	80088f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	61fb      	str	r3, [r7, #28]
   return(result);
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	f023 0301 	bic.w	r3, r3, #1
 8008938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e5      	bne.n	8008922 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800895a:	2b01      	cmp	r3, #1
 800895c:	d118      	bne.n	8008990 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	60bb      	str	r3, [r7, #8]
   return(result);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f023 0310 	bic.w	r3, r3, #16
 8008972:	647b      	str	r3, [r7, #68]	@ 0x44
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6979      	ldr	r1, [r7, #20]
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	613b      	str	r3, [r7, #16]
   return(result);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2220      	movs	r2, #32
 8008994:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80089a4:	bf00      	nop
 80089a6:	3754      	adds	r7, #84	@ 0x54
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089b0:	b084      	sub	sp, #16
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b084      	sub	sp, #16
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	f107 001c 	add.w	r0, r7, #28
 80089be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d121      	bne.n	8008a0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	4b21      	ldr	r3, [pc, #132]	@ (8008a60 <USB_CoreInit+0xb0>)
 80089dc:	4013      	ands	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80089ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d105      	bne.n	8008a02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa92 	bl	8008f2c <USB_CoreReset>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]
 8008a0c:	e010      	b.n	8008a30 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa86 	bl	8008f2c <USB_CoreReset>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008a30:	7fbb      	ldrb	r3, [r7, #30]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d10b      	bne.n	8008a4e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f043 0206 	orr.w	r2, r3, #6
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f043 0220 	orr.w	r2, r3, #32
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a5a:	b004      	add	sp, #16
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	ffbdffbf 	.word	0xffbdffbf

08008a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f023 0201 	bic.w	r2, r3, #1
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d115      	bne.n	8008ad4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ab4:	200a      	movs	r0, #10
 8008ab6:	f7fb fe1f 	bl	80046f8 <HAL_Delay>
      ms += 10U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	330a      	adds	r3, #10
 8008abe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa25 	bl	8008f10 <USB_GetMode>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d01e      	beq.n	8008b0a <USB_SetCurrentMode+0x84>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ad0:	d9f0      	bls.n	8008ab4 <USB_SetCurrentMode+0x2e>
 8008ad2:	e01a      	b.n	8008b0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d115      	bne.n	8008b06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ae6:	200a      	movs	r0, #10
 8008ae8:	f7fb fe06 	bl	80046f8 <HAL_Delay>
      ms += 10U;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	330a      	adds	r3, #10
 8008af0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fa0c 	bl	8008f10 <USB_GetMode>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d005      	beq.n	8008b0a <USB_SetCurrentMode+0x84>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2bc7      	cmp	r3, #199	@ 0xc7
 8008b02:	d9f0      	bls.n	8008ae6 <USB_SetCurrentMode+0x60>
 8008b04:	e001      	b.n	8008b0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e005      	b.n	8008b16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8008b0e:	d101      	bne.n	8008b14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e000      	b.n	8008b16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
	...

08008b20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b20:	b084      	sub	sp, #16
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	e009      	b.n	8008b54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3340      	adds	r3, #64	@ 0x40
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	3301      	adds	r3, #1
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b0e      	cmp	r3, #14
 8008b58:	d9f2      	bls.n	8008b40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d11c      	bne.n	8008b9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b70:	f043 0302 	orr.w	r3, r3, #2
 8008b74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	e005      	b.n	8008ba8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bae:	461a      	mov	r2, r3
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d10d      	bne.n	8008bd8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d104      	bne.n	8008bce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 f968 	bl	8008e9c <USB_SetDevSpeed>
 8008bcc:	e008      	b.n	8008be0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008bce:	2101      	movs	r1, #1
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f963 	bl	8008e9c <USB_SetDevSpeed>
 8008bd6:	e003      	b.n	8008be0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008bd8:	2103      	movs	r1, #3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f95e 	bl	8008e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008be0:	2110      	movs	r1, #16
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8fa 	bl	8008ddc <USB_FlushTxFifo>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f924 	bl	8008e40 <USB_FlushRxFifo>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c14:	461a      	mov	r2, r3
 8008c16:	2300      	movs	r3, #0
 8008c18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c20:	461a      	mov	r2, r3
 8008c22:	2300      	movs	r3, #0
 8008c24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	e043      	b.n	8008cb4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c42:	d118      	bne.n	8008c76 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c56:	461a      	mov	r2, r3
 8008c58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008c5c:	6013      	str	r3, [r2, #0]
 8008c5e:	e013      	b.n	8008c88 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	e008      	b.n	8008c88 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c82:	461a      	mov	r2, r3
 8008c84:	2300      	movs	r3, #0
 8008c86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c94:	461a      	mov	r2, r3
 8008c96:	2300      	movs	r3, #0
 8008c98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008cac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	613b      	str	r3, [r7, #16]
 8008cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008cb8:	461a      	mov	r2, r3
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d3b5      	bcc.n	8008c2c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	e043      	b.n	8008d4e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cdc:	d118      	bne.n	8008d10 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	e013      	b.n	8008d22 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d06:	461a      	mov	r2, r3
 8008d08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	e008      	b.n	8008d22 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2300      	movs	r3, #0
 8008d32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d40:	461a      	mov	r2, r3
 8008d42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008d46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008d52:	461a      	mov	r2, r3
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d3b5      	bcc.n	8008cc6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008d7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d105      	bne.n	8008d90 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	f043 0210 	orr.w	r2, r3, #16
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <USB_DevInit+0x2b4>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008d9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	f043 0208 	orr.w	r2, r3, #8
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008db0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d105      	bne.n	8008dc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	4b06      	ldr	r3, [pc, #24]	@ (8008dd8 <USB_DevInit+0x2b8>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dd0:	b004      	add	sp, #16
 8008dd2:	4770      	bx	lr
 8008dd4:	803c3800 	.word	0x803c3800
 8008dd8:	40000004 	.word	0x40000004

08008ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008df6:	d901      	bls.n	8008dfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e01b      	b.n	8008e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	daf2      	bge.n	8008dea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	019b      	lsls	r3, r3, #6
 8008e0c:	f043 0220 	orr.w	r2, r3, #32
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e20:	d901      	bls.n	8008e26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e006      	b.n	8008e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	d0f0      	beq.n	8008e14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e58:	d901      	bls.n	8008e5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008e5a:	2303      	movs	r3, #3
 8008e5c:	e018      	b.n	8008e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	daf2      	bge.n	8008e4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2210      	movs	r2, #16
 8008e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e7c:	d901      	bls.n	8008e82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e006      	b.n	8008e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	f003 0310 	and.w	r3, r3, #16
 8008e8a:	2b10      	cmp	r3, #16
 8008e8c:	d0f0      	beq.n	8008e70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	68f9      	ldr	r1, [r7, #12]
 8008eb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ee8:	f023 0303 	bic.w	r3, r3, #3
 8008eec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008efc:	f043 0302 	orr.w	r3, r3, #2
 8008f00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3714      	adds	r7, #20
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	f003 0301 	and.w	r3, r3, #1
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f44:	d901      	bls.n	8008f4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f46:	2303      	movs	r3, #3
 8008f48:	e01b      	b.n	8008f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	daf2      	bge.n	8008f38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	f043 0201 	orr.w	r2, r3, #1
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f6e:	d901      	bls.n	8008f74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e006      	b.n	8008f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d0f0      	beq.n	8008f62 <USB_CoreReset+0x36>

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
	...

08008f90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008f94:	4904      	ldr	r1, [pc, #16]	@ (8008fa8 <MX_FATFS_Init+0x18>)
 8008f96:	4805      	ldr	r0, [pc, #20]	@ (8008fac <MX_FATFS_Init+0x1c>)
 8008f98:	f003 f996 	bl	800c2c8 <FATFS_LinkDriver>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	4b03      	ldr	r3, [pc, #12]	@ (8008fb0 <MX_FATFS_Init+0x20>)
 8008fa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008fa4:	bf00      	nop
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20002f64 	.word	0x20002f64
 8008fac:	20000064 	.word	0x20000064
 8008fb0:	20002f60 	.word	0x20002f60

08008fb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008fb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8008fce:	79fb      	ldrb	r3, [r7, #7]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f9 f8bb 	bl	800214c <SD_disk_initialize>
 8008fd6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8008fea:	79fb      	ldrb	r3, [r7, #7]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7f9 f997 	bl	8002320 <SD_disk_status>
 8008ff2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800900c:	7bf8      	ldrb	r0, [r7, #15]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	68b9      	ldr	r1, [r7, #8]
 8009014:	f7f9 f99a 	bl	800234c <SD_disk_read>
 8009018:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
 800902e:	4603      	mov	r3, r0
 8009030:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8009032:	7bf8      	ldrb	r0, [r7, #15]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	68b9      	ldr	r1, [r7, #8]
 800903a:	f7f9 f9f1 	bl	8002420 <SD_disk_write>
 800903e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	4603      	mov	r3, r0
 8009050:	603a      	str	r2, [r7, #0]
 8009052:	71fb      	strb	r3, [r7, #7]
 8009054:	460b      	mov	r3, r1
 8009056:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8009058:	79b9      	ldrb	r1, [r7, #6]
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f7f9 fa62 	bl	8002528 <SD_disk_ioctl>
 8009064:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	4a08      	ldr	r2, [pc, #32]	@ (80090a0 <disk_status+0x30>)
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	79fa      	ldrb	r2, [r7, #7]
 8009088:	4905      	ldr	r1, [pc, #20]	@ (80090a0 <disk_status+0x30>)
 800908a:	440a      	add	r2, r1
 800908c:	7a12      	ldrb	r2, [r2, #8]
 800908e:	4610      	mov	r0, r2
 8009090:	4798      	blx	r3
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20003190 	.word	0x20003190

080090a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	4a0d      	ldr	r2, [pc, #52]	@ (80090ec <disk_initialize+0x48>)
 80090b6:	5cd3      	ldrb	r3, [r2, r3]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d111      	bne.n	80090e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	4a0b      	ldr	r2, [pc, #44]	@ (80090ec <disk_initialize+0x48>)
 80090c0:	2101      	movs	r1, #1
 80090c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	4a09      	ldr	r2, [pc, #36]	@ (80090ec <disk_initialize+0x48>)
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	79fa      	ldrb	r2, [r7, #7]
 80090d2:	4906      	ldr	r1, [pc, #24]	@ (80090ec <disk_initialize+0x48>)
 80090d4:	440a      	add	r2, r1
 80090d6:	7a12      	ldrb	r2, [r2, #8]
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	20003190 	.word	0x20003190

080090f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b087      	sub	sp, #28
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	607a      	str	r2, [r7, #4]
 80090fa:	603b      	str	r3, [r7, #0]
 80090fc:	4603      	mov	r3, r0
 80090fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	4a0a      	ldr	r2, [pc, #40]	@ (800912c <disk_read+0x3c>)
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	689c      	ldr	r4, [r3, #8]
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	4a07      	ldr	r2, [pc, #28]	@ (800912c <disk_read+0x3c>)
 8009110:	4413      	add	r3, r2
 8009112:	7a18      	ldrb	r0, [r3, #8]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	68b9      	ldr	r1, [r7, #8]
 800911a:	47a0      	blx	r4
 800911c:	4603      	mov	r3, r0
 800911e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
}
 8009122:	4618      	mov	r0, r3
 8009124:	371c      	adds	r7, #28
 8009126:	46bd      	mov	sp, r7
 8009128:	bd90      	pop	{r4, r7, pc}
 800912a:	bf00      	nop
 800912c:	20003190 	.word	0x20003190

08009130 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009130:	b590      	push	{r4, r7, lr}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	60b9      	str	r1, [r7, #8]
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	4a0a      	ldr	r2, [pc, #40]	@ (800916c <disk_write+0x3c>)
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	68dc      	ldr	r4, [r3, #12]
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4a07      	ldr	r2, [pc, #28]	@ (800916c <disk_write+0x3c>)
 8009150:	4413      	add	r3, r2
 8009152:	7a18      	ldrb	r0, [r3, #8]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	47a0      	blx	r4
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	bd90      	pop	{r4, r7, pc}
 800916a:	bf00      	nop
 800916c:	20003190 	.word	0x20003190

08009170 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	603a      	str	r2, [r7, #0]
 800917a:	71fb      	strb	r3, [r7, #7]
 800917c:	460b      	mov	r3, r1
 800917e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	4a09      	ldr	r2, [pc, #36]	@ (80091a8 <disk_ioctl+0x38>)
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	79fa      	ldrb	r2, [r7, #7]
 800918e:	4906      	ldr	r1, [pc, #24]	@ (80091a8 <disk_ioctl+0x38>)
 8009190:	440a      	add	r2, r1
 8009192:	7a10      	ldrb	r0, [r2, #8]
 8009194:	79b9      	ldrb	r1, [r7, #6]
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	4798      	blx	r3
 800919a:	4603      	mov	r3, r0
 800919c:	73fb      	strb	r3, [r7, #15]
  return res;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20003190 	.word	0x20003190

080091ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3301      	adds	r3, #1
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80091bc:	89fb      	ldrh	r3, [r7, #14]
 80091be:	021b      	lsls	r3, r3, #8
 80091c0:	b21a      	sxth	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	b21b      	sxth	r3, r3
 80091c8:	4313      	orrs	r3, r2
 80091ca:	b21b      	sxth	r3, r3
 80091cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80091ce:	89fb      	ldrh	r3, [r7, #14]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3714      	adds	r7, #20
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3303      	adds	r3, #3
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	021b      	lsls	r3, r3, #8
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	3202      	adds	r2, #2
 80091f4:	7812      	ldrb	r2, [r2, #0]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	021b      	lsls	r3, r3, #8
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	3201      	adds	r2, #1
 8009202:	7812      	ldrb	r2, [r2, #0]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	021b      	lsls	r3, r3, #8
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	7812      	ldrb	r2, [r2, #0]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
	return rv;
 8009214:	68fb      	ldr	r3, [r7, #12]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009222:	b480      	push	{r7}
 8009224:	b083      	sub	sp, #12
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	1c5a      	adds	r2, r3, #1
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	887a      	ldrh	r2, [r7, #2]
 8009236:	b2d2      	uxtb	r2, r2
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	887b      	ldrh	r3, [r7, #2]
 800923c:	0a1b      	lsrs	r3, r3, #8
 800923e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	607a      	str	r2, [r7, #4]
 8009246:	887a      	ldrh	r2, [r7, #2]
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	701a      	strb	r2, [r3, #0]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	701a      	strb	r2, [r3, #0]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	0a1b      	lsrs	r3, r3, #8
 8009284:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	b2d2      	uxtb	r2, r2
 8009290:	701a      	strb	r2, [r3, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	0a1b      	lsrs	r3, r3, #8
 8009296:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	701a      	strb	r2, [r3, #0]
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00d      	beq.n	80092e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	1c53      	adds	r3, r2, #1
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	1c59      	adds	r1, r3, #1
 80092d4:	6179      	str	r1, [r7, #20]
 80092d6:	7812      	ldrb	r2, [r2, #0]
 80092d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	3b01      	subs	r3, #1
 80092de:	607b      	str	r3, [r7, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1f1      	bne.n	80092ca <mem_cpy+0x1a>
	}
}
 80092e6:	bf00      	nop
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092f2:	b480      	push	{r7}
 80092f4:	b087      	sub	sp, #28
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	617a      	str	r2, [r7, #20]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	3b01      	subs	r3, #1
 8009312:	607b      	str	r3, [r7, #4]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1f3      	bne.n	8009302 <mem_set+0x10>
}
 800931a:	bf00      	nop
 800931c:	bf00      	nop
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009328:	b480      	push	{r7}
 800932a:	b089      	sub	sp, #36	@ 0x24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	61fb      	str	r3, [r7, #28]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	61fa      	str	r2, [r7, #28]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	4619      	mov	r1, r3
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	61ba      	str	r2, [r7, #24]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	1acb      	subs	r3, r1, r3
 8009354:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	3b01      	subs	r3, #1
 800935a:	607b      	str	r3, [r7, #4]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <mem_cmp+0x40>
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0eb      	beq.n	8009340 <mem_cmp+0x18>

	return r;
 8009368:	697b      	ldr	r3, [r7, #20]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3724      	adds	r7, #36	@ 0x24
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009380:	e002      	b.n	8009388 <chk_chr+0x12>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3301      	adds	r3, #1
 8009386:	607b      	str	r3, [r7, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d005      	beq.n	800939c <chk_chr+0x26>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	4293      	cmp	r3, r2
 800939a:	d1f2      	bne.n	8009382 <chk_chr+0xc>
	return *str;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	781b      	ldrb	r3, [r3, #0]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	e029      	b.n	8009414 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80093c0:	4a27      	ldr	r2, [pc, #156]	@ (8009460 <chk_lock+0xb4>)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	4413      	add	r3, r2
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d01d      	beq.n	800940a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093ce:	4a24      	ldr	r2, [pc, #144]	@ (8009460 <chk_lock+0xb4>)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	4413      	add	r3, r2
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d116      	bne.n	800940e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80093e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009460 <chk_lock+0xb4>)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	4413      	add	r3, r2
 80093e8:	3304      	adds	r3, #4
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d10c      	bne.n	800940e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80093f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009460 <chk_lock+0xb4>)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	011b      	lsls	r3, r3, #4
 80093fa:	4413      	add	r3, r2
 80093fc:	3308      	adds	r3, #8
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009404:	429a      	cmp	r2, r3
 8009406:	d102      	bne.n	800940e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009408:	e007      	b.n	800941a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800940a:	2301      	movs	r3, #1
 800940c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d9d2      	bls.n	80093c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b02      	cmp	r3, #2
 800941e:	d109      	bne.n	8009434 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <chk_lock+0x80>
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b02      	cmp	r3, #2
 800942a:	d101      	bne.n	8009430 <chk_lock+0x84>
 800942c:	2300      	movs	r3, #0
 800942e:	e010      	b.n	8009452 <chk_lock+0xa6>
 8009430:	2312      	movs	r3, #18
 8009432:	e00e      	b.n	8009452 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d108      	bne.n	800944c <chk_lock+0xa0>
 800943a:	4a09      	ldr	r2, [pc, #36]	@ (8009460 <chk_lock+0xb4>)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	4413      	add	r3, r2
 8009442:	330c      	adds	r3, #12
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800944a:	d101      	bne.n	8009450 <chk_lock+0xa4>
 800944c:	2310      	movs	r3, #16
 800944e:	e000      	b.n	8009452 <chk_lock+0xa6>
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	20002f70 	.word	0x20002f70

08009464 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800946a:	2300      	movs	r3, #0
 800946c:	607b      	str	r3, [r7, #4]
 800946e:	e002      	b.n	8009476 <enq_lock+0x12>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3301      	adds	r3, #1
 8009474:	607b      	str	r3, [r7, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d806      	bhi.n	800948a <enq_lock+0x26>
 800947c:	4a09      	ldr	r2, [pc, #36]	@ (80094a4 <enq_lock+0x40>)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	011b      	lsls	r3, r3, #4
 8009482:	4413      	add	r3, r2
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1f2      	bne.n	8009470 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b02      	cmp	r3, #2
 800948e:	bf14      	ite	ne
 8009490:	2301      	movne	r3, #1
 8009492:	2300      	moveq	r3, #0
 8009494:	b2db      	uxtb	r3, r3
}
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	20002f70 	.word	0x20002f70

080094a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094b2:	2300      	movs	r3, #0
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	e01f      	b.n	80094f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80094b8:	4a41      	ldr	r2, [pc, #260]	@ (80095c0 <inc_lock+0x118>)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	4413      	add	r3, r2
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d113      	bne.n	80094f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80094ca:	4a3d      	ldr	r2, [pc, #244]	@ (80095c0 <inc_lock+0x118>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	011b      	lsls	r3, r3, #4
 80094d0:	4413      	add	r3, r2
 80094d2:	3304      	adds	r3, #4
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80094da:	429a      	cmp	r2, r3
 80094dc:	d109      	bne.n	80094f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80094de:	4a38      	ldr	r2, [pc, #224]	@ (80095c0 <inc_lock+0x118>)
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	4413      	add	r3, r2
 80094e6:	3308      	adds	r3, #8
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d006      	beq.n	8009500 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3301      	adds	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d9dc      	bls.n	80094b8 <inc_lock+0x10>
 80094fe:	e000      	b.n	8009502 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009500:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d132      	bne.n	800956e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e002      	b.n	8009514 <inc_lock+0x6c>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d806      	bhi.n	8009528 <inc_lock+0x80>
 800951a:	4a29      	ldr	r2, [pc, #164]	@ (80095c0 <inc_lock+0x118>)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	4413      	add	r3, r2
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1f2      	bne.n	800950e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d101      	bne.n	8009532 <inc_lock+0x8a>
 800952e:	2300      	movs	r3, #0
 8009530:	e040      	b.n	80095b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4922      	ldr	r1, [pc, #136]	@ (80095c0 <inc_lock+0x118>)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	440b      	add	r3, r1
 800953e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	491e      	ldr	r1, [pc, #120]	@ (80095c0 <inc_lock+0x118>)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	011b      	lsls	r3, r3, #4
 800954a:	440b      	add	r3, r1
 800954c:	3304      	adds	r3, #4
 800954e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	695a      	ldr	r2, [r3, #20]
 8009554:	491a      	ldr	r1, [pc, #104]	@ (80095c0 <inc_lock+0x118>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	440b      	add	r3, r1
 800955c:	3308      	adds	r3, #8
 800955e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009560:	4a17      	ldr	r2, [pc, #92]	@ (80095c0 <inc_lock+0x118>)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	4413      	add	r3, r2
 8009568:	330c      	adds	r3, #12
 800956a:	2200      	movs	r2, #0
 800956c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d009      	beq.n	8009588 <inc_lock+0xe0>
 8009574:	4a12      	ldr	r2, [pc, #72]	@ (80095c0 <inc_lock+0x118>)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	011b      	lsls	r3, r3, #4
 800957a:	4413      	add	r3, r2
 800957c:	330c      	adds	r3, #12
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <inc_lock+0xe0>
 8009584:	2300      	movs	r3, #0
 8009586:	e015      	b.n	80095b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d108      	bne.n	80095a0 <inc_lock+0xf8>
 800958e:	4a0c      	ldr	r2, [pc, #48]	@ (80095c0 <inc_lock+0x118>)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	4413      	add	r3, r2
 8009596:	330c      	adds	r3, #12
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	e001      	b.n	80095a4 <inc_lock+0xfc>
 80095a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095a4:	4906      	ldr	r1, [pc, #24]	@ (80095c0 <inc_lock+0x118>)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	011b      	lsls	r3, r3, #4
 80095aa:	440b      	add	r3, r1
 80095ac:	330c      	adds	r3, #12
 80095ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3301      	adds	r3, #1
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	20002f70 	.word	0x20002f70

080095c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3b01      	subs	r3, #1
 80095d0:	607b      	str	r3, [r7, #4]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d825      	bhi.n	8009624 <dec_lock+0x60>
		n = Files[i].ctr;
 80095d8:	4a17      	ldr	r2, [pc, #92]	@ (8009638 <dec_lock+0x74>)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	011b      	lsls	r3, r3, #4
 80095de:	4413      	add	r3, r2
 80095e0:	330c      	adds	r3, #12
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80095e6:	89fb      	ldrh	r3, [r7, #14]
 80095e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ec:	d101      	bne.n	80095f2 <dec_lock+0x2e>
 80095ee:	2300      	movs	r3, #0
 80095f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80095f2:	89fb      	ldrh	r3, [r7, #14]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <dec_lock+0x3a>
 80095f8:	89fb      	ldrh	r3, [r7, #14]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80095fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009638 <dec_lock+0x74>)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	4413      	add	r3, r2
 8009606:	330c      	adds	r3, #12
 8009608:	89fa      	ldrh	r2, [r7, #14]
 800960a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800960c:	89fb      	ldrh	r3, [r7, #14]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d105      	bne.n	800961e <dec_lock+0x5a>
 8009612:	4a09      	ldr	r2, [pc, #36]	@ (8009638 <dec_lock+0x74>)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	4413      	add	r3, r2
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	737b      	strb	r3, [r7, #13]
 8009622:	e001      	b.n	8009628 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009624:	2302      	movs	r3, #2
 8009626:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009628:	7b7b      	ldrb	r3, [r7, #13]
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20002f70 	.word	0x20002f70

0800963c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	e010      	b.n	800966c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800964a:	4a0d      	ldr	r2, [pc, #52]	@ (8009680 <clear_lock+0x44>)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	011b      	lsls	r3, r3, #4
 8009650:	4413      	add	r3, r2
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d105      	bne.n	8009666 <clear_lock+0x2a>
 800965a:	4a09      	ldr	r2, [pc, #36]	@ (8009680 <clear_lock+0x44>)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	4413      	add	r3, r2
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d9eb      	bls.n	800964a <clear_lock+0xe>
	}
}
 8009672:	bf00      	nop
 8009674:	bf00      	nop
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20002f70 	.word	0x20002f70

08009684 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	78db      	ldrb	r3, [r3, #3]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d034      	beq.n	8009702 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	7858      	ldrb	r0, [r3, #1]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80096a8:	2301      	movs	r3, #1
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	f7ff fd40 	bl	8009130 <disk_write>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	e022      	b.n	8009702 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	1ad2      	subs	r2, r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d217      	bcs.n	8009702 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	789b      	ldrb	r3, [r3, #2]
 80096d6:	613b      	str	r3, [r7, #16]
 80096d8:	e010      	b.n	80096fc <sync_window+0x78>
					wsect += fs->fsize;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	4413      	add	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	7858      	ldrb	r0, [r3, #1]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80096ee:	2301      	movs	r3, #1
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	f7ff fd1d 	bl	8009130 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	613b      	str	r3, [r7, #16]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d8eb      	bhi.n	80096da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	429a      	cmp	r2, r3
 8009722:	d01b      	beq.n	800975c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff ffad 	bl	8009684 <sync_window>
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d113      	bne.n	800975c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	7858      	ldrb	r0, [r3, #1]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800973e:	2301      	movs	r3, #1
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	f7ff fcd5 	bl	80090f0 <disk_read>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800974c:	f04f 33ff 	mov.w	r3, #4294967295
 8009750:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009752:	2301      	movs	r3, #1
 8009754:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ff87 	bl	8009684 <sync_window>
 8009776:	4603      	mov	r3, r0
 8009778:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800977a:	7bfb      	ldrb	r3, [r7, #15]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d159      	bne.n	8009834 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d149      	bne.n	800981c <sync_fs+0xb4>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	791b      	ldrb	r3, [r3, #4]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d145      	bne.n	800981c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	899b      	ldrh	r3, [r3, #12]
 800979a:	461a      	mov	r2, r3
 800979c:	2100      	movs	r1, #0
 800979e:	f7ff fda8 	bl	80092f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3338      	adds	r3, #56	@ 0x38
 80097a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80097aa:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fd37 	bl	8009222 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3338      	adds	r3, #56	@ 0x38
 80097b8:	4921      	ldr	r1, [pc, #132]	@ (8009840 <sync_fs+0xd8>)
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff fd4c 	bl	8009258 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3338      	adds	r3, #56	@ 0x38
 80097c4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80097c8:	491e      	ldr	r1, [pc, #120]	@ (8009844 <sync_fs+0xdc>)
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff fd44 	bl	8009258 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3338      	adds	r3, #56	@ 0x38
 80097d4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	4619      	mov	r1, r3
 80097de:	4610      	mov	r0, r2
 80097e0:	f7ff fd3a 	bl	8009258 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3338      	adds	r3, #56	@ 0x38
 80097e8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f7ff fd30 	bl	8009258 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	7858      	ldrb	r0, [r3, #1]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009810:	2301      	movs	r3, #1
 8009812:	f7ff fc8d 	bl	8009130 <disk_write>
			fs->fsi_flag = 0;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	785b      	ldrb	r3, [r3, #1]
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fca3 	bl	8009170 <disk_ioctl>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <sync_fs+0xcc>
 8009830:	2301      	movs	r3, #1
 8009832:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	41615252 	.word	0x41615252
 8009844:	61417272 	.word	0x61417272

08009848 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	3b02      	subs	r3, #2
 8009856:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	3b02      	subs	r3, #2
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	429a      	cmp	r2, r3
 8009862:	d301      	bcc.n	8009868 <clust2sect+0x20>
 8009864:	2300      	movs	r3, #0
 8009866:	e008      	b.n	800987a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	895b      	ldrh	r3, [r3, #10]
 800986c:	461a      	mov	r2, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	fb03 f202 	mul.w	r2, r3, r2
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009878:	4413      	add	r3, r2
}
 800987a:	4618      	mov	r0, r3
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b086      	sub	sp, #24
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b01      	cmp	r3, #1
 800989a:	d904      	bls.n	80098a6 <get_fat+0x20>
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	69db      	ldr	r3, [r3, #28]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d302      	bcc.n	80098ac <get_fat+0x26>
		val = 1;	/* Internal error */
 80098a6:	2301      	movs	r3, #1
 80098a8:	617b      	str	r3, [r7, #20]
 80098aa:	e0ba      	b.n	8009a22 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
 80098b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	f000 8082 	beq.w	80099c0 <get_fat+0x13a>
 80098bc:	2b03      	cmp	r3, #3
 80098be:	f300 80a6 	bgt.w	8009a0e <get_fat+0x188>
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d002      	beq.n	80098cc <get_fat+0x46>
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d055      	beq.n	8009976 <get_fat+0xf0>
 80098ca:	e0a0      	b.n	8009a0e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	899b      	ldrh	r3, [r3, #12]
 80098e2:	4619      	mov	r1, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ea:	4413      	add	r3, r2
 80098ec:	4619      	mov	r1, r3
 80098ee:	6938      	ldr	r0, [r7, #16]
 80098f0:	f7ff ff0c 	bl	800970c <move_window>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f040 808c 	bne.w	8009a14 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	60fa      	str	r2, [r7, #12]
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	8992      	ldrh	r2, [r2, #12]
 8009906:	fbb3 f1f2 	udiv	r1, r3, r2
 800990a:	fb01 f202 	mul.w	r2, r1, r2
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	4413      	add	r3, r2
 8009914:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009918:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	899b      	ldrh	r3, [r3, #12]
 8009922:	4619      	mov	r1, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	fbb3 f3f1 	udiv	r3, r3, r1
 800992a:	4413      	add	r3, r2
 800992c:	4619      	mov	r1, r3
 800992e:	6938      	ldr	r0, [r7, #16]
 8009930:	f7ff feec 	bl	800970c <move_window>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d16e      	bne.n	8009a18 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	899b      	ldrh	r3, [r3, #12]
 800993e:	461a      	mov	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	fbb3 f1f2 	udiv	r1, r3, r2
 8009946:	fb01 f202 	mul.w	r2, r1, r2
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	4413      	add	r3, r2
 8009950:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009954:	021b      	lsls	r3, r3, #8
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	4313      	orrs	r3, r2
 800995a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <get_fat+0xe6>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	091b      	lsrs	r3, r3, #4
 800996a:	e002      	b.n	8009972 <get_fat+0xec>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009972:	617b      	str	r3, [r7, #20]
			break;
 8009974:	e055      	b.n	8009a22 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	899b      	ldrh	r3, [r3, #12]
 800997e:	085b      	lsrs	r3, r3, #1
 8009980:	b29b      	uxth	r3, r3
 8009982:	4619      	mov	r1, r3
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	fbb3 f3f1 	udiv	r3, r3, r1
 800998a:	4413      	add	r3, r2
 800998c:	4619      	mov	r1, r3
 800998e:	6938      	ldr	r0, [r7, #16]
 8009990:	f7ff febc 	bl	800970c <move_window>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d140      	bne.n	8009a1c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	8992      	ldrh	r2, [r2, #12]
 80099a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80099ac:	fb00 f202 	mul.w	r2, r0, r2
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	440b      	add	r3, r1
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff fbf9 	bl	80091ac <ld_word>
 80099ba:	4603      	mov	r3, r0
 80099bc:	617b      	str	r3, [r7, #20]
			break;
 80099be:	e030      	b.n	8009a22 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	899b      	ldrh	r3, [r3, #12]
 80099c8:	089b      	lsrs	r3, r3, #2
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	4619      	mov	r1, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80099d4:	4413      	add	r3, r2
 80099d6:	4619      	mov	r1, r3
 80099d8:	6938      	ldr	r0, [r7, #16]
 80099da:	f7ff fe97 	bl	800970c <move_window>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d11d      	bne.n	8009a20 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	8992      	ldrh	r2, [r2, #12]
 80099f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80099f6:	fb00 f202 	mul.w	r2, r0, r2
 80099fa:	1a9b      	subs	r3, r3, r2
 80099fc:	440b      	add	r3, r1
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7ff fbec 	bl	80091dc <ld_dword>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009a0a:	617b      	str	r3, [r7, #20]
			break;
 8009a0c:	e009      	b.n	8009a22 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009a0e:	2301      	movs	r3, #1
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	e006      	b.n	8009a22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a14:	bf00      	nop
 8009a16:	e004      	b.n	8009a22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009a18:	bf00      	nop
 8009a1a:	e002      	b.n	8009a22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009a1c:	bf00      	nop
 8009a1e:	e000      	b.n	8009a22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009a20:	bf00      	nop
		}
	}

	return val;
 8009a22:	697b      	ldr	r3, [r7, #20]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009a2c:	b590      	push	{r4, r7, lr}
 8009a2e:	b089      	sub	sp, #36	@ 0x24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009a38:	2302      	movs	r3, #2
 8009a3a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	f240 8109 	bls.w	8009c56 <put_fat+0x22a>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	f080 8103 	bcs.w	8009c56 <put_fat+0x22a>
		switch (fs->fs_type) {
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	f000 80b6 	beq.w	8009bc6 <put_fat+0x19a>
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	f300 80fb 	bgt.w	8009c56 <put_fat+0x22a>
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d003      	beq.n	8009a6c <put_fat+0x40>
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	f000 8083 	beq.w	8009b70 <put_fat+0x144>
 8009a6a:	e0f4      	b.n	8009c56 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	61bb      	str	r3, [r7, #24]
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	4413      	add	r3, r2
 8009a78:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	899b      	ldrh	r3, [r3, #12]
 8009a82:	4619      	mov	r1, r3
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a8a:	4413      	add	r3, r2
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff fe3c 	bl	800970c <move_window>
 8009a94:	4603      	mov	r3, r0
 8009a96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a98:	7ffb      	ldrb	r3, [r7, #31]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 80d4 	bne.w	8009c48 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	61ba      	str	r2, [r7, #24]
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	8992      	ldrh	r2, [r2, #12]
 8009ab0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ab4:	fb00 f202 	mul.w	r2, r0, r2
 8009ab8:	1a9b      	subs	r3, r3, r2
 8009aba:	440b      	add	r3, r1
 8009abc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00d      	beq.n	8009ae4 <put_fat+0xb8>
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	b25b      	sxtb	r3, r3
 8009ace:	f003 030f 	and.w	r3, r3, #15
 8009ad2:	b25a      	sxtb	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	b25b      	sxtb	r3, r3
 8009adc:	4313      	orrs	r3, r2
 8009ade:	b25b      	sxtb	r3, r3
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	e001      	b.n	8009ae8 <put_fat+0xbc>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	899b      	ldrh	r3, [r3, #12]
 8009afa:	4619      	mov	r1, r3
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b02:	4413      	add	r3, r2
 8009b04:	4619      	mov	r1, r3
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f7ff fe00 	bl	800970c <move_window>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b10:	7ffb      	ldrb	r3, [r7, #31]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f040 809a 	bne.w	8009c4c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	899b      	ldrh	r3, [r3, #12]
 8009b22:	461a      	mov	r2, r3
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b2a:	fb00 f202 	mul.w	r2, r0, r2
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	440b      	add	r3, r1
 8009b32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <put_fat+0x11a>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	091b      	lsrs	r3, r3, #4
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	e00e      	b.n	8009b64 <put_fat+0x138>
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b25b      	sxtb	r3, r3
 8009b4c:	f023 030f 	bic.w	r3, r3, #15
 8009b50:	b25a      	sxtb	r2, r3
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	0a1b      	lsrs	r3, r3, #8
 8009b56:	b25b      	sxtb	r3, r3
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	b25b      	sxtb	r3, r3
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	b25b      	sxtb	r3, r3
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	697a      	ldr	r2, [r7, #20]
 8009b66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	70da      	strb	r2, [r3, #3]
			break;
 8009b6e:	e072      	b.n	8009c56 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	899b      	ldrh	r3, [r3, #12]
 8009b78:	085b      	lsrs	r3, r3, #1
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b84:	4413      	add	r3, r2
 8009b86:	4619      	mov	r1, r3
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f7ff fdbf 	bl	800970c <move_window>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b92:	7ffb      	ldrb	r3, [r7, #31]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d15b      	bne.n	8009c50 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	8992      	ldrh	r2, [r2, #12]
 8009ba6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009baa:	fb00 f202 	mul.w	r2, r0, r2
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	440b      	add	r3, r1
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	b292      	uxth	r2, r2
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7ff fb32 	bl	8009222 <st_word>
			fs->wflag = 1;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	70da      	strb	r2, [r3, #3]
			break;
 8009bc4:	e047      	b.n	8009c56 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	899b      	ldrh	r3, [r3, #12]
 8009bce:	089b      	lsrs	r3, r3, #2
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bda:	4413      	add	r3, r2
 8009bdc:	4619      	mov	r1, r3
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f7ff fd94 	bl	800970c <move_window>
 8009be4:	4603      	mov	r3, r0
 8009be6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009be8:	7ffb      	ldrb	r3, [r7, #31]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d132      	bne.n	8009c54 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	8992      	ldrh	r2, [r2, #12]
 8009c02:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c06:	fb00 f202 	mul.w	r2, r0, r2
 8009c0a:	1a9b      	subs	r3, r3, r2
 8009c0c:	440b      	add	r3, r1
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff fae4 	bl	80091dc <ld_dword>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009c1a:	4323      	orrs	r3, r4
 8009c1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	8992      	ldrh	r2, [r2, #12]
 8009c2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c30:	fb00 f202 	mul.w	r2, r0, r2
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	440b      	add	r3, r1
 8009c38:	6879      	ldr	r1, [r7, #4]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff fb0c 	bl	8009258 <st_dword>
			fs->wflag = 1;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2201      	movs	r2, #1
 8009c44:	70da      	strb	r2, [r3, #3]
			break;
 8009c46:	e006      	b.n	8009c56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009c48:	bf00      	nop
 8009c4a:	e004      	b.n	8009c56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009c4c:	bf00      	nop
 8009c4e:	e002      	b.n	8009c56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009c50:	bf00      	nop
 8009c52:	e000      	b.n	8009c56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009c54:	bf00      	nop
		}
	}
	return res;
 8009c56:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3724      	adds	r7, #36	@ 0x24
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd90      	pop	{r4, r7, pc}

08009c60 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d904      	bls.n	8009c86 <remove_chain+0x26>
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	68ba      	ldr	r2, [r7, #8]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d301      	bcc.n	8009c8a <remove_chain+0x2a>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e04b      	b.n	8009d22 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009c90:	f04f 32ff 	mov.w	r2, #4294967295
 8009c94:	6879      	ldr	r1, [r7, #4]
 8009c96:	69b8      	ldr	r0, [r7, #24]
 8009c98:	f7ff fec8 	bl	8009a2c <put_fat>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009ca0:	7ffb      	ldrb	r3, [r7, #31]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <remove_chain+0x4a>
 8009ca6:	7ffb      	ldrb	r3, [r7, #31]
 8009ca8:	e03b      	b.n	8009d22 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009caa:	68b9      	ldr	r1, [r7, #8]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff fdea 	bl	8009886 <get_fat>
 8009cb2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d031      	beq.n	8009d1e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <remove_chain+0x64>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e02e      	b.n	8009d22 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d101      	bne.n	8009cd0 <remove_chain+0x70>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e028      	b.n	8009d22 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	69b8      	ldr	r0, [r7, #24]
 8009cd6:	f7ff fea9 	bl	8009a2c <put_fat>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009cde:	7ffb      	ldrb	r3, [r7, #31]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <remove_chain+0x88>
 8009ce4:	7ffb      	ldrb	r3, [r7, #31]
 8009ce6:	e01c      	b.n	8009d22 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	699a      	ldr	r2, [r3, #24]
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	3b02      	subs	r3, #2
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d20b      	bcs.n	8009d0e <remove_chain+0xae>
			fs->free_clst++;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	1c5a      	adds	r2, r3, #1
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	f043 0301 	orr.w	r3, r3, #1
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d3c6      	bcc.n	8009caa <remove_chain+0x4a>
 8009d1c:	e000      	b.n	8009d20 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009d1e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b088      	sub	sp, #32
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10d      	bne.n	8009d5c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <create_chain+0x2c>
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	69ba      	ldr	r2, [r7, #24]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d31b      	bcc.n	8009d8e <create_chain+0x64>
 8009d56:	2301      	movs	r3, #1
 8009d58:	61bb      	str	r3, [r7, #24]
 8009d5a:	e018      	b.n	8009d8e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fd91 	bl	8009886 <get_fat>
 8009d64:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d801      	bhi.n	8009d70 <create_chain+0x46>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e070      	b.n	8009e52 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d76:	d101      	bne.n	8009d7c <create_chain+0x52>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	e06a      	b.n	8009e52 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	69db      	ldr	r3, [r3, #28]
 8009d80:	68fa      	ldr	r2, [r7, #12]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d201      	bcs.n	8009d8a <create_chain+0x60>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	e063      	b.n	8009e52 <create_chain+0x128>
		scl = clst;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	3301      	adds	r3, #1
 8009d96:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	69db      	ldr	r3, [r3, #28]
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d307      	bcc.n	8009db2 <create_chain+0x88>
				ncl = 2;
 8009da2:	2302      	movs	r3, #2
 8009da4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d901      	bls.n	8009db2 <create_chain+0x88>
 8009dae:	2300      	movs	r3, #0
 8009db0:	e04f      	b.n	8009e52 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009db2:	69f9      	ldr	r1, [r7, #28]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff fd66 	bl	8009886 <get_fat>
 8009dba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00e      	beq.n	8009de0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d003      	beq.n	8009dd0 <create_chain+0xa6>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dce:	d101      	bne.n	8009dd4 <create_chain+0xaa>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	e03e      	b.n	8009e52 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009dd4:	69fa      	ldr	r2, [r7, #28]
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d1da      	bne.n	8009d92 <create_chain+0x68>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e038      	b.n	8009e52 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009de0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009de2:	f04f 32ff 	mov.w	r2, #4294967295
 8009de6:	69f9      	ldr	r1, [r7, #28]
 8009de8:	6938      	ldr	r0, [r7, #16]
 8009dea:	f7ff fe1f 	bl	8009a2c <put_fat>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d109      	bne.n	8009e0c <create_chain+0xe2>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d006      	beq.n	8009e0c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009dfe:	69fa      	ldr	r2, [r7, #28]
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6938      	ldr	r0, [r7, #16]
 8009e04:	f7ff fe12 	bl	8009a2c <put_fat>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d116      	bne.n	8009e40 <create_chain+0x116>
		fs->last_clst = ncl;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	699a      	ldr	r2, [r3, #24]
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	3b02      	subs	r3, #2
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d804      	bhi.n	8009e30 <create_chain+0x106>
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	1e5a      	subs	r2, r3, #1
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	791b      	ldrb	r3, [r3, #4]
 8009e34:	f043 0301 	orr.w	r3, r3, #1
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	711a      	strb	r2, [r3, #4]
 8009e3e:	e007      	b.n	8009e50 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d102      	bne.n	8009e4c <create_chain+0x122>
 8009e46:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4a:	e000      	b.n	8009e4e <create_chain+0x124>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009e50:	69fb      	ldr	r3, [r7, #28]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3720      	adds	r7, #32
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	3304      	adds	r3, #4
 8009e70:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	899b      	ldrh	r3, [r3, #12]
 8009e76:	461a      	mov	r2, r3
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	8952      	ldrh	r2, [r2, #10]
 8009e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e86:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	1d1a      	adds	r2, r3, #4
 8009e8c:	613a      	str	r2, [r7, #16]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <clmt_clust+0x42>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e010      	b.n	8009ebe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d307      	bcc.n	8009eb4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009eb2:	e7e9      	b.n	8009e88 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009eb4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	4413      	add	r3, r2
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ee0:	d204      	bcs.n	8009eec <dir_sdi+0x22>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	f003 031f 	and.w	r3, r3, #31
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009eec:	2302      	movs	r3, #2
 8009eee:	e071      	b.n	8009fd4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <dir_sdi+0x46>
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d902      	bls.n	8009f10 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10c      	bne.n	8009f30 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	8912      	ldrh	r2, [r2, #8]
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d301      	bcc.n	8009f26 <dir_sdi+0x5c>
 8009f22:	2302      	movs	r3, #2
 8009f24:	e056      	b.n	8009fd4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	61da      	str	r2, [r3, #28]
 8009f2e:	e02d      	b.n	8009f8c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	895b      	ldrh	r3, [r3, #10]
 8009f34:	461a      	mov	r2, r3
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	899b      	ldrh	r3, [r3, #12]
 8009f3a:	fb02 f303 	mul.w	r3, r2, r3
 8009f3e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009f40:	e019      	b.n	8009f76 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6979      	ldr	r1, [r7, #20]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff fc9d 	bl	8009886 <get_fat>
 8009f4c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f54:	d101      	bne.n	8009f5a <dir_sdi+0x90>
 8009f56:	2301      	movs	r3, #1
 8009f58:	e03c      	b.n	8009fd4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d904      	bls.n	8009f6a <dir_sdi+0xa0>
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d301      	bcc.n	8009f6e <dir_sdi+0xa4>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e032      	b.n	8009fd4 <dir_sdi+0x10a>
			ofs -= csz;
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d2e1      	bcs.n	8009f42 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009f7e:	6979      	ldr	r1, [r7, #20]
 8009f80:	6938      	ldr	r0, [r7, #16]
 8009f82:	f7ff fc61 	bl	8009848 <clust2sect>
 8009f86:	4602      	mov	r2, r0
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <dir_sdi+0xd4>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e01a      	b.n	8009fd4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	69da      	ldr	r2, [r3, #28]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	899b      	ldrh	r3, [r3, #12]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fae:	441a      	add	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	899b      	ldrh	r3, [r3, #12]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fc6:	fb00 f202 	mul.w	r2, r0, r2
 8009fca:	1a9b      	subs	r3, r3, r2
 8009fcc:	18ca      	adds	r2, r1, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	3320      	adds	r3, #32
 8009ff2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <dir_next+0x28>
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a002:	d301      	bcc.n	800a008 <dir_next+0x2c>
 800a004:	2304      	movs	r3, #4
 800a006:	e0bb      	b.n	800a180 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	899b      	ldrh	r3, [r3, #12]
 800a00c:	461a      	mov	r2, r3
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	fbb3 f1f2 	udiv	r1, r3, r2
 800a014:	fb01 f202 	mul.w	r2, r1, r2
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f040 809d 	bne.w	800a15a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	095b      	lsrs	r3, r3, #5
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	8912      	ldrh	r2, [r2, #8]
 800a03a:	4293      	cmp	r3, r2
 800a03c:	f0c0 808d 	bcc.w	800a15a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	61da      	str	r2, [r3, #28]
 800a046:	2304      	movs	r3, #4
 800a048:	e09a      	b.n	800a180 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	899b      	ldrh	r3, [r3, #12]
 800a04e:	461a      	mov	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	fbb3 f3f2 	udiv	r3, r3, r2
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	8952      	ldrh	r2, [r2, #10]
 800a05a:	3a01      	subs	r2, #1
 800a05c:	4013      	ands	r3, r2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d17b      	bne.n	800a15a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	4619      	mov	r1, r3
 800a06a:	4610      	mov	r0, r2
 800a06c:	f7ff fc0b 	bl	8009886 <get_fat>
 800a070:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d801      	bhi.n	800a07c <dir_next+0xa0>
 800a078:	2302      	movs	r3, #2
 800a07a:	e081      	b.n	800a180 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a082:	d101      	bne.n	800a088 <dir_next+0xac>
 800a084:	2301      	movs	r3, #1
 800a086:	e07b      	b.n	800a180 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d359      	bcc.n	800a146 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d104      	bne.n	800a0a2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	61da      	str	r2, [r3, #28]
 800a09e:	2304      	movs	r3, #4
 800a0a0:	e06e      	b.n	800a180 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f7ff fe3d 	bl	8009d2a <create_chain>
 800a0b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <dir_next+0xe0>
 800a0b8:	2307      	movs	r3, #7
 800a0ba:	e061      	b.n	800a180 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d101      	bne.n	800a0c6 <dir_next+0xea>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e05c      	b.n	800a180 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0cc:	d101      	bne.n	800a0d2 <dir_next+0xf6>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e056      	b.n	800a180 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a0d2:	68f8      	ldr	r0, [r7, #12]
 800a0d4:	f7ff fad6 	bl	8009684 <sync_window>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <dir_next+0x106>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e04e      	b.n	800a180 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	899b      	ldrh	r3, [r3, #12]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	f7ff f8ff 	bl	80092f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	6979      	ldr	r1, [r7, #20]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f7ff fba4 	bl	8009848 <clust2sect>
 800a100:	4602      	mov	r2, r0
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	635a      	str	r2, [r3, #52]	@ 0x34
 800a106:	e012      	b.n	800a12e <dir_next+0x152>
						fs->wflag = 1;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff fab8 	bl	8009684 <sync_window>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <dir_next+0x142>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e030      	b.n	800a180 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	3301      	adds	r3, #1
 800a122:	613b      	str	r3, [r7, #16]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a128:	1c5a      	adds	r2, r3, #1
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	895b      	ldrh	r3, [r3, #10]
 800a132:	461a      	mov	r2, r3
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	4293      	cmp	r3, r2
 800a138:	d3e6      	bcc.n	800a108 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	1ad2      	subs	r2, r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a14c:	6979      	ldr	r1, [r7, #20]
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7ff fb7a 	bl	8009848 <clust2sect>
 800a154:	4602      	mov	r2, r0
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	899b      	ldrh	r3, [r3, #12]
 800a16a:	461a      	mov	r2, r3
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a172:	fb00 f202 	mul.w	r2, r0, r2
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	18ca      	adds	r2, r1, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a198:	2100      	movs	r1, #0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff fe95 	bl	8009eca <dir_sdi>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a1a4:	7dfb      	ldrb	r3, [r7, #23]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d12b      	bne.n	800a202 <dir_alloc+0x7a>
		n = 0;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	69db      	ldr	r3, [r3, #28]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff faa9 	bl	800970c <move_window>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d11d      	bne.n	800a200 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2be5      	cmp	r3, #229	@ 0xe5
 800a1cc:	d004      	beq.n	800a1d8 <dir_alloc+0x50>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d107      	bne.n	800a1e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d102      	bne.n	800a1ec <dir_alloc+0x64>
 800a1e6:	e00c      	b.n	800a202 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff fef4 	bl	8009fdc <dir_next>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a1f8:	7dfb      	ldrb	r3, [r7, #23]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0d7      	beq.n	800a1ae <dir_alloc+0x26>
 800a1fe:	e000      	b.n	800a202 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a200:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a202:	7dfb      	ldrb	r3, [r7, #23]
 800a204:	2b04      	cmp	r3, #4
 800a206:	d101      	bne.n	800a20c <dir_alloc+0x84>
 800a208:	2307      	movs	r3, #7
 800a20a:	75fb      	strb	r3, [r7, #23]
	return res;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	331a      	adds	r3, #26
 800a224:	4618      	mov	r0, r3
 800a226:	f7fe ffc1 	bl	80091ac <ld_word>
 800a22a:	4603      	mov	r3, r0
 800a22c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	2b03      	cmp	r3, #3
 800a234:	d109      	bne.n	800a24a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	3314      	adds	r3, #20
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe ffb6 	bl	80091ac <ld_word>
 800a240:	4603      	mov	r3, r0
 800a242:	041b      	lsls	r3, r3, #16
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a24a:	68fb      	ldr	r3, [r7, #12]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	331a      	adds	r3, #26
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	b292      	uxth	r2, r2
 800a268:	4611      	mov	r1, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fe ffd9 	bl	8009222 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b03      	cmp	r3, #3
 800a276:	d109      	bne.n	800a28c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	f103 0214 	add.w	r2, r3, #20
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	0c1b      	lsrs	r3, r3, #16
 800a282:	b29b      	uxth	r3, r3
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f7fe ffcb 	bl	8009222 <st_word>
	}
}
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a294:	b590      	push	{r4, r7, lr}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	331a      	adds	r3, #26
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe ff82 	bl	80091ac <ld_word>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <cmp_lfn+0x1e>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e059      	b.n	800a366 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2ba:	1e5a      	subs	r2, r3, #1
 800a2bc:	4613      	mov	r3, r2
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	81fb      	strh	r3, [r7, #14]
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	e033      	b.n	800a33a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a2d2:	4a27      	ldr	r2, [pc, #156]	@ (800a370 <cmp_lfn+0xdc>)
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	4413      	add	r3, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe ff63 	bl	80091ac <ld_word>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a2ea:	89fb      	ldrh	r3, [r7, #14]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d01a      	beq.n	800a326 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2bfe      	cmp	r3, #254	@ 0xfe
 800a2f4:	d812      	bhi.n	800a31c <cmp_lfn+0x88>
 800a2f6:	89bb      	ldrh	r3, [r7, #12]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 f831 	bl	800c360 <ff_wtoupper>
 800a2fe:	4603      	mov	r3, r0
 800a300:	461c      	mov	r4, r3
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	617a      	str	r2, [r7, #20]
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	4413      	add	r3, r2
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	4618      	mov	r0, r3
 800a312:	f002 f825 	bl	800c360 <ff_wtoupper>
 800a316:	4603      	mov	r3, r0
 800a318:	429c      	cmp	r4, r3
 800a31a:	d001      	beq.n	800a320 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a31c:	2300      	movs	r3, #0
 800a31e:	e022      	b.n	800a366 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a320:	89bb      	ldrh	r3, [r7, #12]
 800a322:	81fb      	strh	r3, [r7, #14]
 800a324:	e006      	b.n	800a334 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a326:	89bb      	ldrh	r3, [r7, #12]
 800a328:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d001      	beq.n	800a334 <cmp_lfn+0xa0>
 800a330:	2300      	movs	r3, #0
 800a332:	e018      	b.n	800a366 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	3301      	adds	r3, #1
 800a338:	613b      	str	r3, [r7, #16]
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b0c      	cmp	r3, #12
 800a33e:	d9c8      	bls.n	800a2d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <cmp_lfn+0xd0>
 800a34c:	89fb      	ldrh	r3, [r7, #14]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d008      	beq.n	800a364 <cmp_lfn+0xd0>
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <cmp_lfn+0xd0>
 800a360:	2300      	movs	r3, #0
 800a362:	e000      	b.n	800a366 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a364:	2301      	movs	r3, #1
}
 800a366:	4618      	mov	r0, r3
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd90      	pop	{r4, r7, pc}
 800a36e:	bf00      	nop
 800a370:	08011ac4 	.word	0x08011ac4

0800a374 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	4611      	mov	r1, r2
 800a380:	461a      	mov	r2, r3
 800a382:	460b      	mov	r3, r1
 800a384:	71fb      	strb	r3, [r7, #7]
 800a386:	4613      	mov	r3, r2
 800a388:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	330d      	adds	r3, #13
 800a38e:	79ba      	ldrb	r2, [r7, #6]
 800a390:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	330b      	adds	r3, #11
 800a396:	220f      	movs	r2, #15
 800a398:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	330c      	adds	r3, #12
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	331a      	adds	r3, #26
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe ff3a 	bl	8009222 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	1e5a      	subs	r2, r3, #1
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	82fb      	strh	r3, [r7, #22]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a3c6:	8afb      	ldrh	r3, [r7, #22]
 800a3c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d007      	beq.n	800a3e0 <put_lfn+0x6c>
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	61fa      	str	r2, [r7, #28]
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a3e0:	4a17      	ldr	r2, [pc, #92]	@ (800a440 <put_lfn+0xcc>)
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	8afa      	ldrh	r2, [r7, #22]
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe ff15 	bl	8009222 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a3f8:	8afb      	ldrh	r3, [r7, #22]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d102      	bne.n	800a404 <put_lfn+0x90>
 800a3fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a402:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	3301      	adds	r3, #1
 800a408:	61bb      	str	r3, [r7, #24]
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	2b0c      	cmp	r3, #12
 800a40e:	d9da      	bls.n	800a3c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a410:	8afb      	ldrh	r3, [r7, #22]
 800a412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a416:	4293      	cmp	r3, r2
 800a418:	d006      	beq.n	800a428 <put_lfn+0xb4>
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	4413      	add	r3, r2
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d103      	bne.n	800a430 <put_lfn+0xbc>
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a42e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	79fa      	ldrb	r2, [r7, #7]
 800a434:	701a      	strb	r2, [r3, #0]
}
 800a436:	bf00      	nop
 800a438:	3720      	adds	r7, #32
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	08011ac4 	.word	0x08011ac4

0800a444 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08c      	sub	sp, #48	@ 0x30
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a452:	220b      	movs	r2, #11
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7fe ff2a 	bl	80092b0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2b05      	cmp	r3, #5
 800a460:	d929      	bls.n	800a4b6 <gen_numname+0x72>
		sr = seq;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a466:	e020      	b.n	800a4aa <gen_numname+0x66>
			wc = *lfn++;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	1c9a      	adds	r2, r3, #2
 800a46c:	607a      	str	r2, [r7, #4]
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800a472:	2300      	movs	r3, #0
 800a474:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a476:	e015      	b.n	800a4a4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	005a      	lsls	r2, r3, #1
 800a47c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	4413      	add	r3, r2
 800a484:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a486:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d003      	beq.n	800a49e <gen_numname+0x5a>
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	4b30      	ldr	r3, [pc, #192]	@ (800a55c <gen_numname+0x118>)
 800a49a:	4053      	eors	r3, r2
 800a49c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d9e6      	bls.n	800a478 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1da      	bne.n	800a468 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a4b6:	2307      	movs	r3, #7
 800a4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	f003 030f 	and.w	r3, r3, #15
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	3330      	adds	r3, #48	@ 0x30
 800a4c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800a4ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4ce:	2b39      	cmp	r3, #57	@ 0x39
 800a4d0:	d904      	bls.n	800a4dc <gen_numname+0x98>
 800a4d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4d6:	3307      	adds	r3, #7
 800a4d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800a4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4de:	1e5a      	subs	r2, r3, #1
 800a4e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a4e2:	3330      	adds	r3, #48	@ 0x30
 800a4e4:	443b      	add	r3, r7
 800a4e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a4ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	091b      	lsrs	r3, r3, #4
 800a4f2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1df      	bne.n	800a4ba <gen_numname+0x76>
	ns[i] = '~';
 800a4fa:	f107 0214 	add.w	r2, r7, #20
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	4413      	add	r3, r2
 800a502:	227e      	movs	r2, #126	@ 0x7e
 800a504:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a506:	2300      	movs	r3, #0
 800a508:	627b      	str	r3, [r7, #36]	@ 0x24
 800a50a:	e002      	b.n	800a512 <gen_numname+0xce>
 800a50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50e:	3301      	adds	r3, #1
 800a510:	627b      	str	r3, [r7, #36]	@ 0x24
 800a512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	429a      	cmp	r2, r3
 800a518:	d205      	bcs.n	800a526 <gen_numname+0xe2>
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	4413      	add	r3, r2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	2b20      	cmp	r3, #32
 800a524:	d1f2      	bne.n	800a50c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a528:	2b07      	cmp	r3, #7
 800a52a:	d807      	bhi.n	800a53c <gen_numname+0xf8>
 800a52c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a532:	3330      	adds	r3, #48	@ 0x30
 800a534:	443b      	add	r3, r7
 800a536:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a53a:	e000      	b.n	800a53e <gen_numname+0xfa>
 800a53c:	2120      	movs	r1, #32
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	627a      	str	r2, [r7, #36]	@ 0x24
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	460a      	mov	r2, r1
 800a54a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	2b07      	cmp	r3, #7
 800a550:	d9e9      	bls.n	800a526 <gen_numname+0xe2>
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	3730      	adds	r7, #48	@ 0x30
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	00011021 	.word	0x00011021

0800a560 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a56c:	230b      	movs	r3, #11
 800a56e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
 800a572:	b2da      	uxtb	r2, r3
 800a574:	0852      	lsrs	r2, r2, #1
 800a576:	01db      	lsls	r3, r3, #7
 800a578:	4313      	orrs	r3, r2
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	1c59      	adds	r1, r3, #1
 800a580:	6079      	str	r1, [r7, #4]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	4413      	add	r3, r2
 800a586:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	60bb      	str	r3, [r7, #8]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1ed      	bne.n	800a570 <sum_sfn+0x10>
	return sum;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b086      	sub	sp, #24
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f7ff fc89 	bl	8009eca <dir_sdi>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <dir_find+0x24>
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	e0a9      	b.n	800a71a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a5c6:	23ff      	movs	r3, #255	@ 0xff
 800a5c8:	753b      	strb	r3, [r7, #20]
 800a5ca:	7d3b      	ldrb	r3, [r7, #20]
 800a5cc:	757b      	strb	r3, [r7, #21]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	6938      	ldr	r0, [r7, #16]
 800a5de:	f7ff f895 	bl	800970c <move_window>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f040 8090 	bne.w	800a70e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a5f6:	7dbb      	ldrb	r3, [r7, #22]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d102      	bne.n	800a602 <dir_find+0x60>
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	75fb      	strb	r3, [r7, #23]
 800a600:	e08a      	b.n	800a718 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a1b      	ldr	r3, [r3, #32]
 800a606:	330b      	adds	r3, #11
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a60e:	73fb      	strb	r3, [r7, #15]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	7bfa      	ldrb	r2, [r7, #15]
 800a614:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a616:	7dbb      	ldrb	r3, [r7, #22]
 800a618:	2be5      	cmp	r3, #229	@ 0xe5
 800a61a:	d007      	beq.n	800a62c <dir_find+0x8a>
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	f003 0308 	and.w	r3, r3, #8
 800a622:	2b00      	cmp	r3, #0
 800a624:	d009      	beq.n	800a63a <dir_find+0x98>
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	2b0f      	cmp	r3, #15
 800a62a:	d006      	beq.n	800a63a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a62c:	23ff      	movs	r3, #255	@ 0xff
 800a62e:	757b      	strb	r3, [r7, #21]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	631a      	str	r2, [r3, #48]	@ 0x30
 800a638:	e05e      	b.n	800a6f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a63a:	7bfb      	ldrb	r3, [r7, #15]
 800a63c:	2b0f      	cmp	r3, #15
 800a63e:	d136      	bne.n	800a6ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d154      	bne.n	800a6f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a64e:	7dbb      	ldrb	r3, [r7, #22]
 800a650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00d      	beq.n	800a674 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	7b5b      	ldrb	r3, [r3, #13]
 800a65e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a660:	7dbb      	ldrb	r3, [r7, #22]
 800a662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a666:	75bb      	strb	r3, [r7, #22]
 800a668:	7dbb      	ldrb	r3, [r7, #22]
 800a66a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	695a      	ldr	r2, [r3, #20]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a674:	7dba      	ldrb	r2, [r7, #22]
 800a676:	7d7b      	ldrb	r3, [r7, #21]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d115      	bne.n	800a6a8 <dir_find+0x106>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	330d      	adds	r3, #13
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	7d3a      	ldrb	r2, [r7, #20]
 800a686:	429a      	cmp	r2, r3
 800a688:	d10e      	bne.n	800a6a8 <dir_find+0x106>
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	691a      	ldr	r2, [r3, #16]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a1b      	ldr	r3, [r3, #32]
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f7ff fdfd 	bl	800a294 <cmp_lfn>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d003      	beq.n	800a6a8 <dir_find+0x106>
 800a6a0:	7d7b      	ldrb	r3, [r7, #21]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	e000      	b.n	800a6aa <dir_find+0x108>
 800a6a8:	23ff      	movs	r3, #255	@ 0xff
 800a6aa:	757b      	strb	r3, [r7, #21]
 800a6ac:	e024      	b.n	800a6f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a6ae:	7d7b      	ldrb	r3, [r7, #21]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <dir_find+0x126>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a1b      	ldr	r3, [r3, #32]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff ff51 	bl	800a560 <sum_sfn>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	7d3b      	ldrb	r3, [r7, #20]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d024      	beq.n	800a712 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <dir_find+0x14a>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a18      	ldr	r0, [r3, #32]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3324      	adds	r3, #36	@ 0x24
 800a6de:	220b      	movs	r2, #11
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	f7fe fe21 	bl	8009328 <mem_cmp>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d014      	beq.n	800a716 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a6ec:	23ff      	movs	r3, #255	@ 0xff
 800a6ee:	757b      	strb	r3, [r7, #21]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff fc6e 	bl	8009fdc <dir_next>
 800a700:	4603      	mov	r3, r0
 800a702:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a704:	7dfb      	ldrb	r3, [r7, #23]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f43f af65 	beq.w	800a5d6 <dir_find+0x34>
 800a70c:	e004      	b.n	800a718 <dir_find+0x176>
		if (res != FR_OK) break;
 800a70e:	bf00      	nop
 800a710:	e002      	b.n	800a718 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a712:	bf00      	nop
 800a714:	e000      	b.n	800a718 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a716:	bf00      	nop

	return res;
 800a718:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08c      	sub	sp, #48	@ 0x30
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a738:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <dir_register+0x20>
 800a740:	2306      	movs	r3, #6
 800a742:	e0e0      	b.n	800a906 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a744:	2300      	movs	r3, #0
 800a746:	627b      	str	r3, [r7, #36]	@ 0x24
 800a748:	e002      	b.n	800a750 <dir_register+0x2c>
 800a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74c:	3301      	adds	r3, #1
 800a74e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	691a      	ldr	r2, [r3, #16]
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	005b      	lsls	r3, r3, #1
 800a758:	4413      	add	r3, r2
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1f4      	bne.n	800a74a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a766:	f107 030c 	add.w	r3, r7, #12
 800a76a:	220c      	movs	r2, #12
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fe fd9f 	bl	80092b0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a772:	7dfb      	ldrb	r3, [r7, #23]
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d032      	beq.n	800a7e2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2240      	movs	r2, #64	@ 0x40
 800a780:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800a784:	2301      	movs	r3, #1
 800a786:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a788:	e016      	b.n	800a7b8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	f107 010c 	add.w	r1, r7, #12
 800a798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79a:	f7ff fe53 	bl	800a444 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff feff 	bl	800a5a2 <dir_find>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800a7aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d106      	bne.n	800a7c0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	2b63      	cmp	r3, #99	@ 0x63
 800a7bc:	d9e5      	bls.n	800a78a <dir_register+0x66>
 800a7be:	e000      	b.n	800a7c2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800a7c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c4:	2b64      	cmp	r3, #100	@ 0x64
 800a7c6:	d101      	bne.n	800a7cc <dir_register+0xa8>
 800a7c8:	2307      	movs	r3, #7
 800a7ca:	e09c      	b.n	800a906 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a7cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d002      	beq.n	800a7da <dir_register+0xb6>
 800a7d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7d8:	e095      	b.n	800a906 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a7da:	7dfa      	ldrb	r2, [r7, #23]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	f003 0302 	and.w	r3, r3, #2
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d007      	beq.n	800a7fc <dir_register+0xd8>
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ee:	330c      	adds	r3, #12
 800a7f0:	4a47      	ldr	r2, [pc, #284]	@ (800a910 <dir_register+0x1ec>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	089b      	lsrs	r3, r3, #2
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	e000      	b.n	800a7fe <dir_register+0xda>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a800:	6a39      	ldr	r1, [r7, #32]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff fcc0 	bl	800a188 <dir_alloc>
 800a808:	4603      	mov	r3, r0
 800a80a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a80e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a812:	2b00      	cmp	r3, #0
 800a814:	d148      	bne.n	800a8a8 <dir_register+0x184>
 800a816:	6a3b      	ldr	r3, [r7, #32]
 800a818:	3b01      	subs	r3, #1
 800a81a:	623b      	str	r3, [r7, #32]
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d042      	beq.n	800a8a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	695a      	ldr	r2, [r3, #20]
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	015b      	lsls	r3, r3, #5
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff fb4b 	bl	8009eca <dir_sdi>
 800a834:	4603      	mov	r3, r0
 800a836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a83a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d132      	bne.n	800a8a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	3324      	adds	r3, #36	@ 0x24
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff fe8a 	bl	800a560 <sum_sfn>
 800a84c:	4603      	mov	r3, r0
 800a84e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	4619      	mov	r1, r3
 800a856:	69f8      	ldr	r0, [r7, #28]
 800a858:	f7fe ff58 	bl	800970c <move_window>
 800a85c:	4603      	mov	r3, r0
 800a85e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800a862:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a866:	2b00      	cmp	r3, #0
 800a868:	d11d      	bne.n	800a8a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	6918      	ldr	r0, [r3, #16]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a19      	ldr	r1, [r3, #32]
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	b2da      	uxtb	r2, r3
 800a876:	7efb      	ldrb	r3, [r7, #27]
 800a878:	f7ff fd7c 	bl	800a374 <put_lfn>
				fs->wflag = 1;
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2201      	movs	r2, #1
 800a880:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a882:	2100      	movs	r1, #0
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff fba9 	bl	8009fdc <dir_next>
 800a88a:	4603      	mov	r3, r0
 800a88c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800a890:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a894:	2b00      	cmp	r3, #0
 800a896:	d107      	bne.n	800a8a8 <dir_register+0x184>
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d1d5      	bne.n	800a850 <dir_register+0x12c>
 800a8a4:	e000      	b.n	800a8a8 <dir_register+0x184>
				if (res != FR_OK) break;
 800a8a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a8a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d128      	bne.n	800a902 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	69f8      	ldr	r0, [r7, #28]
 800a8b8:	f7fe ff28 	bl	800970c <move_window>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a8c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d11b      	bne.n	800a902 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fd0d 	bl	80092f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a18      	ldr	r0, [r3, #32]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3324      	adds	r3, #36	@ 0x24
 800a8e0:	220b      	movs	r2, #11
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	f7fe fce4 	bl	80092b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a1b      	ldr	r3, [r3, #32]
 800a8f2:	330c      	adds	r3, #12
 800a8f4:	f002 0218 	and.w	r2, r2, #24
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	2201      	movs	r2, #1
 800a900:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a902:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a906:	4618      	mov	r0, r3
 800a908:	3730      	adds	r7, #48	@ 0x30
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	4ec4ec4f 	.word	0x4ec4ec4f

0800a914 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08a      	sub	sp, #40	@ 0x28
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	613b      	str	r3, [r7, #16]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	2300      	movs	r3, #0
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a934:	69bb      	ldr	r3, [r7, #24]
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	61ba      	str	r2, [r7, #24]
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	4413      	add	r3, r2
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a944:	2b1f      	cmp	r3, #31
 800a946:	d940      	bls.n	800a9ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a948:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a94a:	2b2f      	cmp	r3, #47	@ 0x2f
 800a94c:	d006      	beq.n	800a95c <create_name+0x48>
 800a94e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a950:	2b5c      	cmp	r3, #92	@ 0x5c
 800a952:	d110      	bne.n	800a976 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a954:	e002      	b.n	800a95c <create_name+0x48>
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	3301      	adds	r3, #1
 800a95a:	61bb      	str	r3, [r7, #24]
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	4413      	add	r3, r2
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b2f      	cmp	r3, #47	@ 0x2f
 800a966:	d0f6      	beq.n	800a956 <create_name+0x42>
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	4413      	add	r3, r2
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b5c      	cmp	r3, #92	@ 0x5c
 800a972:	d0f0      	beq.n	800a956 <create_name+0x42>
			break;
 800a974:	e02a      	b.n	800a9cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2bfe      	cmp	r3, #254	@ 0xfe
 800a97a:	d901      	bls.n	800a980 <create_name+0x6c>
 800a97c:	2306      	movs	r3, #6
 800a97e:	e17d      	b.n	800ac7c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a980:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a982:	b2db      	uxtb	r3, r3
 800a984:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a986:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a988:	2101      	movs	r1, #1
 800a98a:	4618      	mov	r0, r3
 800a98c:	f001 fcac 	bl	800c2e8 <ff_convert>
 800a990:	4603      	mov	r3, r0
 800a992:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d101      	bne.n	800a99e <create_name+0x8a>
 800a99a:	2306      	movs	r3, #6
 800a99c:	e16e      	b.n	800ac7c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a99e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a9a2:	d809      	bhi.n	800a9b8 <create_name+0xa4>
 800a9a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	488d      	ldr	r0, [pc, #564]	@ (800abe0 <create_name+0x2cc>)
 800a9aa:	f7fe fce4 	bl	8009376 <chk_chr>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <create_name+0xa4>
 800a9b4:	2306      	movs	r3, #6
 800a9b6:	e161      	b.n	800ac7c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	1c5a      	adds	r2, r3, #1
 800a9bc:	617a      	str	r2, [r7, #20]
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a9c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a9c8:	e7b4      	b.n	800a934 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a9ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	441a      	add	r2, r3
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a9d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9d8:	2b1f      	cmp	r3, #31
 800a9da:	d801      	bhi.n	800a9e0 <create_name+0xcc>
 800a9dc:	2304      	movs	r3, #4
 800a9de:	e000      	b.n	800a9e2 <create_name+0xce>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a9e6:	e011      	b.n	800aa0c <create_name+0xf8>
		w = lfn[di - 1];
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a9ee:	4413      	add	r3, r2
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800a9fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a9fc:	2b20      	cmp	r3, #32
 800a9fe:	d002      	beq.n	800aa06 <create_name+0xf2>
 800aa00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa02:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa04:	d106      	bne.n	800aa14 <create_name+0x100>
		di--;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d1ea      	bne.n	800a9e8 <create_name+0xd4>
 800aa12:	e000      	b.n	800aa16 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800aa14:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	2200      	movs	r2, #0
 800aa20:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <create_name+0x118>
 800aa28:	2306      	movs	r3, #6
 800aa2a:	e127      	b.n	800ac7c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	3324      	adds	r3, #36	@ 0x24
 800aa30:	220b      	movs	r2, #11
 800aa32:	2120      	movs	r1, #32
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fc5c 	bl	80092f2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	61bb      	str	r3, [r7, #24]
 800aa3e:	e002      	b.n	800aa46 <create_name+0x132>
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	3301      	adds	r3, #1
 800aa44:	61bb      	str	r3, [r7, #24]
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	2b20      	cmp	r3, #32
 800aa52:	d0f5      	beq.n	800aa40 <create_name+0x12c>
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	005b      	lsls	r3, r3, #1
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	881b      	ldrh	r3, [r3, #0]
 800aa5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa60:	d0ee      	beq.n	800aa40 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d009      	beq.n	800aa7c <create_name+0x168>
 800aa68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa6c:	f043 0303 	orr.w	r3, r3, #3
 800aa70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800aa74:	e002      	b.n	800aa7c <create_name+0x168>
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	617b      	str	r3, [r7, #20]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d009      	beq.n	800aa96 <create_name+0x182>
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800aa88:	4413      	add	r3, r2
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa94:	d1ef      	bne.n	800aa76 <create_name+0x162>

	i = b = 0; ni = 8;
 800aa96:	2300      	movs	r3, #0
 800aa98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	623b      	str	r3, [r7, #32]
 800aaa0:	2308      	movs	r3, #8
 800aaa2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	61ba      	str	r2, [r7, #24]
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800aab4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 8090 	beq.w	800abdc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800aabc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aabe:	2b20      	cmp	r3, #32
 800aac0:	d006      	beq.n	800aad0 <create_name+0x1bc>
 800aac2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aac4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aac6:	d10a      	bne.n	800aade <create_name+0x1ca>
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d006      	beq.n	800aade <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800aad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aad4:	f043 0303 	orr.w	r3, r3, #3
 800aad8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800aadc:	e07d      	b.n	800abda <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800aade:	6a3a      	ldr	r2, [r7, #32]
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d203      	bcs.n	800aaee <create_name+0x1da>
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d123      	bne.n	800ab36 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	2b0b      	cmp	r3, #11
 800aaf2:	d106      	bne.n	800ab02 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800aaf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aaf8:	f043 0303 	orr.w	r3, r3, #3
 800aafc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab00:	e075      	b.n	800abee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d005      	beq.n	800ab16 <create_name+0x202>
 800ab0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab0e:	f043 0303 	orr.w	r3, r3, #3
 800ab12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ab16:	69ba      	ldr	r2, [r7, #24]
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d866      	bhi.n	800abec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	61bb      	str	r3, [r7, #24]
 800ab22:	2308      	movs	r3, #8
 800ab24:	623b      	str	r3, [r7, #32]
 800ab26:	230b      	movs	r3, #11
 800ab28:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ab2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ab34:	e051      	b.n	800abda <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ab36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab38:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab3a:	d914      	bls.n	800ab66 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ab3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab3e:	2100      	movs	r1, #0
 800ab40:	4618      	mov	r0, r3
 800ab42:	f001 fbd1 	bl	800c2e8 <ff_convert>
 800ab46:	4603      	mov	r3, r0
 800ab48:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ab4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d004      	beq.n	800ab5a <create_name+0x246>
 800ab50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab52:	3b80      	subs	r3, #128	@ 0x80
 800ab54:	4a23      	ldr	r2, [pc, #140]	@ (800abe4 <create_name+0x2d0>)
 800ab56:	5cd3      	ldrb	r3, [r2, r3]
 800ab58:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ab5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab5e:	f043 0302 	orr.w	r3, r3, #2
 800ab62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ab66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d007      	beq.n	800ab7c <create_name+0x268>
 800ab6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab6e:	4619      	mov	r1, r3
 800ab70:	481d      	ldr	r0, [pc, #116]	@ (800abe8 <create_name+0x2d4>)
 800ab72:	f7fe fc00 	bl	8009376 <chk_chr>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ab7c:	235f      	movs	r3, #95	@ 0x5f
 800ab7e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ab80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab84:	f043 0303 	orr.w	r3, r3, #3
 800ab88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab8c:	e01b      	b.n	800abc6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ab8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab90:	2b40      	cmp	r3, #64	@ 0x40
 800ab92:	d909      	bls.n	800aba8 <create_name+0x294>
 800ab94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab96:	2b5a      	cmp	r3, #90	@ 0x5a
 800ab98:	d806      	bhi.n	800aba8 <create_name+0x294>
					b |= 2;
 800ab9a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab9e:	f043 0302 	orr.w	r3, r3, #2
 800aba2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800aba6:	e00e      	b.n	800abc6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800aba8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abaa:	2b60      	cmp	r3, #96	@ 0x60
 800abac:	d90b      	bls.n	800abc6 <create_name+0x2b2>
 800abae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abb0:	2b7a      	cmp	r3, #122	@ 0x7a
 800abb2:	d808      	bhi.n	800abc6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800abb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abb8:	f043 0301 	orr.w	r3, r3, #1
 800abbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800abc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800abc2:	3b20      	subs	r3, #32
 800abc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	1c5a      	adds	r2, r3, #1
 800abca:	623a      	str	r2, [r7, #32]
 800abcc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abce:	b2d1      	uxtb	r1, r2
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	4413      	add	r3, r2
 800abd4:	460a      	mov	r2, r1
 800abd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800abda:	e763      	b.n	800aaa4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800abdc:	bf00      	nop
 800abde:	e006      	b.n	800abee <create_name+0x2da>
 800abe0:	08010fbc 	.word	0x08010fbc
 800abe4:	08011a44 	.word	0x08011a44
 800abe8:	08010fc8 	.word	0x08010fc8
			if (si > di) break;			/* No extension */
 800abec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800abf4:	2be5      	cmp	r3, #229	@ 0xe5
 800abf6:	d103      	bne.n	800ac00 <create_name+0x2ec>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2205      	movs	r2, #5
 800abfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	2b08      	cmp	r3, #8
 800ac04:	d104      	bne.n	800ac10 <create_name+0x2fc>
 800ac06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ac10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac14:	f003 030c 	and.w	r3, r3, #12
 800ac18:	2b0c      	cmp	r3, #12
 800ac1a:	d005      	beq.n	800ac28 <create_name+0x314>
 800ac1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac20:	f003 0303 	and.w	r3, r3, #3
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d105      	bne.n	800ac34 <create_name+0x320>
 800ac28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac2c:	f043 0302 	orr.w	r3, r3, #2
 800ac30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ac34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d117      	bne.n	800ac70 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ac40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac44:	f003 0303 	and.w	r3, r3, #3
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d105      	bne.n	800ac58 <create_name+0x344>
 800ac4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac50:	f043 0310 	orr.w	r3, r3, #16
 800ac54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ac58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac5c:	f003 030c 	and.w	r3, r3, #12
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d105      	bne.n	800ac70 <create_name+0x35c>
 800ac64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac68:	f043 0308 	orr.w	r3, r3, #8
 800ac6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ac7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3728      	adds	r7, #40	@ 0x28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ac98:	e002      	b.n	800aca0 <follow_path+0x1c>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	603b      	str	r3, [r7, #0]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	2b2f      	cmp	r3, #47	@ 0x2f
 800aca6:	d0f8      	beq.n	800ac9a <follow_path+0x16>
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b5c      	cmp	r3, #92	@ 0x5c
 800acae:	d0f4      	beq.n	800ac9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	2200      	movs	r2, #0
 800acb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b1f      	cmp	r3, #31
 800acbc:	d80a      	bhi.n	800acd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2280      	movs	r2, #128	@ 0x80
 800acc2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800acc6:	2100      	movs	r1, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff f8fe 	bl	8009eca <dir_sdi>
 800acce:	4603      	mov	r3, r0
 800acd0:	75fb      	strb	r3, [r7, #23]
 800acd2:	e048      	b.n	800ad66 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800acd4:	463b      	mov	r3, r7
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7ff fe1b 	bl	800a914 <create_name>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d139      	bne.n	800ad5c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff fc5a 	bl	800a5a2 <dir_find>
 800acee:	4603      	mov	r3, r0
 800acf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800acf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00a      	beq.n	800ad16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d12c      	bne.n	800ad60 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ad06:	7afb      	ldrb	r3, [r7, #11]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d127      	bne.n	800ad60 <follow_path+0xdc>
 800ad10:	2305      	movs	r3, #5
 800ad12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ad14:	e024      	b.n	800ad60 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad16:	7afb      	ldrb	r3, [r7, #11]
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d121      	bne.n	800ad64 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	799b      	ldrb	r3, [r3, #6]
 800ad24:	f003 0310 	and.w	r3, r3, #16
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ad2c:	2305      	movs	r3, #5
 800ad2e:	75fb      	strb	r3, [r7, #23]
 800ad30:	e019      	b.n	800ad66 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	8992      	ldrh	r2, [r2, #12]
 800ad40:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad44:	fb00 f202 	mul.w	r2, r0, r2
 800ad48:	1a9b      	subs	r3, r3, r2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fa61 	bl	800a216 <ld_clust>
 800ad54:	4602      	mov	r2, r0
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad5a:	e7bb      	b.n	800acd4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ad5c:	bf00      	nop
 800ad5e:	e002      	b.n	800ad66 <follow_path+0xe2>
				break;
 800ad60:	bf00      	nop
 800ad62:	e000      	b.n	800ad66 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad64:	bf00      	nop
			}
		}
	}

	return res;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad78:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d031      	beq.n	800adea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	617b      	str	r3, [r7, #20]
 800ad8c:	e002      	b.n	800ad94 <get_ldnumber+0x24>
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	3301      	adds	r3, #1
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b1f      	cmp	r3, #31
 800ad9a:	d903      	bls.n	800ada4 <get_ldnumber+0x34>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	2b3a      	cmp	r3, #58	@ 0x3a
 800ada2:	d1f4      	bne.n	800ad8e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	2b3a      	cmp	r3, #58	@ 0x3a
 800adaa:	d11c      	bne.n	800ade6 <get_ldnumber+0x76>
			tp = *path;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	1c5a      	adds	r2, r3, #1
 800adb6:	60fa      	str	r2, [r7, #12]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	3b30      	subs	r3, #48	@ 0x30
 800adbc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b09      	cmp	r3, #9
 800adc2:	d80e      	bhi.n	800ade2 <get_ldnumber+0x72>
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	429a      	cmp	r2, r3
 800adca:	d10a      	bne.n	800ade2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d107      	bne.n	800ade2 <get_ldnumber+0x72>
					vol = (int)i;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	3301      	adds	r3, #1
 800adda:	617b      	str	r3, [r7, #20]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	e002      	b.n	800adec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ade6:	2300      	movs	r3, #0
 800ade8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800adea:	693b      	ldr	r3, [r7, #16]
}
 800adec:	4618      	mov	r0, r3
 800adee:	371c      	adds	r7, #28
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	70da      	strb	r2, [r3, #3]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ae10:	6839      	ldr	r1, [r7, #0]
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7fe fc7a 	bl	800970c <move_window>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <check_fs+0x2a>
 800ae1e:	2304      	movs	r3, #4
 800ae20:	e038      	b.n	800ae94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3338      	adds	r3, #56	@ 0x38
 800ae26:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7fe f9be 	bl	80091ac <ld_word>
 800ae30:	4603      	mov	r3, r0
 800ae32:	461a      	mov	r2, r3
 800ae34:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d001      	beq.n	800ae40 <check_fs+0x48>
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e029      	b.n	800ae94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ae46:	2be9      	cmp	r3, #233	@ 0xe9
 800ae48:	d009      	beq.n	800ae5e <check_fs+0x66>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ae50:	2beb      	cmp	r3, #235	@ 0xeb
 800ae52:	d11e      	bne.n	800ae92 <check_fs+0x9a>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ae5a:	2b90      	cmp	r3, #144	@ 0x90
 800ae5c:	d119      	bne.n	800ae92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	3338      	adds	r3, #56	@ 0x38
 800ae62:	3336      	adds	r3, #54	@ 0x36
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fe f9b9 	bl	80091dc <ld_dword>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ae70:	4a0a      	ldr	r2, [pc, #40]	@ (800ae9c <check_fs+0xa4>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d101      	bne.n	800ae7a <check_fs+0x82>
 800ae76:	2300      	movs	r3, #0
 800ae78:	e00c      	b.n	800ae94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	3338      	adds	r3, #56	@ 0x38
 800ae7e:	3352      	adds	r3, #82	@ 0x52
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe f9ab 	bl	80091dc <ld_dword>
 800ae86:	4603      	mov	r3, r0
 800ae88:	4a05      	ldr	r2, [pc, #20]	@ (800aea0 <check_fs+0xa8>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d101      	bne.n	800ae92 <check_fs+0x9a>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e000      	b.n	800ae94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ae92:	2302      	movs	r3, #2
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	00544146 	.word	0x00544146
 800aea0:	33544146 	.word	0x33544146

0800aea4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b096      	sub	sp, #88	@ 0x58
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff ff59 	bl	800ad70 <get_ldnumber>
 800aebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	da01      	bge.n	800aeca <find_volume+0x26>
 800aec6:	230b      	movs	r3, #11
 800aec8:	e265      	b.n	800b396 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aeca:	4a9f      	ldr	r2, [pc, #636]	@ (800b148 <find_volume+0x2a4>)
 800aecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d101      	bne.n	800aede <find_volume+0x3a>
 800aeda:	230c      	movs	r3, #12
 800aedc:	e25b      	b.n	800b396 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aee2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800aee4:	79fb      	ldrb	r3, [r7, #7]
 800aee6:	f023 0301 	bic.w	r3, r3, #1
 800aeea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aeec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d01a      	beq.n	800af2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800aef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef6:	785b      	ldrb	r3, [r3, #1]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fe f8b9 	bl	8009070 <disk_status>
 800aefe:	4603      	mov	r3, r0
 800af00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800af04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10c      	bne.n	800af2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800af10:	79fb      	ldrb	r3, [r7, #7]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <find_volume+0x82>
 800af16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af1a:	f003 0304 	and.w	r3, r3, #4
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800af22:	230a      	movs	r3, #10
 800af24:	e237      	b.n	800b396 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800af26:	2300      	movs	r3, #0
 800af28:	e235      	b.n	800b396 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af2c:	2200      	movs	r2, #0
 800af2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af32:	b2da      	uxtb	r2, r3
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af3a:	785b      	ldrb	r3, [r3, #1]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fe f8b1 	bl	80090a4 <disk_initialize>
 800af42:	4603      	mov	r3, r0
 800af44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800af48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af54:	2303      	movs	r3, #3
 800af56:	e21e      	b.n	800b396 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800af58:	79fb      	ldrb	r3, [r7, #7]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <find_volume+0xca>
 800af5e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800af62:	f003 0304 	and.w	r3, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800af6a:	230a      	movs	r3, #10
 800af6c:	e213      	b.n	800b396 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	7858      	ldrb	r0, [r3, #1]
 800af72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af74:	330c      	adds	r3, #12
 800af76:	461a      	mov	r2, r3
 800af78:	2102      	movs	r1, #2
 800af7a:	f7fe f8f9 	bl	8009170 <disk_ioctl>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <find_volume+0xe4>
 800af84:	2301      	movs	r3, #1
 800af86:	e206      	b.n	800b396 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800af88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af8a:	899b      	ldrh	r3, [r3, #12]
 800af8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af90:	d80d      	bhi.n	800afae <find_volume+0x10a>
 800af92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af94:	899b      	ldrh	r3, [r3, #12]
 800af96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af9a:	d308      	bcc.n	800afae <find_volume+0x10a>
 800af9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9e:	899b      	ldrh	r3, [r3, #12]
 800afa0:	461a      	mov	r2, r3
 800afa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa4:	899b      	ldrh	r3, [r3, #12]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	4013      	ands	r3, r2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <find_volume+0x10e>
 800afae:	2301      	movs	r3, #1
 800afb0:	e1f1      	b.n	800b396 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800afb6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800afb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800afba:	f7ff ff1d 	bl	800adf8 <check_fs>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800afc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d149      	bne.n	800b060 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800afcc:	2300      	movs	r3, #0
 800afce:	643b      	str	r3, [r7, #64]	@ 0x40
 800afd0:	e01e      	b.n	800b010 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800afd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800afd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afda:	011b      	lsls	r3, r3, #4
 800afdc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800afe0:	4413      	add	r3, r2
 800afe2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800afe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe6:	3304      	adds	r3, #4
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d006      	beq.n	800affc <find_volume+0x158>
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	3308      	adds	r3, #8
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fe f8f2 	bl	80091dc <ld_dword>
 800aff8:	4602      	mov	r2, r0
 800affa:	e000      	b.n	800affe <find_volume+0x15a>
 800affc:	2200      	movs	r2, #0
 800affe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	3358      	adds	r3, #88	@ 0x58
 800b004:	443b      	add	r3, r7
 800b006:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b00a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b00c:	3301      	adds	r3, #1
 800b00e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b010:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b012:	2b03      	cmp	r3, #3
 800b014:	d9dd      	bls.n	800afd2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b016:	2300      	movs	r3, #0
 800b018:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d002      	beq.n	800b026 <find_volume+0x182>
 800b020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b022:	3b01      	subs	r3, #1
 800b024:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	3358      	adds	r3, #88	@ 0x58
 800b02c:	443b      	add	r3, r7
 800b02e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b032:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <find_volume+0x1a2>
 800b03a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b03c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b03e:	f7ff fedb 	bl	800adf8 <check_fs>
 800b042:	4603      	mov	r3, r0
 800b044:	e000      	b.n	800b048 <find_volume+0x1a4>
 800b046:	2303      	movs	r3, #3
 800b048:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b04c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b050:	2b01      	cmp	r3, #1
 800b052:	d905      	bls.n	800b060 <find_volume+0x1bc>
 800b054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b056:	3301      	adds	r3, #1
 800b058:	643b      	str	r3, [r7, #64]	@ 0x40
 800b05a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d9e2      	bls.n	800b026 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b060:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b064:	2b04      	cmp	r3, #4
 800b066:	d101      	bne.n	800b06c <find_volume+0x1c8>
 800b068:	2301      	movs	r3, #1
 800b06a:	e194      	b.n	800b396 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b06c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b070:	2b01      	cmp	r3, #1
 800b072:	d901      	bls.n	800b078 <find_volume+0x1d4>
 800b074:	230d      	movs	r3, #13
 800b076:	e18e      	b.n	800b396 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07a:	3338      	adds	r3, #56	@ 0x38
 800b07c:	330b      	adds	r3, #11
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fe f894 	bl	80091ac <ld_word>
 800b084:	4603      	mov	r3, r0
 800b086:	461a      	mov	r2, r3
 800b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08a:	899b      	ldrh	r3, [r3, #12]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d001      	beq.n	800b094 <find_volume+0x1f0>
 800b090:	230d      	movs	r3, #13
 800b092:	e180      	b.n	800b396 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	3338      	adds	r3, #56	@ 0x38
 800b098:	3316      	adds	r3, #22
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe f886 	bl	80091ac <ld_word>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d106      	bne.n	800b0b8 <find_volume+0x214>
 800b0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ac:	3338      	adds	r3, #56	@ 0x38
 800b0ae:	3324      	adds	r3, #36	@ 0x24
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fe f893 	bl	80091dc <ld_dword>
 800b0b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0bc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ca:	789b      	ldrb	r3, [r3, #2]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d005      	beq.n	800b0dc <find_volume+0x238>
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d2:	789b      	ldrb	r3, [r3, #2]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d001      	beq.n	800b0dc <find_volume+0x238>
 800b0d8:	230d      	movs	r3, #13
 800b0da:	e15c      	b.n	800b396 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	789b      	ldrb	r3, [r3, #2]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0e4:	fb02 f303 	mul.w	r3, r2, r3
 800b0e8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	895b      	ldrh	r3, [r3, #10]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d008      	beq.n	800b110 <find_volume+0x26c>
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	895b      	ldrh	r3, [r3, #10]
 800b102:	461a      	mov	r2, r3
 800b104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b106:	895b      	ldrh	r3, [r3, #10]
 800b108:	3b01      	subs	r3, #1
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <find_volume+0x270>
 800b110:	230d      	movs	r3, #13
 800b112:	e140      	b.n	800b396 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b116:	3338      	adds	r3, #56	@ 0x38
 800b118:	3311      	adds	r3, #17
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe f846 	bl	80091ac <ld_word>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b126:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b12a:	891b      	ldrh	r3, [r3, #8]
 800b12c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b12e:	8992      	ldrh	r2, [r2, #12]
 800b130:	0952      	lsrs	r2, r2, #5
 800b132:	b292      	uxth	r2, r2
 800b134:	fbb3 f1f2 	udiv	r1, r3, r2
 800b138:	fb01 f202 	mul.w	r2, r1, r2
 800b13c:	1a9b      	subs	r3, r3, r2
 800b13e:	b29b      	uxth	r3, r3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <find_volume+0x2a8>
 800b144:	230d      	movs	r3, #13
 800b146:	e126      	b.n	800b396 <find_volume+0x4f2>
 800b148:	20002f68 	.word	0x20002f68

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	3338      	adds	r3, #56	@ 0x38
 800b150:	3313      	adds	r3, #19
 800b152:	4618      	mov	r0, r3
 800b154:	f7fe f82a 	bl	80091ac <ld_word>
 800b158:	4603      	mov	r3, r0
 800b15a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b15c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d106      	bne.n	800b170 <find_volume+0x2cc>
 800b162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b164:	3338      	adds	r3, #56	@ 0x38
 800b166:	3320      	adds	r3, #32
 800b168:	4618      	mov	r0, r3
 800b16a:	f7fe f837 	bl	80091dc <ld_dword>
 800b16e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b172:	3338      	adds	r3, #56	@ 0x38
 800b174:	330e      	adds	r3, #14
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe f818 	bl	80091ac <ld_word>
 800b17c:	4603      	mov	r3, r0
 800b17e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b180:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <find_volume+0x2e6>
 800b186:	230d      	movs	r3, #13
 800b188:	e105      	b.n	800b396 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b18a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b18e:	4413      	add	r3, r2
 800b190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b192:	8911      	ldrh	r1, [r2, #8]
 800b194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b196:	8992      	ldrh	r2, [r2, #12]
 800b198:	0952      	lsrs	r2, r2, #5
 800b19a:	b292      	uxth	r2, r2
 800b19c:	fbb1 f2f2 	udiv	r2, r1, r2
 800b1a0:	b292      	uxth	r2, r2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b1a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d201      	bcs.n	800b1b2 <find_volume+0x30e>
 800b1ae:	230d      	movs	r3, #13
 800b1b0:	e0f1      	b.n	800b396 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b1b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1ba:	8952      	ldrh	r2, [r2, #10]
 800b1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <find_volume+0x328>
 800b1c8:	230d      	movs	r3, #13
 800b1ca:	e0e4      	b.n	800b396 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d802      	bhi.n	800b1e2 <find_volume+0x33e>
 800b1dc:	2302      	movs	r3, #2
 800b1de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d802      	bhi.n	800b1f2 <find_volume+0x34e>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f4:	1c9a      	adds	r2, r3, #2
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1fe:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b200:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b204:	441a      	add	r2, r3
 800b206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b208:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b20a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	441a      	add	r2, r3
 800b210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b212:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b214:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b218:	2b03      	cmp	r3, #3
 800b21a:	d11e      	bne.n	800b25a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21e:	3338      	adds	r3, #56	@ 0x38
 800b220:	332a      	adds	r3, #42	@ 0x2a
 800b222:	4618      	mov	r0, r3
 800b224:	f7fd ffc2 	bl	80091ac <ld_word>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <find_volume+0x38e>
 800b22e:	230d      	movs	r3, #13
 800b230:	e0b1      	b.n	800b396 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b234:	891b      	ldrh	r3, [r3, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <find_volume+0x39a>
 800b23a:	230d      	movs	r3, #13
 800b23c:	e0ab      	b.n	800b396 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b240:	3338      	adds	r3, #56	@ 0x38
 800b242:	332c      	adds	r3, #44	@ 0x2c
 800b244:	4618      	mov	r0, r3
 800b246:	f7fd ffc9 	bl	80091dc <ld_dword>
 800b24a:	4602      	mov	r2, r0
 800b24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	647b      	str	r3, [r7, #68]	@ 0x44
 800b258:	e01f      	b.n	800b29a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	891b      	ldrh	r3, [r3, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <find_volume+0x3c2>
 800b262:	230d      	movs	r3, #13
 800b264:	e097      	b.n	800b396 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b26a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b26c:	441a      	add	r2, r3
 800b26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b270:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b272:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b276:	2b02      	cmp	r3, #2
 800b278:	d103      	bne.n	800b282 <find_volume+0x3de>
 800b27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	e00a      	b.n	800b298 <find_volume+0x3f4>
 800b282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b284:	69da      	ldr	r2, [r3, #28]
 800b286:	4613      	mov	r3, r2
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	4413      	add	r3, r2
 800b28c:	085a      	lsrs	r2, r3, #1
 800b28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b290:	69db      	ldr	r3, [r3, #28]
 800b292:	f003 0301 	and.w	r3, r3, #1
 800b296:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b298:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b29c:	6a1a      	ldr	r2, [r3, #32]
 800b29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a0:	899b      	ldrh	r3, [r3, #12]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2a6:	440b      	add	r3, r1
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b2ac:	8989      	ldrh	r1, [r1, #12]
 800b2ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d201      	bcs.n	800b2ba <find_volume+0x416>
 800b2b6:	230d      	movs	r3, #13
 800b2b8:	e06d      	b.n	800b396 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c0:	619a      	str	r2, [r3, #24]
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2cc:	2280      	movs	r2, #128	@ 0x80
 800b2ce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b2d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d149      	bne.n	800b36c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2da:	3338      	adds	r3, #56	@ 0x38
 800b2dc:	3330      	adds	r3, #48	@ 0x30
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fd ff64 	bl	80091ac <ld_word>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d140      	bne.n	800b36c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b2ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b2f2:	f7fe fa0b 	bl	800970c <move_window>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d137      	bne.n	800b36c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	2200      	movs	r2, #0
 800b300:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b304:	3338      	adds	r3, #56	@ 0x38
 800b306:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd ff4e 	bl	80091ac <ld_word>
 800b310:	4603      	mov	r3, r0
 800b312:	461a      	mov	r2, r3
 800b314:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b318:	429a      	cmp	r2, r3
 800b31a:	d127      	bne.n	800b36c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	3338      	adds	r3, #56	@ 0x38
 800b320:	4618      	mov	r0, r3
 800b322:	f7fd ff5b 	bl	80091dc <ld_dword>
 800b326:	4603      	mov	r3, r0
 800b328:	4a1d      	ldr	r2, [pc, #116]	@ (800b3a0 <find_volume+0x4fc>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d11e      	bne.n	800b36c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b330:	3338      	adds	r3, #56	@ 0x38
 800b332:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b336:	4618      	mov	r0, r3
 800b338:	f7fd ff50 	bl	80091dc <ld_dword>
 800b33c:	4603      	mov	r3, r0
 800b33e:	4a19      	ldr	r2, [pc, #100]	@ (800b3a4 <find_volume+0x500>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d113      	bne.n	800b36c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	3338      	adds	r3, #56	@ 0x38
 800b348:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fd ff45 	bl	80091dc <ld_dword>
 800b352:	4602      	mov	r2, r0
 800b354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b356:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35a:	3338      	adds	r3, #56	@ 0x38
 800b35c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b360:	4618      	mov	r0, r3
 800b362:	f7fd ff3b 	bl	80091dc <ld_dword>
 800b366:	4602      	mov	r2, r0
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b372:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b374:	4b0c      	ldr	r3, [pc, #48]	@ (800b3a8 <find_volume+0x504>)
 800b376:	881b      	ldrh	r3, [r3, #0]
 800b378:	3301      	adds	r3, #1
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a8 <find_volume+0x504>)
 800b37e:	801a      	strh	r2, [r3, #0]
 800b380:	4b09      	ldr	r3, [pc, #36]	@ (800b3a8 <find_volume+0x504>)
 800b382:	881a      	ldrh	r2, [r3, #0]
 800b384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b386:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38a:	4a08      	ldr	r2, [pc, #32]	@ (800b3ac <find_volume+0x508>)
 800b38c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b38e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b390:	f7fe f954 	bl	800963c <clear_lock>
#endif
	return FR_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	3758      	adds	r7, #88	@ 0x58
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	41615252 	.word	0x41615252
 800b3a4:	61417272 	.word	0x61417272
 800b3a8:	20002f6c 	.word	0x20002f6c
 800b3ac:	20002f90 	.word	0x20002f90

0800b3b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b3ba:	2309      	movs	r3, #9
 800b3bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d01c      	beq.n	800b3fe <validate+0x4e>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d018      	beq.n	800b3fe <validate+0x4e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d013      	beq.n	800b3fe <validate+0x4e>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	889a      	ldrh	r2, [r3, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	88db      	ldrh	r3, [r3, #6]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d10c      	bne.n	800b3fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fd fe40 	bl	8009070 <disk_status>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d101      	bne.n	800b3fe <validate+0x4e>
			res = FR_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d102      	bne.n	800b40a <validate+0x5a>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	e000      	b.n	800b40c <validate+0x5c>
 800b40a:	2300      	movs	r3, #0
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	6013      	str	r3, [r2, #0]
	return res;
 800b410:	7bfb      	ldrb	r3, [r7, #15]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b088      	sub	sp, #32
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	4613      	mov	r3, r2
 800b428:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b42e:	f107 0310 	add.w	r3, r7, #16
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff fc9c 	bl	800ad70 <get_ldnumber>
 800b438:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	da01      	bge.n	800b444 <f_mount+0x28>
 800b440:	230b      	movs	r3, #11
 800b442:	e02b      	b.n	800b49c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b444:	4a17      	ldr	r2, [pc, #92]	@ (800b4a4 <f_mount+0x88>)
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b44c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d005      	beq.n	800b460 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b454:	69b8      	ldr	r0, [r7, #24]
 800b456:	f7fe f8f1 	bl	800963c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	2200      	movs	r2, #0
 800b45e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	490d      	ldr	r1, [pc, #52]	@ (800b4a4 <f_mount+0x88>)
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <f_mount+0x66>
 800b47c:	79fb      	ldrb	r3, [r7, #7]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d001      	beq.n	800b486 <f_mount+0x6a>
 800b482:	2300      	movs	r3, #0
 800b484:	e00a      	b.n	800b49c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b486:	f107 010c 	add.w	r1, r7, #12
 800b48a:	f107 0308 	add.w	r3, r7, #8
 800b48e:	2200      	movs	r2, #0
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff fd07 	bl	800aea4 <find_volume>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b49a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20002f68 	.word	0x20002f68

0800b4a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b09a      	sub	sp, #104	@ 0x68
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <f_open+0x18>
 800b4bc:	2309      	movs	r3, #9
 800b4be:	e1b7      	b.n	800b830 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b4c8:	79fa      	ldrb	r2, [r7, #7]
 800b4ca:	f107 0114 	add.w	r1, r7, #20
 800b4ce:	f107 0308 	add.w	r3, r7, #8
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fce6 	bl	800aea4 <find_volume>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800b4de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f040 819b 	bne.w	800b81e <f_open+0x376>
		dj.obj.fs = fs;
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	f107 0318 	add.w	r3, r7, #24
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fbc5 	bl	800ac84 <follow_path>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b500:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b504:	2b00      	cmp	r3, #0
 800b506:	d118      	bne.n	800b53a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b508:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800b50c:	b25b      	sxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	da03      	bge.n	800b51a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b512:	2306      	movs	r3, #6
 800b514:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b518:	e00f      	b.n	800b53a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	bf8c      	ite	hi
 800b520:	2301      	movhi	r3, #1
 800b522:	2300      	movls	r3, #0
 800b524:	b2db      	uxtb	r3, r3
 800b526:	461a      	mov	r2, r3
 800b528:	f107 0318 	add.w	r3, r7, #24
 800b52c:	4611      	mov	r1, r2
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fd ff3c 	bl	80093ac <chk_lock>
 800b534:	4603      	mov	r3, r0
 800b536:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	f003 031c 	and.w	r3, r3, #28
 800b540:	2b00      	cmp	r3, #0
 800b542:	d07f      	beq.n	800b644 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b544:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d017      	beq.n	800b57c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b54c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b550:	2b04      	cmp	r3, #4
 800b552:	d10e      	bne.n	800b572 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b554:	f7fd ff86 	bl	8009464 <enq_lock>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d006      	beq.n	800b56c <f_open+0xc4>
 800b55e:	f107 0318 	add.w	r3, r7, #24
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff f8de 	bl	800a724 <dir_register>
 800b568:	4603      	mov	r3, r0
 800b56a:	e000      	b.n	800b56e <f_open+0xc6>
 800b56c:	2312      	movs	r3, #18
 800b56e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b572:	79fb      	ldrb	r3, [r7, #7]
 800b574:	f043 0308 	orr.w	r3, r3, #8
 800b578:	71fb      	strb	r3, [r7, #7]
 800b57a:	e010      	b.n	800b59e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b57c:	7fbb      	ldrb	r3, [r7, #30]
 800b57e:	f003 0311 	and.w	r3, r3, #17
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <f_open+0xe6>
					res = FR_DENIED;
 800b586:	2307      	movs	r3, #7
 800b588:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b58c:	e007      	b.n	800b59e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b58e:	79fb      	ldrb	r3, [r7, #7]
 800b590:	f003 0304 	and.w	r3, r3, #4
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <f_open+0xf6>
 800b598:	2308      	movs	r3, #8
 800b59a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b59e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d168      	bne.n	800b678 <f_open+0x1d0>
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	f003 0308 	and.w	r3, r3, #8
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d063      	beq.n	800b678 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b5b0:	f7fd fd00 	bl	8008fb4 <get_fattime>
 800b5b4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b8:	330e      	adds	r3, #14
 800b5ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fd fe4b 	bl	8009258 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	3316      	adds	r3, #22
 800b5c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fd fe45 	bl	8009258 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d0:	330b      	adds	r3, #11
 800b5d2:	2220      	movs	r2, #32
 800b5d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fe fe1a 	bl	800a216 <ld_clust>
 800b5e2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fe32 	bl	800a254 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f2:	331c      	adds	r3, #28
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fd fe2e 	bl	8009258 <st_dword>
					fs->wflag = 1;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	2201      	movs	r2, #1
 800b600:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b604:	2b00      	cmp	r3, #0
 800b606:	d037      	beq.n	800b678 <f_open+0x1d0>
						dw = fs->winsect;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b60c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b60e:	f107 0318 	add.w	r3, r7, #24
 800b612:	2200      	movs	r2, #0
 800b614:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe fb22 	bl	8009c60 <remove_chain>
 800b61c:	4603      	mov	r3, r0
 800b61e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800b622:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b626:	2b00      	cmp	r3, #0
 800b628:	d126      	bne.n	800b678 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe f86c 	bl	800970c <move_window>
 800b634:	4603      	mov	r3, r0
 800b636:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b63e:	3a01      	subs	r2, #1
 800b640:	615a      	str	r2, [r3, #20]
 800b642:	e019      	b.n	800b678 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b644:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d115      	bne.n	800b678 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b64c:	7fbb      	ldrb	r3, [r7, #30]
 800b64e:	f003 0310 	and.w	r3, r3, #16
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <f_open+0x1b6>
					res = FR_NO_FILE;
 800b656:	2304      	movs	r3, #4
 800b658:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b65c:	e00c      	b.n	800b678 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	f003 0302 	and.w	r3, r3, #2
 800b664:	2b00      	cmp	r3, #0
 800b666:	d007      	beq.n	800b678 <f_open+0x1d0>
 800b668:	7fbb      	ldrb	r3, [r7, #30]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <f_open+0x1d0>
						res = FR_DENIED;
 800b672:	2307      	movs	r3, #7
 800b674:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b678:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d126      	bne.n	800b6ce <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b680:	79fb      	ldrb	r3, [r7, #7]
 800b682:	f003 0308 	and.w	r3, r3, #8
 800b686:	2b00      	cmp	r3, #0
 800b688:	d003      	beq.n	800b692 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b690:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b69a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b6a0:	79fb      	ldrb	r3, [r7, #7]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	bf8c      	ite	hi
 800b6a6:	2301      	movhi	r3, #1
 800b6a8:	2300      	movls	r3, #0
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f107 0318 	add.w	r3, r7, #24
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fd fef7 	bl	80094a8 <inc_lock>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d102      	bne.n	800b6ce <f_open+0x226>
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b6ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 80a3 	bne.w	800b81e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fe fd99 	bl	800a216 <ld_clust>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ec:	331c      	adds	r3, #28
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fd fd74 	bl	80091dc <ld_dword>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	88da      	ldrh	r2, [r3, #6]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	79fa      	ldrb	r2, [r7, #7]
 800b712:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	3330      	adds	r3, #48	@ 0x30
 800b72a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b72e:	2100      	movs	r1, #0
 800b730:	4618      	mov	r0, r3
 800b732:	f7fd fdde 	bl	80092f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d06e      	beq.n	800b81e <f_open+0x376>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d06a      	beq.n	800b81e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	68da      	ldr	r2, [r3, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	895b      	ldrh	r3, [r3, #10]
 800b754:	461a      	mov	r2, r3
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	899b      	ldrh	r3, [r3, #12]
 800b75a:	fb02 f303 	mul.w	r3, r2, r3
 800b75e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b76c:	e016      	b.n	800b79c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe f887 	bl	8009886 <get_fat>
 800b778:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b77a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d802      	bhi.n	800b786 <f_open+0x2de>
 800b780:	2302      	movs	r3, #2
 800b782:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b786:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78c:	d102      	bne.n	800b794 <f_open+0x2ec>
 800b78e:	2301      	movs	r3, #1
 800b790:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b794:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b798:	1ad3      	subs	r3, r2, r3
 800b79a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b79c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d103      	bne.n	800b7ac <f_open+0x304>
 800b7a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b7a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d8e0      	bhi.n	800b76e <f_open+0x2c6>
				}
				fp->clust = clst;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b7b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b7b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d131      	bne.n	800b81e <f_open+0x376>
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	899b      	ldrh	r3, [r3, #12]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7c6:	fb01 f202 	mul.w	r2, r1, r2
 800b7ca:	1a9b      	subs	r3, r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d026      	beq.n	800b81e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe f837 	bl	8009848 <clust2sect>
 800b7da:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800b7dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d103      	bne.n	800b7ea <f_open+0x342>
						res = FR_INT_ERR;
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800b7e8:	e019      	b.n	800b81e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	899b      	ldrh	r3, [r3, #12]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7f8:	441a      	add	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	7858      	ldrb	r0, [r3, #1]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	6a1a      	ldr	r2, [r3, #32]
 800b80c:	2301      	movs	r3, #1
 800b80e:	f7fd fc6f 	bl	80090f0 <disk_read>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d002      	beq.n	800b81e <f_open+0x376>
 800b818:	2301      	movs	r3, #1
 800b81a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b81e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <f_open+0x384>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b82c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800b830:	4618      	mov	r0, r3
 800b832:	3768      	adds	r7, #104	@ 0x68
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b08c      	sub	sp, #48	@ 0x30
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f107 0210 	add.w	r2, r7, #16
 800b856:	4611      	mov	r1, r2
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff fda9 	bl	800b3b0 <validate>
 800b85e:	4603      	mov	r3, r0
 800b860:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d107      	bne.n	800b87c <f_write+0x44>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	7d5b      	ldrb	r3, [r3, #21]
 800b870:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b874:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <f_write+0x4a>
 800b87c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b880:	e16a      	b.n	800bb58 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	7d1b      	ldrb	r3, [r3, #20]
 800b886:	f003 0302 	and.w	r3, r3, #2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d101      	bne.n	800b892 <f_write+0x5a>
 800b88e:	2307      	movs	r3, #7
 800b890:	e162      	b.n	800bb58 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	699a      	ldr	r2, [r3, #24]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	441a      	add	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	f080 814c 	bcs.w	800bb3c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	43db      	mvns	r3, r3
 800b8aa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b8ac:	e146      	b.n	800bb3c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	8992      	ldrh	r2, [r2, #12]
 800b8b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ba:	fb01 f202 	mul.w	r2, r1, r2
 800b8be:	1a9b      	subs	r3, r3, r2
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f040 80f1 	bne.w	800baa8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	693a      	ldr	r2, [r7, #16]
 800b8cc:	8992      	ldrh	r2, [r2, #12]
 800b8ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8d2:	693a      	ldr	r2, [r7, #16]
 800b8d4:	8952      	ldrh	r2, [r2, #10]
 800b8d6:	3a01      	subs	r2, #1
 800b8d8:	4013      	ands	r3, r2
 800b8da:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d143      	bne.n	800b96a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10c      	bne.n	800b904 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d11a      	bne.n	800b92c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fe fa15 	bl	8009d2a <create_chain>
 800b900:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b902:	e013      	b.n	800b92c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	4619      	mov	r1, r3
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f7fe faa1 	bl	8009e5a <clmt_clust>
 800b918:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b91a:	e007      	b.n	800b92c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	4619      	mov	r1, r3
 800b924:	4610      	mov	r0, r2
 800b926:	f7fe fa00 	bl	8009d2a <create_chain>
 800b92a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 8109 	beq.w	800bb46 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b936:	2b01      	cmp	r3, #1
 800b938:	d104      	bne.n	800b944 <f_write+0x10c>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2202      	movs	r2, #2
 800b93e:	755a      	strb	r2, [r3, #21]
 800b940:	2302      	movs	r3, #2
 800b942:	e109      	b.n	800bb58 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94a:	d104      	bne.n	800b956 <f_write+0x11e>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2201      	movs	r2, #1
 800b950:	755a      	strb	r2, [r3, #21]
 800b952:	2301      	movs	r3, #1
 800b954:	e100      	b.n	800bb58 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b95a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d102      	bne.n	800b96a <f_write+0x132>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b968:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	7d1b      	ldrb	r3, [r3, #20]
 800b96e:	b25b      	sxtb	r3, r3
 800b970:	2b00      	cmp	r3, #0
 800b972:	da18      	bge.n	800b9a6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	7858      	ldrb	r0, [r3, #1]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	6a1a      	ldr	r2, [r3, #32]
 800b982:	2301      	movs	r3, #1
 800b984:	f7fd fbd4 	bl	8009130 <disk_write>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <f_write+0x160>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2201      	movs	r2, #1
 800b992:	755a      	strb	r2, [r3, #21]
 800b994:	2301      	movs	r3, #1
 800b996:	e0df      	b.n	800bb58 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	7d1b      	ldrb	r3, [r3, #20]
 800b99c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9a0:	b2da      	uxtb	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	69db      	ldr	r3, [r3, #28]
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	f7fd ff4a 	bl	8009848 <clust2sect>
 800b9b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d104      	bne.n	800b9c6 <f_write+0x18e>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	755a      	strb	r2, [r3, #21]
 800b9c2:	2302      	movs	r3, #2
 800b9c4:	e0c8      	b.n	800bb58 <f_write+0x320>
			sect += csect;
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	899b      	ldrh	r3, [r3, #12]
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9da:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b9dc:	6a3b      	ldr	r3, [r7, #32]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d043      	beq.n	800ba6a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	8952      	ldrh	r2, [r2, #10]
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d905      	bls.n	800b9fc <f_write+0x1c4>
					cc = fs->csize - csect;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	895b      	ldrh	r3, [r3, #10]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	7858      	ldrb	r0, [r3, #1]
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	697a      	ldr	r2, [r7, #20]
 800ba04:	69f9      	ldr	r1, [r7, #28]
 800ba06:	f7fd fb93 	bl	8009130 <disk_write>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <f_write+0x1e2>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2201      	movs	r2, #1
 800ba14:	755a      	strb	r2, [r3, #21]
 800ba16:	2301      	movs	r3, #1
 800ba18:	e09e      	b.n	800bb58 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a1a      	ldr	r2, [r3, #32]
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	6a3a      	ldr	r2, [r7, #32]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d918      	bls.n	800ba5a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a1a      	ldr	r2, [r3, #32]
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	8992      	ldrh	r2, [r2, #12]
 800ba3a:	fb02 f303 	mul.w	r3, r2, r3
 800ba3e:	69fa      	ldr	r2, [r7, #28]
 800ba40:	18d1      	adds	r1, r2, r3
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	899b      	ldrh	r3, [r3, #12]
 800ba46:	461a      	mov	r2, r3
 800ba48:	f7fd fc32 	bl	80092b0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	7d1b      	ldrb	r3, [r3, #20]
 800ba50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	899b      	ldrh	r3, [r3, #12]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	fb02 f303 	mul.w	r3, r2, r3
 800ba66:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ba68:	e04b      	b.n	800bb02 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6a1b      	ldr	r3, [r3, #32]
 800ba6e:	697a      	ldr	r2, [r7, #20]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d016      	beq.n	800baa2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	699a      	ldr	r2, [r3, #24]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d210      	bcs.n	800baa2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	7858      	ldrb	r0, [r3, #1]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	f7fd fb2f 	bl	80090f0 <disk_read>
 800ba92:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d004      	beq.n	800baa2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	755a      	strb	r2, [r3, #21]
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e05a      	b.n	800bb58 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	899b      	ldrh	r3, [r3, #12]
 800baac:	4618      	mov	r0, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	8992      	ldrh	r2, [r2, #12]
 800bab6:	fbb3 f1f2 	udiv	r1, r3, r2
 800baba:	fb01 f202 	mul.w	r2, r1, r2
 800babe:	1a9b      	subs	r3, r3, r2
 800bac0:	1ac3      	subs	r3, r0, r3
 800bac2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d901      	bls.n	800bad0 <f_write+0x298>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	8992      	ldrh	r2, [r2, #12]
 800bade:	fbb3 f0f2 	udiv	r0, r3, r2
 800bae2:	fb00 f202 	mul.w	r2, r0, r2
 800bae6:	1a9b      	subs	r3, r3, r2
 800bae8:	440b      	add	r3, r1
 800baea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baec:	69f9      	ldr	r1, [r7, #28]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fd fbde 	bl	80092b0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	7d1b      	ldrb	r3, [r3, #20]
 800baf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bb02:	69fa      	ldr	r2, [r7, #28]
 800bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb06:	4413      	add	r3, r2
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb10:	441a      	add	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	619a      	str	r2, [r3, #24]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	bf38      	it	cc
 800bb22:	461a      	movcc	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	60da      	str	r2, [r3, #12]
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2e:	441a      	add	r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f47f aeb5 	bne.w	800b8ae <f_write+0x76>
 800bb44:	e000      	b.n	800bb48 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bb46:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	7d1b      	ldrb	r3, [r3, #20]
 800bb4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3730      	adds	r7, #48	@ 0x30
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f107 0208 	add.w	r2, r7, #8
 800bb6e:	4611      	mov	r1, r2
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7ff fc1d 	bl	800b3b0 <validate>
 800bb76:	4603      	mov	r3, r0
 800bb78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d168      	bne.n	800bc52 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	7d1b      	ldrb	r3, [r3, #20]
 800bb84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d062      	beq.n	800bc52 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7d1b      	ldrb	r3, [r3, #20]
 800bb90:	b25b      	sxtb	r3, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	da15      	bge.n	800bbc2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	7858      	ldrb	r0, [r3, #1]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6a1a      	ldr	r2, [r3, #32]
 800bba4:	2301      	movs	r3, #1
 800bba6:	f7fd fac3 	bl	8009130 <disk_write>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <f_sync+0x54>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e04f      	b.n	800bc54 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7d1b      	ldrb	r3, [r3, #20]
 800bbb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bbc2:	f7fd f9f7 	bl	8008fb4 <get_fattime>
 800bbc6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	f7fd fd9b 	bl	800970c <move_window>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bbda:	7dfb      	ldrb	r3, [r7, #23]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d138      	bne.n	800bc52 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbe4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	330b      	adds	r3, #11
 800bbea:	781a      	ldrb	r2, [r3, #0]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	330b      	adds	r3, #11
 800bbf0:	f042 0220 	orr.w	r2, r2, #32
 800bbf4:	b2d2      	uxtb	r2, r2
 800bbf6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6818      	ldr	r0, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	461a      	mov	r2, r3
 800bc02:	68f9      	ldr	r1, [r7, #12]
 800bc04:	f7fe fb26 	bl	800a254 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f103 021c 	add.w	r2, r3, #28
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	4619      	mov	r1, r3
 800bc14:	4610      	mov	r0, r2
 800bc16:	f7fd fb1f 	bl	8009258 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3316      	adds	r3, #22
 800bc1e:	6939      	ldr	r1, [r7, #16]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fd fb19 	bl	8009258 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	3312      	adds	r3, #18
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7fd faf8 	bl	8009222 <st_word>
					fs->wflag = 1;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2201      	movs	r2, #1
 800bc36:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fd fd94 	bl	8009768 <sync_fs>
 800bc40:	4603      	mov	r3, r0
 800bc42:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7d1b      	ldrb	r3, [r3, #20]
 800bc48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3718      	adds	r7, #24
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}

0800bc5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7ff ff7b 	bl	800bb60 <f_sync>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d118      	bne.n	800bca6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f107 0208 	add.w	r2, r7, #8
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff fb97 	bl	800b3b0 <validate>
 800bc82:	4603      	mov	r3, r0
 800bc84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10c      	bne.n	800bca6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fd fc97 	bl	80095c4 <dec_lock>
 800bc96:	4603      	mov	r3, r0
 800bc98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b090      	sub	sp, #64	@ 0x40
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f107 0208 	add.w	r2, r7, #8
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff fb74 	bl	800b3b0 <validate>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bcce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d103      	bne.n	800bcde <f_lseek+0x2e>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7d5b      	ldrb	r3, [r3, #21]
 800bcda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bcde:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <f_lseek+0x3c>
 800bce6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bcea:	e201      	b.n	800c0f0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f000 80d9 	beq.w	800bea8 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfc:	d15a      	bne.n	800bdb4 <f_lseek+0x104>
			tbl = fp->cltbl;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd02:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd06:	1d1a      	adds	r2, r3, #4
 800bd08:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	617b      	str	r3, [r7, #20]
 800bd0e:	2302      	movs	r3, #2
 800bd10:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d03a      	beq.n	800bd94 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd20:	613b      	str	r3, [r7, #16]
 800bd22:	2300      	movs	r3, #0
 800bd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd28:	3302      	adds	r3, #2
 800bd2a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	3301      	adds	r3, #1
 800bd34:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fd fda3 	bl	8009886 <get_fat>
 800bd40:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d804      	bhi.n	800bd52 <f_lseek+0xa2>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	755a      	strb	r2, [r3, #21]
 800bd4e:	2302      	movs	r3, #2
 800bd50:	e1ce      	b.n	800c0f0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd58:	d104      	bne.n	800bd64 <f_lseek+0xb4>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	755a      	strb	r2, [r3, #21]
 800bd60:	2301      	movs	r3, #1
 800bd62:	e1c5      	b.n	800c0f0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	3301      	adds	r3, #1
 800bd68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d0de      	beq.n	800bd2c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800bd6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d809      	bhi.n	800bd8a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	1d1a      	adds	r2, r3, #4
 800bd7a:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd82:	1d1a      	adds	r2, r3, #4
 800bd84:	627a      	str	r2, [r7, #36]	@ 0x24
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	69db      	ldr	r3, [r3, #28]
 800bd8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d3c4      	bcc.n	800bd1e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd9a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800bd9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d803      	bhi.n	800bdac <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800bda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	e19f      	b.n	800c0ec <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800bdac:	2311      	movs	r3, #17
 800bdae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bdb2:	e19b      	b.n	800c0ec <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	68db      	ldr	r3, [r3, #12]
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d902      	bls.n	800bdc4 <f_lseek+0x114>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	683a      	ldr	r2, [r7, #0]
 800bdc8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 818d 	beq.w	800c0ec <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7fe f83e 	bl	8009e5a <clmt_clust>
 800bdde:	4602      	mov	r2, r0
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	4619      	mov	r1, r3
 800bdec:	4610      	mov	r0, r2
 800bdee:	f7fd fd2b 	bl	8009848 <clust2sect>
 800bdf2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d104      	bne.n	800be04 <f_lseek+0x154>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2202      	movs	r2, #2
 800bdfe:	755a      	strb	r2, [r3, #21]
 800be00:	2302      	movs	r3, #2
 800be02:	e175      	b.n	800c0f0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	3b01      	subs	r3, #1
 800be08:	68ba      	ldr	r2, [r7, #8]
 800be0a:	8992      	ldrh	r2, [r2, #12]
 800be0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	8952      	ldrh	r2, [r2, #10]
 800be14:	3a01      	subs	r2, #1
 800be16:	4013      	ands	r3, r2
 800be18:	69ba      	ldr	r2, [r7, #24]
 800be1a:	4413      	add	r3, r2
 800be1c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	68ba      	ldr	r2, [r7, #8]
 800be24:	8992      	ldrh	r2, [r2, #12]
 800be26:	fbb3 f1f2 	udiv	r1, r3, r2
 800be2a:	fb01 f202 	mul.w	r2, r1, r2
 800be2e:	1a9b      	subs	r3, r3, r2
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 815b 	beq.w	800c0ec <f_lseek+0x43c>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	69ba      	ldr	r2, [r7, #24]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	f000 8155 	beq.w	800c0ec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	7d1b      	ldrb	r3, [r3, #20]
 800be46:	b25b      	sxtb	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	da18      	bge.n	800be7e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	7858      	ldrb	r0, [r3, #1]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1a      	ldr	r2, [r3, #32]
 800be5a:	2301      	movs	r3, #1
 800be5c:	f7fd f968 	bl	8009130 <disk_write>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d004      	beq.n	800be70 <f_lseek+0x1c0>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	755a      	strb	r2, [r3, #21]
 800be6c:	2301      	movs	r3, #1
 800be6e:	e13f      	b.n	800c0f0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7d1b      	ldrb	r3, [r3, #20]
 800be74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	7858      	ldrb	r0, [r3, #1]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be88:	2301      	movs	r3, #1
 800be8a:	69ba      	ldr	r2, [r7, #24]
 800be8c:	f7fd f930 	bl	80090f0 <disk_read>
 800be90:	4603      	mov	r3, r0
 800be92:	2b00      	cmp	r3, #0
 800be94:	d004      	beq.n	800bea0 <f_lseek+0x1f0>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	755a      	strb	r2, [r3, #21]
 800be9c:	2301      	movs	r3, #1
 800be9e:	e127      	b.n	800c0f0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	69ba      	ldr	r2, [r7, #24]
 800bea4:	621a      	str	r2, [r3, #32]
 800bea6:	e121      	b.n	800c0ec <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	683a      	ldr	r2, [r7, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d908      	bls.n	800bec4 <f_lseek+0x214>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	7d1b      	ldrb	r3, [r3, #20]
 800beb6:	f003 0302 	and.w	r3, r3, #2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d102      	bne.n	800bec4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	637b      	str	r3, [r7, #52]	@ 0x34
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bed2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 80b5 	beq.w	800c046 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	895b      	ldrh	r3, [r3, #10]
 800bee0:	461a      	mov	r2, r3
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	899b      	ldrh	r3, [r3, #12]
 800bee6:	fb02 f303 	mul.w	r3, r2, r3
 800beea:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800beec:	6a3b      	ldr	r3, [r7, #32]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d01b      	beq.n	800bf2a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	fbb2 f2f3 	udiv	r2, r2, r3
 800befc:	6a3b      	ldr	r3, [r7, #32]
 800befe:	1e59      	subs	r1, r3, #1
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d30f      	bcc.n	800bf2a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	1e5a      	subs	r2, r3, #1
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	425b      	negs	r3, r3
 800bf12:	401a      	ands	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	683a      	ldr	r2, [r7, #0]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf28:	e022      	b.n	800bf70 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800bf30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d119      	bne.n	800bf6a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2100      	movs	r1, #0
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fd fef5 	bl	8009d2a <create_chain>
 800bf40:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d104      	bne.n	800bf52 <f_lseek+0x2a2>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	755a      	strb	r2, [r3, #21]
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e0ce      	b.n	800c0f0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf58:	d104      	bne.n	800bf64 <f_lseek+0x2b4>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	755a      	strb	r2, [r3, #21]
 800bf60:	2301      	movs	r3, #1
 800bf62:	e0c5      	b.n	800c0f0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf68:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf6e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800bf70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d067      	beq.n	800c046 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800bf76:	e03a      	b.n	800bfee <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	603b      	str	r3, [r7, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	441a      	add	r2, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7d1b      	ldrb	r3, [r3, #20]
 800bf90:	f003 0302 	and.w	r3, r3, #2
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00b      	beq.n	800bfb0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fd fec4 	bl	8009d2a <create_chain>
 800bfa2:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d108      	bne.n	800bfbc <f_lseek+0x30c>
							ofs = 0; break;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	603b      	str	r3, [r7, #0]
 800bfae:	e022      	b.n	800bff6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fd fc66 	bl	8009886 <get_fat>
 800bfba:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc2:	d104      	bne.n	800bfce <f_lseek+0x31e>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	755a      	strb	r2, [r3, #21]
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e090      	b.n	800c0f0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800bfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d904      	bls.n	800bfde <f_lseek+0x32e>
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	69db      	ldr	r3, [r3, #28]
 800bfd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d304      	bcc.n	800bfe8 <f_lseek+0x338>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	755a      	strb	r2, [r3, #21]
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	e083      	b.n	800c0f0 <f_lseek+0x440>
					fp->clust = clst;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfec:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d8c0      	bhi.n	800bf78 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	699a      	ldr	r2, [r3, #24]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	441a      	add	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	899b      	ldrh	r3, [r3, #12]
 800c006:	461a      	mov	r2, r3
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c00e:	fb01 f202 	mul.w	r2, r1, r2
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	2b00      	cmp	r3, #0
 800c016:	d016      	beq.n	800c046 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fd fc13 	bl	8009848 <clust2sect>
 800c022:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c026:	2b00      	cmp	r3, #0
 800c028:	d104      	bne.n	800c034 <f_lseek+0x384>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2202      	movs	r2, #2
 800c02e:	755a      	strb	r2, [r3, #21]
 800c030:	2302      	movs	r3, #2
 800c032:	e05d      	b.n	800c0f0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	899b      	ldrh	r3, [r3, #12]
 800c038:	461a      	mov	r2, r3
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c042:	4413      	add	r3, r2
 800c044:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	699a      	ldr	r2, [r3, #24]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d90a      	bls.n	800c068 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	699a      	ldr	r2, [r3, #24]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	7d1b      	ldrb	r3, [r3, #20]
 800c05e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c062:	b2da      	uxtb	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	699b      	ldr	r3, [r3, #24]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	8992      	ldrh	r2, [r2, #12]
 800c070:	fbb3 f1f2 	udiv	r1, r3, r2
 800c074:	fb01 f202 	mul.w	r2, r1, r2
 800c078:	1a9b      	subs	r3, r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d036      	beq.n	800c0ec <f_lseek+0x43c>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c084:	429a      	cmp	r2, r3
 800c086:	d031      	beq.n	800c0ec <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7d1b      	ldrb	r3, [r3, #20]
 800c08c:	b25b      	sxtb	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	da18      	bge.n	800c0c4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	7858      	ldrb	r0, [r3, #1]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a1a      	ldr	r2, [r3, #32]
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f7fd f845 	bl	8009130 <disk_write>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d004      	beq.n	800c0b6 <f_lseek+0x406>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	755a      	strb	r2, [r3, #21]
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e01c      	b.n	800c0f0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	7d1b      	ldrb	r3, [r3, #20]
 800c0ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0be:	b2da      	uxtb	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	7858      	ldrb	r0, [r3, #1]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0d2:	f7fd f80d 	bl	80090f0 <disk_read>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d004      	beq.n	800c0e6 <f_lseek+0x436>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	755a      	strb	r2, [r3, #21]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e004      	b.n	800c0f0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0ea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c0ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3740      	adds	r7, #64	@ 0x40
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c104:	78fb      	ldrb	r3, [r7, #3]
 800c106:	2b0a      	cmp	r3, #10
 800c108:	d103      	bne.n	800c112 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c10a:	210d      	movs	r1, #13
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff fff3 	bl	800c0f8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	db25      	blt.n	800c16a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	60fa      	str	r2, [r7, #12]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	4413      	add	r3, r2
 800c128:	78fa      	ldrb	r2, [r7, #3]
 800c12a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b3c      	cmp	r3, #60	@ 0x3c
 800c130:	dd12      	ble.n	800c158 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6818      	ldr	r0, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f103 010c 	add.w	r1, r3, #12
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	f107 0308 	add.w	r3, r7, #8
 800c142:	f7ff fb79 	bl	800b838 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d101      	bne.n	800c152 <putc_bfd+0x5a>
 800c14e:	2300      	movs	r3, #0
 800c150:	e001      	b.n	800c156 <putc_bfd+0x5e>
 800c152:	f04f 33ff 	mov.w	r3, #4294967295
 800c156:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	609a      	str	r2, [r3, #8]
 800c168:	e000      	b.n	800c16c <putc_bfd+0x74>
	if (i < 0) return;
 800c16a:	bf00      	nop
}
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}

0800c172 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c172:	b580      	push	{r7, lr}
 800c174:	b084      	sub	sp, #16
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	db16      	blt.n	800c1b0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6818      	ldr	r0, [r3, #0]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f103 010c 	add.w	r1, r3, #12
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	461a      	mov	r2, r3
 800c192:	f107 030c 	add.w	r3, r7, #12
 800c196:	f7ff fb4f 	bl	800b838 <f_write>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d107      	bne.n	800c1b0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d102      	bne.n	800c1b0 <putc_flush+0x3e>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	e001      	b.n	800c1b4 <putc_flush+0x42>
	return EOF;
 800c1b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	605a      	str	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	609a      	str	r2, [r3, #8]
}
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b096      	sub	sp, #88	@ 0x58
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c1f0:	f107 030c 	add.w	r3, r7, #12
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff ffe0 	bl	800c1bc <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c1fc:	e009      	b.n	800c212 <f_puts+0x2c>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	1c5a      	adds	r2, r3, #1
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	781a      	ldrb	r2, [r3, #0]
 800c206:	f107 030c 	add.w	r3, r7, #12
 800c20a:	4611      	mov	r1, r2
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7ff ff73 	bl	800c0f8 <putc_bfd>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f1      	bne.n	800c1fe <f_puts+0x18>
	return putc_flush(&pb);
 800c21a:	f107 030c 	add.w	r3, r7, #12
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff ffa7 	bl	800c172 <putc_flush>
 800c224:	4603      	mov	r3, r0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3758      	adds	r7, #88	@ 0x58
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
	...

0800c230 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c230:	b480      	push	{r7}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	4613      	mov	r3, r2
 800c23c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c23e:	2301      	movs	r3, #1
 800c240:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c246:	4b1f      	ldr	r3, [pc, #124]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c248:	7a5b      	ldrb	r3, [r3, #9]
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d131      	bne.n	800c2b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c250:	4b1c      	ldr	r3, [pc, #112]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c252:	7a5b      	ldrb	r3, [r3, #9]
 800c254:	b2db      	uxtb	r3, r3
 800c256:	461a      	mov	r2, r3
 800c258:	4b1a      	ldr	r3, [pc, #104]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c25a:	2100      	movs	r1, #0
 800c25c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c25e:	4b19      	ldr	r3, [pc, #100]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c260:	7a5b      	ldrb	r3, [r3, #9]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	4a17      	ldr	r2, [pc, #92]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c26e:	4b15      	ldr	r3, [pc, #84]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c270:	7a5b      	ldrb	r3, [r3, #9]
 800c272:	b2db      	uxtb	r3, r3
 800c274:	461a      	mov	r2, r3
 800c276:	4b13      	ldr	r3, [pc, #76]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c278:	4413      	add	r3, r2
 800c27a:	79fa      	ldrb	r2, [r7, #7]
 800c27c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c27e:	4b11      	ldr	r3, [pc, #68]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c280:	7a5b      	ldrb	r3, [r3, #9]
 800c282:	b2db      	uxtb	r3, r3
 800c284:	1c5a      	adds	r2, r3, #1
 800c286:	b2d1      	uxtb	r1, r2
 800c288:	4a0e      	ldr	r2, [pc, #56]	@ (800c2c4 <FATFS_LinkDriverEx+0x94>)
 800c28a:	7251      	strb	r1, [r2, #9]
 800c28c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c28e:	7dbb      	ldrb	r3, [r7, #22]
 800c290:	3330      	adds	r3, #48	@ 0x30
 800c292:	b2da      	uxtb	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	3301      	adds	r3, #1
 800c29c:	223a      	movs	r2, #58	@ 0x3a
 800c29e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	3302      	adds	r3, #2
 800c2a4:	222f      	movs	r2, #47	@ 0x2f
 800c2a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	3303      	adds	r3, #3
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	20003190 	.word	0x20003190

0800c2c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff ffaa 	bl	800c230 <FATFS_LinkDriverEx>
 800c2dc:	4603      	mov	r3, r0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
	...

0800c2e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	6039      	str	r1, [r7, #0]
 800c2f2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c2f4:	88fb      	ldrh	r3, [r7, #6]
 800c2f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2f8:	d802      	bhi.n	800c300 <ff_convert+0x18>
		c = chr;
 800c2fa:	88fb      	ldrh	r3, [r7, #6]
 800c2fc:	81fb      	strh	r3, [r7, #14]
 800c2fe:	e025      	b.n	800c34c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00b      	beq.n	800c31e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c306:	88fb      	ldrh	r3, [r7, #6]
 800c308:	2bff      	cmp	r3, #255	@ 0xff
 800c30a:	d805      	bhi.n	800c318 <ff_convert+0x30>
 800c30c:	88fb      	ldrh	r3, [r7, #6]
 800c30e:	3b80      	subs	r3, #128	@ 0x80
 800c310:	4a12      	ldr	r2, [pc, #72]	@ (800c35c <ff_convert+0x74>)
 800c312:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c316:	e000      	b.n	800c31a <ff_convert+0x32>
 800c318:	2300      	movs	r3, #0
 800c31a:	81fb      	strh	r3, [r7, #14]
 800c31c:	e016      	b.n	800c34c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c31e:	2300      	movs	r3, #0
 800c320:	81fb      	strh	r3, [r7, #14]
 800c322:	e009      	b.n	800c338 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c324:	89fb      	ldrh	r3, [r7, #14]
 800c326:	4a0d      	ldr	r2, [pc, #52]	@ (800c35c <ff_convert+0x74>)
 800c328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c32c:	88fa      	ldrh	r2, [r7, #6]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d006      	beq.n	800c340 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c332:	89fb      	ldrh	r3, [r7, #14]
 800c334:	3301      	adds	r3, #1
 800c336:	81fb      	strh	r3, [r7, #14]
 800c338:	89fb      	ldrh	r3, [r7, #14]
 800c33a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c33c:	d9f2      	bls.n	800c324 <ff_convert+0x3c>
 800c33e:	e000      	b.n	800c342 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c340:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c342:	89fb      	ldrh	r3, [r7, #14]
 800c344:	3380      	adds	r3, #128	@ 0x80
 800c346:	b29b      	uxth	r3, r3
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c34c:	89fb      	ldrh	r3, [r7, #14]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	08011ad4 	.word	0x08011ad4

0800c360 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	4603      	mov	r3, r0
 800c368:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c36a:	88fb      	ldrh	r3, [r7, #6]
 800c36c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c370:	d201      	bcs.n	800c376 <ff_wtoupper+0x16>
 800c372:	4b3e      	ldr	r3, [pc, #248]	@ (800c46c <ff_wtoupper+0x10c>)
 800c374:	e000      	b.n	800c378 <ff_wtoupper+0x18>
 800c376:	4b3e      	ldr	r3, [pc, #248]	@ (800c470 <ff_wtoupper+0x110>)
 800c378:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	1c9a      	adds	r2, r3, #2
 800c37e:	617a      	str	r2, [r7, #20]
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c384:	8a7b      	ldrh	r3, [r7, #18]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d068      	beq.n	800c45c <ff_wtoupper+0xfc>
 800c38a:	88fa      	ldrh	r2, [r7, #6]
 800c38c:	8a7b      	ldrh	r3, [r7, #18]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d364      	bcc.n	800c45c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	1c9a      	adds	r2, r3, #2
 800c396:	617a      	str	r2, [r7, #20]
 800c398:	881b      	ldrh	r3, [r3, #0]
 800c39a:	823b      	strh	r3, [r7, #16]
 800c39c:	8a3b      	ldrh	r3, [r7, #16]
 800c39e:	0a1b      	lsrs	r3, r3, #8
 800c3a0:	81fb      	strh	r3, [r7, #14]
 800c3a2:	8a3b      	ldrh	r3, [r7, #16]
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c3a8:	88fa      	ldrh	r2, [r7, #6]
 800c3aa:	8a79      	ldrh	r1, [r7, #18]
 800c3ac:	8a3b      	ldrh	r3, [r7, #16]
 800c3ae:	440b      	add	r3, r1
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	da49      	bge.n	800c448 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c3b4:	89fb      	ldrh	r3, [r7, #14]
 800c3b6:	2b08      	cmp	r3, #8
 800c3b8:	d84f      	bhi.n	800c45a <ff_wtoupper+0xfa>
 800c3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c0 <ff_wtoupper+0x60>)
 800c3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c0:	0800c3e5 	.word	0x0800c3e5
 800c3c4:	0800c3f7 	.word	0x0800c3f7
 800c3c8:	0800c40d 	.word	0x0800c40d
 800c3cc:	0800c415 	.word	0x0800c415
 800c3d0:	0800c41d 	.word	0x0800c41d
 800c3d4:	0800c425 	.word	0x0800c425
 800c3d8:	0800c42d 	.word	0x0800c42d
 800c3dc:	0800c435 	.word	0x0800c435
 800c3e0:	0800c43d 	.word	0x0800c43d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c3e4:	88fa      	ldrh	r2, [r7, #6]
 800c3e6:	8a7b      	ldrh	r3, [r7, #18]
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	697a      	ldr	r2, [r7, #20]
 800c3ee:	4413      	add	r3, r2
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	80fb      	strh	r3, [r7, #6]
 800c3f4:	e027      	b.n	800c446 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c3f6:	88fa      	ldrh	r2, [r7, #6]
 800c3f8:	8a7b      	ldrh	r3, [r7, #18]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	f003 0301 	and.w	r3, r3, #1
 800c402:	b29b      	uxth	r3, r3
 800c404:	88fa      	ldrh	r2, [r7, #6]
 800c406:	1ad3      	subs	r3, r2, r3
 800c408:	80fb      	strh	r3, [r7, #6]
 800c40a:	e01c      	b.n	800c446 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c40c:	88fb      	ldrh	r3, [r7, #6]
 800c40e:	3b10      	subs	r3, #16
 800c410:	80fb      	strh	r3, [r7, #6]
 800c412:	e018      	b.n	800c446 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	3b20      	subs	r3, #32
 800c418:	80fb      	strh	r3, [r7, #6]
 800c41a:	e014      	b.n	800c446 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c41c:	88fb      	ldrh	r3, [r7, #6]
 800c41e:	3b30      	subs	r3, #48	@ 0x30
 800c420:	80fb      	strh	r3, [r7, #6]
 800c422:	e010      	b.n	800c446 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c424:	88fb      	ldrh	r3, [r7, #6]
 800c426:	3b1a      	subs	r3, #26
 800c428:	80fb      	strh	r3, [r7, #6]
 800c42a:	e00c      	b.n	800c446 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c42c:	88fb      	ldrh	r3, [r7, #6]
 800c42e:	3308      	adds	r3, #8
 800c430:	80fb      	strh	r3, [r7, #6]
 800c432:	e008      	b.n	800c446 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c434:	88fb      	ldrh	r3, [r7, #6]
 800c436:	3b50      	subs	r3, #80	@ 0x50
 800c438:	80fb      	strh	r3, [r7, #6]
 800c43a:	e004      	b.n	800c446 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c43c:	88fb      	ldrh	r3, [r7, #6]
 800c43e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c442:	80fb      	strh	r3, [r7, #6]
 800c444:	bf00      	nop
			}
			break;
 800c446:	e008      	b.n	800c45a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c448:	89fb      	ldrh	r3, [r7, #14]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d195      	bne.n	800c37a <ff_wtoupper+0x1a>
 800c44e:	8a3b      	ldrh	r3, [r7, #16]
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	4413      	add	r3, r2
 800c456:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c458:	e78f      	b.n	800c37a <ff_wtoupper+0x1a>
			break;
 800c45a:	bf00      	nop
	}

	return chr;
 800c45c:	88fb      	ldrh	r3, [r7, #6]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	08011bd4 	.word	0x08011bd4
 800c470:	08011dc8 	.word	0x08011dc8

0800c474 <malloc>:
 800c474:	4b02      	ldr	r3, [pc, #8]	@ (800c480 <malloc+0xc>)
 800c476:	4601      	mov	r1, r0
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	f000 b825 	b.w	800c4c8 <_malloc_r>
 800c47e:	bf00      	nop
 800c480:	20000084 	.word	0x20000084

0800c484 <sbrk_aligned>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	4e0f      	ldr	r6, [pc, #60]	@ (800c4c4 <sbrk_aligned+0x40>)
 800c488:	460c      	mov	r4, r1
 800c48a:	6831      	ldr	r1, [r6, #0]
 800c48c:	4605      	mov	r5, r0
 800c48e:	b911      	cbnz	r1, 800c496 <sbrk_aligned+0x12>
 800c490:	f001 f9b0 	bl	800d7f4 <_sbrk_r>
 800c494:	6030      	str	r0, [r6, #0]
 800c496:	4621      	mov	r1, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	f001 f9ab 	bl	800d7f4 <_sbrk_r>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d103      	bne.n	800c4aa <sbrk_aligned+0x26>
 800c4a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	1cc4      	adds	r4, r0, #3
 800c4ac:	f024 0403 	bic.w	r4, r4, #3
 800c4b0:	42a0      	cmp	r0, r4
 800c4b2:	d0f8      	beq.n	800c4a6 <sbrk_aligned+0x22>
 800c4b4:	1a21      	subs	r1, r4, r0
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f001 f99c 	bl	800d7f4 <_sbrk_r>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d1f2      	bne.n	800c4a6 <sbrk_aligned+0x22>
 800c4c0:	e7ef      	b.n	800c4a2 <sbrk_aligned+0x1e>
 800c4c2:	bf00      	nop
 800c4c4:	2000319c 	.word	0x2000319c

0800c4c8 <_malloc_r>:
 800c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4cc:	1ccd      	adds	r5, r1, #3
 800c4ce:	f025 0503 	bic.w	r5, r5, #3
 800c4d2:	3508      	adds	r5, #8
 800c4d4:	2d0c      	cmp	r5, #12
 800c4d6:	bf38      	it	cc
 800c4d8:	250c      	movcc	r5, #12
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	4606      	mov	r6, r0
 800c4de:	db01      	blt.n	800c4e4 <_malloc_r+0x1c>
 800c4e0:	42a9      	cmp	r1, r5
 800c4e2:	d904      	bls.n	800c4ee <_malloc_r+0x26>
 800c4e4:	230c      	movs	r3, #12
 800c4e6:	6033      	str	r3, [r6, #0]
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5c4 <_malloc_r+0xfc>
 800c4f2:	f000 f869 	bl	800c5c8 <__malloc_lock>
 800c4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fa:	461c      	mov	r4, r3
 800c4fc:	bb44      	cbnz	r4, 800c550 <_malloc_r+0x88>
 800c4fe:	4629      	mov	r1, r5
 800c500:	4630      	mov	r0, r6
 800c502:	f7ff ffbf 	bl	800c484 <sbrk_aligned>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	4604      	mov	r4, r0
 800c50a:	d158      	bne.n	800c5be <_malloc_r+0xf6>
 800c50c:	f8d8 4000 	ldr.w	r4, [r8]
 800c510:	4627      	mov	r7, r4
 800c512:	2f00      	cmp	r7, #0
 800c514:	d143      	bne.n	800c59e <_malloc_r+0xd6>
 800c516:	2c00      	cmp	r4, #0
 800c518:	d04b      	beq.n	800c5b2 <_malloc_r+0xea>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	4639      	mov	r1, r7
 800c51e:	4630      	mov	r0, r6
 800c520:	eb04 0903 	add.w	r9, r4, r3
 800c524:	f001 f966 	bl	800d7f4 <_sbrk_r>
 800c528:	4581      	cmp	r9, r0
 800c52a:	d142      	bne.n	800c5b2 <_malloc_r+0xea>
 800c52c:	6821      	ldr	r1, [r4, #0]
 800c52e:	1a6d      	subs	r5, r5, r1
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff ffa6 	bl	800c484 <sbrk_aligned>
 800c538:	3001      	adds	r0, #1
 800c53a:	d03a      	beq.n	800c5b2 <_malloc_r+0xea>
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	442b      	add	r3, r5
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	f8d8 3000 	ldr.w	r3, [r8]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	bb62      	cbnz	r2, 800c5a4 <_malloc_r+0xdc>
 800c54a:	f8c8 7000 	str.w	r7, [r8]
 800c54e:	e00f      	b.n	800c570 <_malloc_r+0xa8>
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	1b52      	subs	r2, r2, r5
 800c554:	d420      	bmi.n	800c598 <_malloc_r+0xd0>
 800c556:	2a0b      	cmp	r2, #11
 800c558:	d917      	bls.n	800c58a <_malloc_r+0xc2>
 800c55a:	1961      	adds	r1, r4, r5
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	6025      	str	r5, [r4, #0]
 800c560:	bf18      	it	ne
 800c562:	6059      	strne	r1, [r3, #4]
 800c564:	6863      	ldr	r3, [r4, #4]
 800c566:	bf08      	it	eq
 800c568:	f8c8 1000 	streq.w	r1, [r8]
 800c56c:	5162      	str	r2, [r4, r5]
 800c56e:	604b      	str	r3, [r1, #4]
 800c570:	4630      	mov	r0, r6
 800c572:	f000 f82f 	bl	800c5d4 <__malloc_unlock>
 800c576:	f104 000b 	add.w	r0, r4, #11
 800c57a:	1d23      	adds	r3, r4, #4
 800c57c:	f020 0007 	bic.w	r0, r0, #7
 800c580:	1ac2      	subs	r2, r0, r3
 800c582:	bf1c      	itt	ne
 800c584:	1a1b      	subne	r3, r3, r0
 800c586:	50a3      	strne	r3, [r4, r2]
 800c588:	e7af      	b.n	800c4ea <_malloc_r+0x22>
 800c58a:	6862      	ldr	r2, [r4, #4]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	bf0c      	ite	eq
 800c590:	f8c8 2000 	streq.w	r2, [r8]
 800c594:	605a      	strne	r2, [r3, #4]
 800c596:	e7eb      	b.n	800c570 <_malloc_r+0xa8>
 800c598:	4623      	mov	r3, r4
 800c59a:	6864      	ldr	r4, [r4, #4]
 800c59c:	e7ae      	b.n	800c4fc <_malloc_r+0x34>
 800c59e:	463c      	mov	r4, r7
 800c5a0:	687f      	ldr	r7, [r7, #4]
 800c5a2:	e7b6      	b.n	800c512 <_malloc_r+0x4a>
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d1fb      	bne.n	800c5a4 <_malloc_r+0xdc>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6053      	str	r3, [r2, #4]
 800c5b0:	e7de      	b.n	800c570 <_malloc_r+0xa8>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	6033      	str	r3, [r6, #0]
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f000 f80c 	bl	800c5d4 <__malloc_unlock>
 800c5bc:	e794      	b.n	800c4e8 <_malloc_r+0x20>
 800c5be:	6005      	str	r5, [r0, #0]
 800c5c0:	e7d6      	b.n	800c570 <_malloc_r+0xa8>
 800c5c2:	bf00      	nop
 800c5c4:	200031a0 	.word	0x200031a0

0800c5c8 <__malloc_lock>:
 800c5c8:	4801      	ldr	r0, [pc, #4]	@ (800c5d0 <__malloc_lock+0x8>)
 800c5ca:	f001 b960 	b.w	800d88e <__retarget_lock_acquire_recursive>
 800c5ce:	bf00      	nop
 800c5d0:	200032e4 	.word	0x200032e4

0800c5d4 <__malloc_unlock>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	@ (800c5dc <__malloc_unlock+0x8>)
 800c5d6:	f001 b95b 	b.w	800d890 <__retarget_lock_release_recursive>
 800c5da:	bf00      	nop
 800c5dc:	200032e4 	.word	0x200032e4

0800c5e0 <__cvt>:
 800c5e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e4:	ec57 6b10 	vmov	r6, r7, d0
 800c5e8:	2f00      	cmp	r7, #0
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	463b      	mov	r3, r7
 800c5f0:	bfbb      	ittet	lt
 800c5f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c5f6:	461f      	movlt	r7, r3
 800c5f8:	2300      	movge	r3, #0
 800c5fa:	232d      	movlt	r3, #45	@ 0x2d
 800c5fc:	700b      	strb	r3, [r1, #0]
 800c5fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c600:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c604:	4691      	mov	r9, r2
 800c606:	f023 0820 	bic.w	r8, r3, #32
 800c60a:	bfbc      	itt	lt
 800c60c:	4632      	movlt	r2, r6
 800c60e:	4616      	movlt	r6, r2
 800c610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c614:	d005      	beq.n	800c622 <__cvt+0x42>
 800c616:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c61a:	d100      	bne.n	800c61e <__cvt+0x3e>
 800c61c:	3401      	adds	r4, #1
 800c61e:	2102      	movs	r1, #2
 800c620:	e000      	b.n	800c624 <__cvt+0x44>
 800c622:	2103      	movs	r1, #3
 800c624:	ab03      	add	r3, sp, #12
 800c626:	9301      	str	r3, [sp, #4]
 800c628:	ab02      	add	r3, sp, #8
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	ec47 6b10 	vmov	d0, r6, r7
 800c630:	4653      	mov	r3, sl
 800c632:	4622      	mov	r2, r4
 800c634:	f001 f9bc 	bl	800d9b0 <_dtoa_r>
 800c638:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c63c:	4605      	mov	r5, r0
 800c63e:	d119      	bne.n	800c674 <__cvt+0x94>
 800c640:	f019 0f01 	tst.w	r9, #1
 800c644:	d00e      	beq.n	800c664 <__cvt+0x84>
 800c646:	eb00 0904 	add.w	r9, r0, r4
 800c64a:	2200      	movs	r2, #0
 800c64c:	2300      	movs	r3, #0
 800c64e:	4630      	mov	r0, r6
 800c650:	4639      	mov	r1, r7
 800c652:	f7f4 fa59 	bl	8000b08 <__aeabi_dcmpeq>
 800c656:	b108      	cbz	r0, 800c65c <__cvt+0x7c>
 800c658:	f8cd 900c 	str.w	r9, [sp, #12]
 800c65c:	2230      	movs	r2, #48	@ 0x30
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	454b      	cmp	r3, r9
 800c662:	d31e      	bcc.n	800c6a2 <__cvt+0xc2>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c668:	1b5b      	subs	r3, r3, r5
 800c66a:	4628      	mov	r0, r5
 800c66c:	6013      	str	r3, [r2, #0]
 800c66e:	b004      	add	sp, #16
 800c670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c674:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c678:	eb00 0904 	add.w	r9, r0, r4
 800c67c:	d1e5      	bne.n	800c64a <__cvt+0x6a>
 800c67e:	7803      	ldrb	r3, [r0, #0]
 800c680:	2b30      	cmp	r3, #48	@ 0x30
 800c682:	d10a      	bne.n	800c69a <__cvt+0xba>
 800c684:	2200      	movs	r2, #0
 800c686:	2300      	movs	r3, #0
 800c688:	4630      	mov	r0, r6
 800c68a:	4639      	mov	r1, r7
 800c68c:	f7f4 fa3c 	bl	8000b08 <__aeabi_dcmpeq>
 800c690:	b918      	cbnz	r0, 800c69a <__cvt+0xba>
 800c692:	f1c4 0401 	rsb	r4, r4, #1
 800c696:	f8ca 4000 	str.w	r4, [sl]
 800c69a:	f8da 3000 	ldr.w	r3, [sl]
 800c69e:	4499      	add	r9, r3
 800c6a0:	e7d3      	b.n	800c64a <__cvt+0x6a>
 800c6a2:	1c59      	adds	r1, r3, #1
 800c6a4:	9103      	str	r1, [sp, #12]
 800c6a6:	701a      	strb	r2, [r3, #0]
 800c6a8:	e7d9      	b.n	800c65e <__cvt+0x7e>

0800c6aa <__exponent>:
 800c6aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	bfba      	itte	lt
 800c6b0:	4249      	neglt	r1, r1
 800c6b2:	232d      	movlt	r3, #45	@ 0x2d
 800c6b4:	232b      	movge	r3, #43	@ 0x2b
 800c6b6:	2909      	cmp	r1, #9
 800c6b8:	7002      	strb	r2, [r0, #0]
 800c6ba:	7043      	strb	r3, [r0, #1]
 800c6bc:	dd29      	ble.n	800c712 <__exponent+0x68>
 800c6be:	f10d 0307 	add.w	r3, sp, #7
 800c6c2:	461d      	mov	r5, r3
 800c6c4:	270a      	movs	r7, #10
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800c6cc:	fb07 1416 	mls	r4, r7, r6, r1
 800c6d0:	3430      	adds	r4, #48	@ 0x30
 800c6d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	2c63      	cmp	r4, #99	@ 0x63
 800c6da:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6de:	4631      	mov	r1, r6
 800c6e0:	dcf1      	bgt.n	800c6c6 <__exponent+0x1c>
 800c6e2:	3130      	adds	r1, #48	@ 0x30
 800c6e4:	1e94      	subs	r4, r2, #2
 800c6e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c6ea:	1c41      	adds	r1, r0, #1
 800c6ec:	4623      	mov	r3, r4
 800c6ee:	42ab      	cmp	r3, r5
 800c6f0:	d30a      	bcc.n	800c708 <__exponent+0x5e>
 800c6f2:	f10d 0309 	add.w	r3, sp, #9
 800c6f6:	1a9b      	subs	r3, r3, r2
 800c6f8:	42ac      	cmp	r4, r5
 800c6fa:	bf88      	it	hi
 800c6fc:	2300      	movhi	r3, #0
 800c6fe:	3302      	adds	r3, #2
 800c700:	4403      	add	r3, r0
 800c702:	1a18      	subs	r0, r3, r0
 800c704:	b003      	add	sp, #12
 800c706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c708:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c70c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c710:	e7ed      	b.n	800c6ee <__exponent+0x44>
 800c712:	2330      	movs	r3, #48	@ 0x30
 800c714:	3130      	adds	r1, #48	@ 0x30
 800c716:	7083      	strb	r3, [r0, #2]
 800c718:	70c1      	strb	r1, [r0, #3]
 800c71a:	1d03      	adds	r3, r0, #4
 800c71c:	e7f1      	b.n	800c702 <__exponent+0x58>
	...

0800c720 <_printf_float>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	b08d      	sub	sp, #52	@ 0x34
 800c726:	460c      	mov	r4, r1
 800c728:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c72c:	4616      	mov	r6, r2
 800c72e:	461f      	mov	r7, r3
 800c730:	4605      	mov	r5, r0
 800c732:	f001 f827 	bl	800d784 <_localeconv_r>
 800c736:	6803      	ldr	r3, [r0, #0]
 800c738:	9304      	str	r3, [sp, #16]
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7f3 fdb8 	bl	80002b0 <strlen>
 800c740:	2300      	movs	r3, #0
 800c742:	930a      	str	r3, [sp, #40]	@ 0x28
 800c744:	f8d8 3000 	ldr.w	r3, [r8]
 800c748:	9005      	str	r0, [sp, #20]
 800c74a:	3307      	adds	r3, #7
 800c74c:	f023 0307 	bic.w	r3, r3, #7
 800c750:	f103 0208 	add.w	r2, r3, #8
 800c754:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c758:	f8d4 b000 	ldr.w	fp, [r4]
 800c75c:	f8c8 2000 	str.w	r2, [r8]
 800c760:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c764:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c768:	9307      	str	r3, [sp, #28]
 800c76a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c76e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c776:	4b9c      	ldr	r3, [pc, #624]	@ (800c9e8 <_printf_float+0x2c8>)
 800c778:	f04f 32ff 	mov.w	r2, #4294967295
 800c77c:	f7f4 f9f6 	bl	8000b6c <__aeabi_dcmpun>
 800c780:	bb70      	cbnz	r0, 800c7e0 <_printf_float+0xc0>
 800c782:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c786:	4b98      	ldr	r3, [pc, #608]	@ (800c9e8 <_printf_float+0x2c8>)
 800c788:	f04f 32ff 	mov.w	r2, #4294967295
 800c78c:	f7f4 f9d0 	bl	8000b30 <__aeabi_dcmple>
 800c790:	bb30      	cbnz	r0, 800c7e0 <_printf_float+0xc0>
 800c792:	2200      	movs	r2, #0
 800c794:	2300      	movs	r3, #0
 800c796:	4640      	mov	r0, r8
 800c798:	4649      	mov	r1, r9
 800c79a:	f7f4 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800c79e:	b110      	cbz	r0, 800c7a6 <_printf_float+0x86>
 800c7a0:	232d      	movs	r3, #45	@ 0x2d
 800c7a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7a6:	4a91      	ldr	r2, [pc, #580]	@ (800c9ec <_printf_float+0x2cc>)
 800c7a8:	4b91      	ldr	r3, [pc, #580]	@ (800c9f0 <_printf_float+0x2d0>)
 800c7aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c7ae:	bf94      	ite	ls
 800c7b0:	4690      	movls	r8, r2
 800c7b2:	4698      	movhi	r8, r3
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	6123      	str	r3, [r4, #16]
 800c7b8:	f02b 0304 	bic.w	r3, fp, #4
 800c7bc:	6023      	str	r3, [r4, #0]
 800c7be:	f04f 0900 	mov.w	r9, #0
 800c7c2:	9700      	str	r7, [sp, #0]
 800c7c4:	4633      	mov	r3, r6
 800c7c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f000 f9d2 	bl	800cb74 <_printf_common>
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	f040 808d 	bne.w	800c8f0 <_printf_float+0x1d0>
 800c7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7da:	b00d      	add	sp, #52	@ 0x34
 800c7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e0:	4642      	mov	r2, r8
 800c7e2:	464b      	mov	r3, r9
 800c7e4:	4640      	mov	r0, r8
 800c7e6:	4649      	mov	r1, r9
 800c7e8:	f7f4 f9c0 	bl	8000b6c <__aeabi_dcmpun>
 800c7ec:	b140      	cbz	r0, 800c800 <_printf_float+0xe0>
 800c7ee:	464b      	mov	r3, r9
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	bfbc      	itt	lt
 800c7f4:	232d      	movlt	r3, #45	@ 0x2d
 800c7f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c7fa:	4a7e      	ldr	r2, [pc, #504]	@ (800c9f4 <_printf_float+0x2d4>)
 800c7fc:	4b7e      	ldr	r3, [pc, #504]	@ (800c9f8 <_printf_float+0x2d8>)
 800c7fe:	e7d4      	b.n	800c7aa <_printf_float+0x8a>
 800c800:	6863      	ldr	r3, [r4, #4]
 800c802:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c806:	9206      	str	r2, [sp, #24]
 800c808:	1c5a      	adds	r2, r3, #1
 800c80a:	d13b      	bne.n	800c884 <_printf_float+0x164>
 800c80c:	2306      	movs	r3, #6
 800c80e:	6063      	str	r3, [r4, #4]
 800c810:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c814:	2300      	movs	r3, #0
 800c816:	6022      	str	r2, [r4, #0]
 800c818:	9303      	str	r3, [sp, #12]
 800c81a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c81c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c820:	ab09      	add	r3, sp, #36	@ 0x24
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	6861      	ldr	r1, [r4, #4]
 800c826:	ec49 8b10 	vmov	d0, r8, r9
 800c82a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c82e:	4628      	mov	r0, r5
 800c830:	f7ff fed6 	bl	800c5e0 <__cvt>
 800c834:	9b06      	ldr	r3, [sp, #24]
 800c836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c838:	2b47      	cmp	r3, #71	@ 0x47
 800c83a:	4680      	mov	r8, r0
 800c83c:	d129      	bne.n	800c892 <_printf_float+0x172>
 800c83e:	1cc8      	adds	r0, r1, #3
 800c840:	db02      	blt.n	800c848 <_printf_float+0x128>
 800c842:	6863      	ldr	r3, [r4, #4]
 800c844:	4299      	cmp	r1, r3
 800c846:	dd41      	ble.n	800c8cc <_printf_float+0x1ac>
 800c848:	f1aa 0a02 	sub.w	sl, sl, #2
 800c84c:	fa5f fa8a 	uxtb.w	sl, sl
 800c850:	3901      	subs	r1, #1
 800c852:	4652      	mov	r2, sl
 800c854:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c858:	9109      	str	r1, [sp, #36]	@ 0x24
 800c85a:	f7ff ff26 	bl	800c6aa <__exponent>
 800c85e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c860:	1813      	adds	r3, r2, r0
 800c862:	2a01      	cmp	r2, #1
 800c864:	4681      	mov	r9, r0
 800c866:	6123      	str	r3, [r4, #16]
 800c868:	dc02      	bgt.n	800c870 <_printf_float+0x150>
 800c86a:	6822      	ldr	r2, [r4, #0]
 800c86c:	07d2      	lsls	r2, r2, #31
 800c86e:	d501      	bpl.n	800c874 <_printf_float+0x154>
 800c870:	3301      	adds	r3, #1
 800c872:	6123      	str	r3, [r4, #16]
 800c874:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0a2      	beq.n	800c7c2 <_printf_float+0xa2>
 800c87c:	232d      	movs	r3, #45	@ 0x2d
 800c87e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c882:	e79e      	b.n	800c7c2 <_printf_float+0xa2>
 800c884:	9a06      	ldr	r2, [sp, #24]
 800c886:	2a47      	cmp	r2, #71	@ 0x47
 800c888:	d1c2      	bne.n	800c810 <_printf_float+0xf0>
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1c0      	bne.n	800c810 <_printf_float+0xf0>
 800c88e:	2301      	movs	r3, #1
 800c890:	e7bd      	b.n	800c80e <_printf_float+0xee>
 800c892:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c896:	d9db      	bls.n	800c850 <_printf_float+0x130>
 800c898:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c89c:	d118      	bne.n	800c8d0 <_printf_float+0x1b0>
 800c89e:	2900      	cmp	r1, #0
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	dd0b      	ble.n	800c8bc <_printf_float+0x19c>
 800c8a4:	6121      	str	r1, [r4, #16]
 800c8a6:	b913      	cbnz	r3, 800c8ae <_printf_float+0x18e>
 800c8a8:	6822      	ldr	r2, [r4, #0]
 800c8aa:	07d0      	lsls	r0, r2, #31
 800c8ac:	d502      	bpl.n	800c8b4 <_printf_float+0x194>
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	440b      	add	r3, r1
 800c8b2:	6123      	str	r3, [r4, #16]
 800c8b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c8b6:	f04f 0900 	mov.w	r9, #0
 800c8ba:	e7db      	b.n	800c874 <_printf_float+0x154>
 800c8bc:	b913      	cbnz	r3, 800c8c4 <_printf_float+0x1a4>
 800c8be:	6822      	ldr	r2, [r4, #0]
 800c8c0:	07d2      	lsls	r2, r2, #31
 800c8c2:	d501      	bpl.n	800c8c8 <_printf_float+0x1a8>
 800c8c4:	3302      	adds	r3, #2
 800c8c6:	e7f4      	b.n	800c8b2 <_printf_float+0x192>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e7f2      	b.n	800c8b2 <_printf_float+0x192>
 800c8cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d2:	4299      	cmp	r1, r3
 800c8d4:	db05      	blt.n	800c8e2 <_printf_float+0x1c2>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	6121      	str	r1, [r4, #16]
 800c8da:	07d8      	lsls	r0, r3, #31
 800c8dc:	d5ea      	bpl.n	800c8b4 <_printf_float+0x194>
 800c8de:	1c4b      	adds	r3, r1, #1
 800c8e0:	e7e7      	b.n	800c8b2 <_printf_float+0x192>
 800c8e2:	2900      	cmp	r1, #0
 800c8e4:	bfd4      	ite	le
 800c8e6:	f1c1 0202 	rsble	r2, r1, #2
 800c8ea:	2201      	movgt	r2, #1
 800c8ec:	4413      	add	r3, r2
 800c8ee:	e7e0      	b.n	800c8b2 <_printf_float+0x192>
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	055a      	lsls	r2, r3, #21
 800c8f4:	d407      	bmi.n	800c906 <_printf_float+0x1e6>
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	47b8      	blx	r7
 800c900:	3001      	adds	r0, #1
 800c902:	d12b      	bne.n	800c95c <_printf_float+0x23c>
 800c904:	e767      	b.n	800c7d6 <_printf_float+0xb6>
 800c906:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c90a:	f240 80dd 	bls.w	800cac8 <_printf_float+0x3a8>
 800c90e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c912:	2200      	movs	r2, #0
 800c914:	2300      	movs	r3, #0
 800c916:	f7f4 f8f7 	bl	8000b08 <__aeabi_dcmpeq>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d033      	beq.n	800c986 <_printf_float+0x266>
 800c91e:	4a37      	ldr	r2, [pc, #220]	@ (800c9fc <_printf_float+0x2dc>)
 800c920:	2301      	movs	r3, #1
 800c922:	4631      	mov	r1, r6
 800c924:	4628      	mov	r0, r5
 800c926:	47b8      	blx	r7
 800c928:	3001      	adds	r0, #1
 800c92a:	f43f af54 	beq.w	800c7d6 <_printf_float+0xb6>
 800c92e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c932:	4543      	cmp	r3, r8
 800c934:	db02      	blt.n	800c93c <_printf_float+0x21c>
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	07d8      	lsls	r0, r3, #31
 800c93a:	d50f      	bpl.n	800c95c <_printf_float+0x23c>
 800c93c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c940:	4631      	mov	r1, r6
 800c942:	4628      	mov	r0, r5
 800c944:	47b8      	blx	r7
 800c946:	3001      	adds	r0, #1
 800c948:	f43f af45 	beq.w	800c7d6 <_printf_float+0xb6>
 800c94c:	f04f 0900 	mov.w	r9, #0
 800c950:	f108 38ff 	add.w	r8, r8, #4294967295
 800c954:	f104 0a1a 	add.w	sl, r4, #26
 800c958:	45c8      	cmp	r8, r9
 800c95a:	dc09      	bgt.n	800c970 <_printf_float+0x250>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	079b      	lsls	r3, r3, #30
 800c960:	f100 8103 	bmi.w	800cb6a <_printf_float+0x44a>
 800c964:	68e0      	ldr	r0, [r4, #12]
 800c966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c968:	4298      	cmp	r0, r3
 800c96a:	bfb8      	it	lt
 800c96c:	4618      	movlt	r0, r3
 800c96e:	e734      	b.n	800c7da <_printf_float+0xba>
 800c970:	2301      	movs	r3, #1
 800c972:	4652      	mov	r2, sl
 800c974:	4631      	mov	r1, r6
 800c976:	4628      	mov	r0, r5
 800c978:	47b8      	blx	r7
 800c97a:	3001      	adds	r0, #1
 800c97c:	f43f af2b 	beq.w	800c7d6 <_printf_float+0xb6>
 800c980:	f109 0901 	add.w	r9, r9, #1
 800c984:	e7e8      	b.n	800c958 <_printf_float+0x238>
 800c986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c988:	2b00      	cmp	r3, #0
 800c98a:	dc39      	bgt.n	800ca00 <_printf_float+0x2e0>
 800c98c:	4a1b      	ldr	r2, [pc, #108]	@ (800c9fc <_printf_float+0x2dc>)
 800c98e:	2301      	movs	r3, #1
 800c990:	4631      	mov	r1, r6
 800c992:	4628      	mov	r0, r5
 800c994:	47b8      	blx	r7
 800c996:	3001      	adds	r0, #1
 800c998:	f43f af1d 	beq.w	800c7d6 <_printf_float+0xb6>
 800c99c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c9a0:	ea59 0303 	orrs.w	r3, r9, r3
 800c9a4:	d102      	bne.n	800c9ac <_printf_float+0x28c>
 800c9a6:	6823      	ldr	r3, [r4, #0]
 800c9a8:	07d9      	lsls	r1, r3, #31
 800c9aa:	d5d7      	bpl.n	800c95c <_printf_float+0x23c>
 800c9ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	47b8      	blx	r7
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	f43f af0d 	beq.w	800c7d6 <_printf_float+0xb6>
 800c9bc:	f04f 0a00 	mov.w	sl, #0
 800c9c0:	f104 0b1a 	add.w	fp, r4, #26
 800c9c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c6:	425b      	negs	r3, r3
 800c9c8:	4553      	cmp	r3, sl
 800c9ca:	dc01      	bgt.n	800c9d0 <_printf_float+0x2b0>
 800c9cc:	464b      	mov	r3, r9
 800c9ce:	e793      	b.n	800c8f8 <_printf_float+0x1d8>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	465a      	mov	r2, fp
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	47b8      	blx	r7
 800c9da:	3001      	adds	r0, #1
 800c9dc:	f43f aefb 	beq.w	800c7d6 <_printf_float+0xb6>
 800c9e0:	f10a 0a01 	add.w	sl, sl, #1
 800c9e4:	e7ee      	b.n	800c9c4 <_printf_float+0x2a4>
 800c9e6:	bf00      	nop
 800c9e8:	7fefffff 	.word	0x7fefffff
 800c9ec:	08011e84 	.word	0x08011e84
 800c9f0:	08011e88 	.word	0x08011e88
 800c9f4:	08011e8c 	.word	0x08011e8c
 800c9f8:	08011e90 	.word	0x08011e90
 800c9fc:	08011e94 	.word	0x08011e94
 800ca00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca06:	4553      	cmp	r3, sl
 800ca08:	bfa8      	it	ge
 800ca0a:	4653      	movge	r3, sl
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	4699      	mov	r9, r3
 800ca10:	dc36      	bgt.n	800ca80 <_printf_float+0x360>
 800ca12:	f04f 0b00 	mov.w	fp, #0
 800ca16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca1a:	f104 021a 	add.w	r2, r4, #26
 800ca1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca20:	9306      	str	r3, [sp, #24]
 800ca22:	eba3 0309 	sub.w	r3, r3, r9
 800ca26:	455b      	cmp	r3, fp
 800ca28:	dc31      	bgt.n	800ca8e <_printf_float+0x36e>
 800ca2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca2c:	459a      	cmp	sl, r3
 800ca2e:	dc3a      	bgt.n	800caa6 <_printf_float+0x386>
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	07da      	lsls	r2, r3, #31
 800ca34:	d437      	bmi.n	800caa6 <_printf_float+0x386>
 800ca36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca38:	ebaa 0903 	sub.w	r9, sl, r3
 800ca3c:	9b06      	ldr	r3, [sp, #24]
 800ca3e:	ebaa 0303 	sub.w	r3, sl, r3
 800ca42:	4599      	cmp	r9, r3
 800ca44:	bfa8      	it	ge
 800ca46:	4699      	movge	r9, r3
 800ca48:	f1b9 0f00 	cmp.w	r9, #0
 800ca4c:	dc33      	bgt.n	800cab6 <_printf_float+0x396>
 800ca4e:	f04f 0800 	mov.w	r8, #0
 800ca52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca56:	f104 0b1a 	add.w	fp, r4, #26
 800ca5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca5c:	ebaa 0303 	sub.w	r3, sl, r3
 800ca60:	eba3 0309 	sub.w	r3, r3, r9
 800ca64:	4543      	cmp	r3, r8
 800ca66:	f77f af79 	ble.w	800c95c <_printf_float+0x23c>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	465a      	mov	r2, fp
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4628      	mov	r0, r5
 800ca72:	47b8      	blx	r7
 800ca74:	3001      	adds	r0, #1
 800ca76:	f43f aeae 	beq.w	800c7d6 <_printf_float+0xb6>
 800ca7a:	f108 0801 	add.w	r8, r8, #1
 800ca7e:	e7ec      	b.n	800ca5a <_printf_float+0x33a>
 800ca80:	4642      	mov	r2, r8
 800ca82:	4631      	mov	r1, r6
 800ca84:	4628      	mov	r0, r5
 800ca86:	47b8      	blx	r7
 800ca88:	3001      	adds	r0, #1
 800ca8a:	d1c2      	bne.n	800ca12 <_printf_float+0x2f2>
 800ca8c:	e6a3      	b.n	800c7d6 <_printf_float+0xb6>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4631      	mov	r1, r6
 800ca92:	4628      	mov	r0, r5
 800ca94:	9206      	str	r2, [sp, #24]
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	f43f ae9c 	beq.w	800c7d6 <_printf_float+0xb6>
 800ca9e:	9a06      	ldr	r2, [sp, #24]
 800caa0:	f10b 0b01 	add.w	fp, fp, #1
 800caa4:	e7bb      	b.n	800ca1e <_printf_float+0x2fe>
 800caa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caaa:	4631      	mov	r1, r6
 800caac:	4628      	mov	r0, r5
 800caae:	47b8      	blx	r7
 800cab0:	3001      	adds	r0, #1
 800cab2:	d1c0      	bne.n	800ca36 <_printf_float+0x316>
 800cab4:	e68f      	b.n	800c7d6 <_printf_float+0xb6>
 800cab6:	9a06      	ldr	r2, [sp, #24]
 800cab8:	464b      	mov	r3, r9
 800caba:	4442      	add	r2, r8
 800cabc:	4631      	mov	r1, r6
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	d1c3      	bne.n	800ca4e <_printf_float+0x32e>
 800cac6:	e686      	b.n	800c7d6 <_printf_float+0xb6>
 800cac8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cacc:	f1ba 0f01 	cmp.w	sl, #1
 800cad0:	dc01      	bgt.n	800cad6 <_printf_float+0x3b6>
 800cad2:	07db      	lsls	r3, r3, #31
 800cad4:	d536      	bpl.n	800cb44 <_printf_float+0x424>
 800cad6:	2301      	movs	r3, #1
 800cad8:	4642      	mov	r2, r8
 800cada:	4631      	mov	r1, r6
 800cadc:	4628      	mov	r0, r5
 800cade:	47b8      	blx	r7
 800cae0:	3001      	adds	r0, #1
 800cae2:	f43f ae78 	beq.w	800c7d6 <_printf_float+0xb6>
 800cae6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800caea:	4631      	mov	r1, r6
 800caec:	4628      	mov	r0, r5
 800caee:	47b8      	blx	r7
 800caf0:	3001      	adds	r0, #1
 800caf2:	f43f ae70 	beq.w	800c7d6 <_printf_float+0xb6>
 800caf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cafa:	2200      	movs	r2, #0
 800cafc:	2300      	movs	r3, #0
 800cafe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb02:	f7f4 f801 	bl	8000b08 <__aeabi_dcmpeq>
 800cb06:	b9c0      	cbnz	r0, 800cb3a <_printf_float+0x41a>
 800cb08:	4653      	mov	r3, sl
 800cb0a:	f108 0201 	add.w	r2, r8, #1
 800cb0e:	4631      	mov	r1, r6
 800cb10:	4628      	mov	r0, r5
 800cb12:	47b8      	blx	r7
 800cb14:	3001      	adds	r0, #1
 800cb16:	d10c      	bne.n	800cb32 <_printf_float+0x412>
 800cb18:	e65d      	b.n	800c7d6 <_printf_float+0xb6>
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	465a      	mov	r2, fp
 800cb1e:	4631      	mov	r1, r6
 800cb20:	4628      	mov	r0, r5
 800cb22:	47b8      	blx	r7
 800cb24:	3001      	adds	r0, #1
 800cb26:	f43f ae56 	beq.w	800c7d6 <_printf_float+0xb6>
 800cb2a:	f108 0801 	add.w	r8, r8, #1
 800cb2e:	45d0      	cmp	r8, sl
 800cb30:	dbf3      	blt.n	800cb1a <_printf_float+0x3fa>
 800cb32:	464b      	mov	r3, r9
 800cb34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cb38:	e6df      	b.n	800c8fa <_printf_float+0x1da>
 800cb3a:	f04f 0800 	mov.w	r8, #0
 800cb3e:	f104 0b1a 	add.w	fp, r4, #26
 800cb42:	e7f4      	b.n	800cb2e <_printf_float+0x40e>
 800cb44:	2301      	movs	r3, #1
 800cb46:	4642      	mov	r2, r8
 800cb48:	e7e1      	b.n	800cb0e <_printf_float+0x3ee>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	464a      	mov	r2, r9
 800cb4e:	4631      	mov	r1, r6
 800cb50:	4628      	mov	r0, r5
 800cb52:	47b8      	blx	r7
 800cb54:	3001      	adds	r0, #1
 800cb56:	f43f ae3e 	beq.w	800c7d6 <_printf_float+0xb6>
 800cb5a:	f108 0801 	add.w	r8, r8, #1
 800cb5e:	68e3      	ldr	r3, [r4, #12]
 800cb60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb62:	1a5b      	subs	r3, r3, r1
 800cb64:	4543      	cmp	r3, r8
 800cb66:	dcf0      	bgt.n	800cb4a <_printf_float+0x42a>
 800cb68:	e6fc      	b.n	800c964 <_printf_float+0x244>
 800cb6a:	f04f 0800 	mov.w	r8, #0
 800cb6e:	f104 0919 	add.w	r9, r4, #25
 800cb72:	e7f4      	b.n	800cb5e <_printf_float+0x43e>

0800cb74 <_printf_common>:
 800cb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb78:	4616      	mov	r6, r2
 800cb7a:	4698      	mov	r8, r3
 800cb7c:	688a      	ldr	r2, [r1, #8]
 800cb7e:	690b      	ldr	r3, [r1, #16]
 800cb80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb84:	4293      	cmp	r3, r2
 800cb86:	bfb8      	it	lt
 800cb88:	4613      	movlt	r3, r2
 800cb8a:	6033      	str	r3, [r6, #0]
 800cb8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb90:	4607      	mov	r7, r0
 800cb92:	460c      	mov	r4, r1
 800cb94:	b10a      	cbz	r2, 800cb9a <_printf_common+0x26>
 800cb96:	3301      	adds	r3, #1
 800cb98:	6033      	str	r3, [r6, #0]
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	0699      	lsls	r1, r3, #26
 800cb9e:	bf42      	ittt	mi
 800cba0:	6833      	ldrmi	r3, [r6, #0]
 800cba2:	3302      	addmi	r3, #2
 800cba4:	6033      	strmi	r3, [r6, #0]
 800cba6:	6825      	ldr	r5, [r4, #0]
 800cba8:	f015 0506 	ands.w	r5, r5, #6
 800cbac:	d106      	bne.n	800cbbc <_printf_common+0x48>
 800cbae:	f104 0a19 	add.w	sl, r4, #25
 800cbb2:	68e3      	ldr	r3, [r4, #12]
 800cbb4:	6832      	ldr	r2, [r6, #0]
 800cbb6:	1a9b      	subs	r3, r3, r2
 800cbb8:	42ab      	cmp	r3, r5
 800cbba:	dc26      	bgt.n	800cc0a <_printf_common+0x96>
 800cbbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbc0:	6822      	ldr	r2, [r4, #0]
 800cbc2:	3b00      	subs	r3, #0
 800cbc4:	bf18      	it	ne
 800cbc6:	2301      	movne	r3, #1
 800cbc8:	0692      	lsls	r2, r2, #26
 800cbca:	d42b      	bmi.n	800cc24 <_printf_common+0xb0>
 800cbcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cbd0:	4641      	mov	r1, r8
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	47c8      	blx	r9
 800cbd6:	3001      	adds	r0, #1
 800cbd8:	d01e      	beq.n	800cc18 <_printf_common+0xa4>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	6922      	ldr	r2, [r4, #16]
 800cbde:	f003 0306 	and.w	r3, r3, #6
 800cbe2:	2b04      	cmp	r3, #4
 800cbe4:	bf02      	ittt	eq
 800cbe6:	68e5      	ldreq	r5, [r4, #12]
 800cbe8:	6833      	ldreq	r3, [r6, #0]
 800cbea:	1aed      	subeq	r5, r5, r3
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	bf0c      	ite	eq
 800cbf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbf4:	2500      	movne	r5, #0
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	bfc4      	itt	gt
 800cbfa:	1a9b      	subgt	r3, r3, r2
 800cbfc:	18ed      	addgt	r5, r5, r3
 800cbfe:	2600      	movs	r6, #0
 800cc00:	341a      	adds	r4, #26
 800cc02:	42b5      	cmp	r5, r6
 800cc04:	d11a      	bne.n	800cc3c <_printf_common+0xc8>
 800cc06:	2000      	movs	r0, #0
 800cc08:	e008      	b.n	800cc1c <_printf_common+0xa8>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	4652      	mov	r2, sl
 800cc0e:	4641      	mov	r1, r8
 800cc10:	4638      	mov	r0, r7
 800cc12:	47c8      	blx	r9
 800cc14:	3001      	adds	r0, #1
 800cc16:	d103      	bne.n	800cc20 <_printf_common+0xac>
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc20:	3501      	adds	r5, #1
 800cc22:	e7c6      	b.n	800cbb2 <_printf_common+0x3e>
 800cc24:	18e1      	adds	r1, r4, r3
 800cc26:	1c5a      	adds	r2, r3, #1
 800cc28:	2030      	movs	r0, #48	@ 0x30
 800cc2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc2e:	4422      	add	r2, r4
 800cc30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc38:	3302      	adds	r3, #2
 800cc3a:	e7c7      	b.n	800cbcc <_printf_common+0x58>
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	4622      	mov	r2, r4
 800cc40:	4641      	mov	r1, r8
 800cc42:	4638      	mov	r0, r7
 800cc44:	47c8      	blx	r9
 800cc46:	3001      	adds	r0, #1
 800cc48:	d0e6      	beq.n	800cc18 <_printf_common+0xa4>
 800cc4a:	3601      	adds	r6, #1
 800cc4c:	e7d9      	b.n	800cc02 <_printf_common+0x8e>
	...

0800cc50 <_printf_i>:
 800cc50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc54:	7e0f      	ldrb	r7, [r1, #24]
 800cc56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc58:	2f78      	cmp	r7, #120	@ 0x78
 800cc5a:	4691      	mov	r9, r2
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	469a      	mov	sl, r3
 800cc62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cc66:	d807      	bhi.n	800cc78 <_printf_i+0x28>
 800cc68:	2f62      	cmp	r7, #98	@ 0x62
 800cc6a:	d80a      	bhi.n	800cc82 <_printf_i+0x32>
 800cc6c:	2f00      	cmp	r7, #0
 800cc6e:	f000 80d2 	beq.w	800ce16 <_printf_i+0x1c6>
 800cc72:	2f58      	cmp	r7, #88	@ 0x58
 800cc74:	f000 80b9 	beq.w	800cdea <_printf_i+0x19a>
 800cc78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc80:	e03a      	b.n	800ccf8 <_printf_i+0xa8>
 800cc82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc86:	2b15      	cmp	r3, #21
 800cc88:	d8f6      	bhi.n	800cc78 <_printf_i+0x28>
 800cc8a:	a101      	add	r1, pc, #4	@ (adr r1, 800cc90 <_printf_i+0x40>)
 800cc8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc90:	0800cce9 	.word	0x0800cce9
 800cc94:	0800ccfd 	.word	0x0800ccfd
 800cc98:	0800cc79 	.word	0x0800cc79
 800cc9c:	0800cc79 	.word	0x0800cc79
 800cca0:	0800cc79 	.word	0x0800cc79
 800cca4:	0800cc79 	.word	0x0800cc79
 800cca8:	0800ccfd 	.word	0x0800ccfd
 800ccac:	0800cc79 	.word	0x0800cc79
 800ccb0:	0800cc79 	.word	0x0800cc79
 800ccb4:	0800cc79 	.word	0x0800cc79
 800ccb8:	0800cc79 	.word	0x0800cc79
 800ccbc:	0800cdfd 	.word	0x0800cdfd
 800ccc0:	0800cd27 	.word	0x0800cd27
 800ccc4:	0800cdb7 	.word	0x0800cdb7
 800ccc8:	0800cc79 	.word	0x0800cc79
 800cccc:	0800cc79 	.word	0x0800cc79
 800ccd0:	0800ce1f 	.word	0x0800ce1f
 800ccd4:	0800cc79 	.word	0x0800cc79
 800ccd8:	0800cd27 	.word	0x0800cd27
 800ccdc:	0800cc79 	.word	0x0800cc79
 800cce0:	0800cc79 	.word	0x0800cc79
 800cce4:	0800cdbf 	.word	0x0800cdbf
 800cce8:	6833      	ldr	r3, [r6, #0]
 800ccea:	1d1a      	adds	r2, r3, #4
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6032      	str	r2, [r6, #0]
 800ccf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e09d      	b.n	800ce38 <_printf_i+0x1e8>
 800ccfc:	6833      	ldr	r3, [r6, #0]
 800ccfe:	6820      	ldr	r0, [r4, #0]
 800cd00:	1d19      	adds	r1, r3, #4
 800cd02:	6031      	str	r1, [r6, #0]
 800cd04:	0606      	lsls	r6, r0, #24
 800cd06:	d501      	bpl.n	800cd0c <_printf_i+0xbc>
 800cd08:	681d      	ldr	r5, [r3, #0]
 800cd0a:	e003      	b.n	800cd14 <_printf_i+0xc4>
 800cd0c:	0645      	lsls	r5, r0, #25
 800cd0e:	d5fb      	bpl.n	800cd08 <_printf_i+0xb8>
 800cd10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd14:	2d00      	cmp	r5, #0
 800cd16:	da03      	bge.n	800cd20 <_printf_i+0xd0>
 800cd18:	232d      	movs	r3, #45	@ 0x2d
 800cd1a:	426d      	negs	r5, r5
 800cd1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd20:	4859      	ldr	r0, [pc, #356]	@ (800ce88 <_printf_i+0x238>)
 800cd22:	230a      	movs	r3, #10
 800cd24:	e011      	b.n	800cd4a <_printf_i+0xfa>
 800cd26:	6821      	ldr	r1, [r4, #0]
 800cd28:	6833      	ldr	r3, [r6, #0]
 800cd2a:	0608      	lsls	r0, r1, #24
 800cd2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd30:	d402      	bmi.n	800cd38 <_printf_i+0xe8>
 800cd32:	0649      	lsls	r1, r1, #25
 800cd34:	bf48      	it	mi
 800cd36:	b2ad      	uxthmi	r5, r5
 800cd38:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd3a:	4853      	ldr	r0, [pc, #332]	@ (800ce88 <_printf_i+0x238>)
 800cd3c:	6033      	str	r3, [r6, #0]
 800cd3e:	bf14      	ite	ne
 800cd40:	230a      	movne	r3, #10
 800cd42:	2308      	moveq	r3, #8
 800cd44:	2100      	movs	r1, #0
 800cd46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd4a:	6866      	ldr	r6, [r4, #4]
 800cd4c:	60a6      	str	r6, [r4, #8]
 800cd4e:	2e00      	cmp	r6, #0
 800cd50:	bfa2      	ittt	ge
 800cd52:	6821      	ldrge	r1, [r4, #0]
 800cd54:	f021 0104 	bicge.w	r1, r1, #4
 800cd58:	6021      	strge	r1, [r4, #0]
 800cd5a:	b90d      	cbnz	r5, 800cd60 <_printf_i+0x110>
 800cd5c:	2e00      	cmp	r6, #0
 800cd5e:	d04b      	beq.n	800cdf8 <_printf_i+0x1a8>
 800cd60:	4616      	mov	r6, r2
 800cd62:	fbb5 f1f3 	udiv	r1, r5, r3
 800cd66:	fb03 5711 	mls	r7, r3, r1, r5
 800cd6a:	5dc7      	ldrb	r7, [r0, r7]
 800cd6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cd70:	462f      	mov	r7, r5
 800cd72:	42bb      	cmp	r3, r7
 800cd74:	460d      	mov	r5, r1
 800cd76:	d9f4      	bls.n	800cd62 <_printf_i+0x112>
 800cd78:	2b08      	cmp	r3, #8
 800cd7a:	d10b      	bne.n	800cd94 <_printf_i+0x144>
 800cd7c:	6823      	ldr	r3, [r4, #0]
 800cd7e:	07df      	lsls	r7, r3, #31
 800cd80:	d508      	bpl.n	800cd94 <_printf_i+0x144>
 800cd82:	6923      	ldr	r3, [r4, #16]
 800cd84:	6861      	ldr	r1, [r4, #4]
 800cd86:	4299      	cmp	r1, r3
 800cd88:	bfde      	ittt	le
 800cd8a:	2330      	movle	r3, #48	@ 0x30
 800cd8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd90:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd94:	1b92      	subs	r2, r2, r6
 800cd96:	6122      	str	r2, [r4, #16]
 800cd98:	f8cd a000 	str.w	sl, [sp]
 800cd9c:	464b      	mov	r3, r9
 800cd9e:	aa03      	add	r2, sp, #12
 800cda0:	4621      	mov	r1, r4
 800cda2:	4640      	mov	r0, r8
 800cda4:	f7ff fee6 	bl	800cb74 <_printf_common>
 800cda8:	3001      	adds	r0, #1
 800cdaa:	d14a      	bne.n	800ce42 <_printf_i+0x1f2>
 800cdac:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb0:	b004      	add	sp, #16
 800cdb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	f043 0320 	orr.w	r3, r3, #32
 800cdbc:	6023      	str	r3, [r4, #0]
 800cdbe:	4833      	ldr	r0, [pc, #204]	@ (800ce8c <_printf_i+0x23c>)
 800cdc0:	2778      	movs	r7, #120	@ 0x78
 800cdc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	6831      	ldr	r1, [r6, #0]
 800cdca:	061f      	lsls	r7, r3, #24
 800cdcc:	f851 5b04 	ldr.w	r5, [r1], #4
 800cdd0:	d402      	bmi.n	800cdd8 <_printf_i+0x188>
 800cdd2:	065f      	lsls	r7, r3, #25
 800cdd4:	bf48      	it	mi
 800cdd6:	b2ad      	uxthmi	r5, r5
 800cdd8:	6031      	str	r1, [r6, #0]
 800cdda:	07d9      	lsls	r1, r3, #31
 800cddc:	bf44      	itt	mi
 800cdde:	f043 0320 	orrmi.w	r3, r3, #32
 800cde2:	6023      	strmi	r3, [r4, #0]
 800cde4:	b11d      	cbz	r5, 800cdee <_printf_i+0x19e>
 800cde6:	2310      	movs	r3, #16
 800cde8:	e7ac      	b.n	800cd44 <_printf_i+0xf4>
 800cdea:	4827      	ldr	r0, [pc, #156]	@ (800ce88 <_printf_i+0x238>)
 800cdec:	e7e9      	b.n	800cdc2 <_printf_i+0x172>
 800cdee:	6823      	ldr	r3, [r4, #0]
 800cdf0:	f023 0320 	bic.w	r3, r3, #32
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	e7f6      	b.n	800cde6 <_printf_i+0x196>
 800cdf8:	4616      	mov	r6, r2
 800cdfa:	e7bd      	b.n	800cd78 <_printf_i+0x128>
 800cdfc:	6833      	ldr	r3, [r6, #0]
 800cdfe:	6825      	ldr	r5, [r4, #0]
 800ce00:	6961      	ldr	r1, [r4, #20]
 800ce02:	1d18      	adds	r0, r3, #4
 800ce04:	6030      	str	r0, [r6, #0]
 800ce06:	062e      	lsls	r6, r5, #24
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	d501      	bpl.n	800ce10 <_printf_i+0x1c0>
 800ce0c:	6019      	str	r1, [r3, #0]
 800ce0e:	e002      	b.n	800ce16 <_printf_i+0x1c6>
 800ce10:	0668      	lsls	r0, r5, #25
 800ce12:	d5fb      	bpl.n	800ce0c <_printf_i+0x1bc>
 800ce14:	8019      	strh	r1, [r3, #0]
 800ce16:	2300      	movs	r3, #0
 800ce18:	6123      	str	r3, [r4, #16]
 800ce1a:	4616      	mov	r6, r2
 800ce1c:	e7bc      	b.n	800cd98 <_printf_i+0x148>
 800ce1e:	6833      	ldr	r3, [r6, #0]
 800ce20:	1d1a      	adds	r2, r3, #4
 800ce22:	6032      	str	r2, [r6, #0]
 800ce24:	681e      	ldr	r6, [r3, #0]
 800ce26:	6862      	ldr	r2, [r4, #4]
 800ce28:	2100      	movs	r1, #0
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7f3 f9f0 	bl	8000210 <memchr>
 800ce30:	b108      	cbz	r0, 800ce36 <_printf_i+0x1e6>
 800ce32:	1b80      	subs	r0, r0, r6
 800ce34:	6060      	str	r0, [r4, #4]
 800ce36:	6863      	ldr	r3, [r4, #4]
 800ce38:	6123      	str	r3, [r4, #16]
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce40:	e7aa      	b.n	800cd98 <_printf_i+0x148>
 800ce42:	6923      	ldr	r3, [r4, #16]
 800ce44:	4632      	mov	r2, r6
 800ce46:	4649      	mov	r1, r9
 800ce48:	4640      	mov	r0, r8
 800ce4a:	47d0      	blx	sl
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	d0ad      	beq.n	800cdac <_printf_i+0x15c>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	079b      	lsls	r3, r3, #30
 800ce54:	d413      	bmi.n	800ce7e <_printf_i+0x22e>
 800ce56:	68e0      	ldr	r0, [r4, #12]
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	4298      	cmp	r0, r3
 800ce5c:	bfb8      	it	lt
 800ce5e:	4618      	movlt	r0, r3
 800ce60:	e7a6      	b.n	800cdb0 <_printf_i+0x160>
 800ce62:	2301      	movs	r3, #1
 800ce64:	4632      	mov	r2, r6
 800ce66:	4649      	mov	r1, r9
 800ce68:	4640      	mov	r0, r8
 800ce6a:	47d0      	blx	sl
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d09d      	beq.n	800cdac <_printf_i+0x15c>
 800ce70:	3501      	adds	r5, #1
 800ce72:	68e3      	ldr	r3, [r4, #12]
 800ce74:	9903      	ldr	r1, [sp, #12]
 800ce76:	1a5b      	subs	r3, r3, r1
 800ce78:	42ab      	cmp	r3, r5
 800ce7a:	dcf2      	bgt.n	800ce62 <_printf_i+0x212>
 800ce7c:	e7eb      	b.n	800ce56 <_printf_i+0x206>
 800ce7e:	2500      	movs	r5, #0
 800ce80:	f104 0619 	add.w	r6, r4, #25
 800ce84:	e7f5      	b.n	800ce72 <_printf_i+0x222>
 800ce86:	bf00      	nop
 800ce88:	08011e96 	.word	0x08011e96
 800ce8c:	08011ea7 	.word	0x08011ea7

0800ce90 <_scanf_float>:
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	b087      	sub	sp, #28
 800ce96:	4617      	mov	r7, r2
 800ce98:	9303      	str	r3, [sp, #12]
 800ce9a:	688b      	ldr	r3, [r1, #8]
 800ce9c:	1e5a      	subs	r2, r3, #1
 800ce9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cea2:	bf81      	itttt	hi
 800cea4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cea8:	eb03 0b05 	addhi.w	fp, r3, r5
 800ceac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ceb0:	608b      	strhi	r3, [r1, #8]
 800ceb2:	680b      	ldr	r3, [r1, #0]
 800ceb4:	460a      	mov	r2, r1
 800ceb6:	f04f 0500 	mov.w	r5, #0
 800ceba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cebe:	f842 3b1c 	str.w	r3, [r2], #28
 800cec2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cec6:	4680      	mov	r8, r0
 800cec8:	460c      	mov	r4, r1
 800ceca:	bf98      	it	ls
 800cecc:	f04f 0b00 	movls.w	fp, #0
 800ced0:	9201      	str	r2, [sp, #4]
 800ced2:	4616      	mov	r6, r2
 800ced4:	46aa      	mov	sl, r5
 800ced6:	46a9      	mov	r9, r5
 800ced8:	9502      	str	r5, [sp, #8]
 800ceda:	68a2      	ldr	r2, [r4, #8]
 800cedc:	b152      	cbz	r2, 800cef4 <_scanf_float+0x64>
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	2b4e      	cmp	r3, #78	@ 0x4e
 800cee4:	d864      	bhi.n	800cfb0 <_scanf_float+0x120>
 800cee6:	2b40      	cmp	r3, #64	@ 0x40
 800cee8:	d83c      	bhi.n	800cf64 <_scanf_float+0xd4>
 800ceea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ceee:	b2c8      	uxtb	r0, r1
 800cef0:	280e      	cmp	r0, #14
 800cef2:	d93a      	bls.n	800cf6a <_scanf_float+0xda>
 800cef4:	f1b9 0f00 	cmp.w	r9, #0
 800cef8:	d003      	beq.n	800cf02 <_scanf_float+0x72>
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf00:	6023      	str	r3, [r4, #0]
 800cf02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf06:	f1ba 0f01 	cmp.w	sl, #1
 800cf0a:	f200 8117 	bhi.w	800d13c <_scanf_float+0x2ac>
 800cf0e:	9b01      	ldr	r3, [sp, #4]
 800cf10:	429e      	cmp	r6, r3
 800cf12:	f200 8108 	bhi.w	800d126 <_scanf_float+0x296>
 800cf16:	2001      	movs	r0, #1
 800cf18:	b007      	add	sp, #28
 800cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cf22:	2a0d      	cmp	r2, #13
 800cf24:	d8e6      	bhi.n	800cef4 <_scanf_float+0x64>
 800cf26:	a101      	add	r1, pc, #4	@ (adr r1, 800cf2c <_scanf_float+0x9c>)
 800cf28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cf2c:	0800d073 	.word	0x0800d073
 800cf30:	0800cef5 	.word	0x0800cef5
 800cf34:	0800cef5 	.word	0x0800cef5
 800cf38:	0800cef5 	.word	0x0800cef5
 800cf3c:	0800d0d3 	.word	0x0800d0d3
 800cf40:	0800d0ab 	.word	0x0800d0ab
 800cf44:	0800cef5 	.word	0x0800cef5
 800cf48:	0800cef5 	.word	0x0800cef5
 800cf4c:	0800d081 	.word	0x0800d081
 800cf50:	0800cef5 	.word	0x0800cef5
 800cf54:	0800cef5 	.word	0x0800cef5
 800cf58:	0800cef5 	.word	0x0800cef5
 800cf5c:	0800cef5 	.word	0x0800cef5
 800cf60:	0800d039 	.word	0x0800d039
 800cf64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cf68:	e7db      	b.n	800cf22 <_scanf_float+0x92>
 800cf6a:	290e      	cmp	r1, #14
 800cf6c:	d8c2      	bhi.n	800cef4 <_scanf_float+0x64>
 800cf6e:	a001      	add	r0, pc, #4	@ (adr r0, 800cf74 <_scanf_float+0xe4>)
 800cf70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cf74:	0800d029 	.word	0x0800d029
 800cf78:	0800cef5 	.word	0x0800cef5
 800cf7c:	0800d029 	.word	0x0800d029
 800cf80:	0800d0bf 	.word	0x0800d0bf
 800cf84:	0800cef5 	.word	0x0800cef5
 800cf88:	0800cfd1 	.word	0x0800cfd1
 800cf8c:	0800d00f 	.word	0x0800d00f
 800cf90:	0800d00f 	.word	0x0800d00f
 800cf94:	0800d00f 	.word	0x0800d00f
 800cf98:	0800d00f 	.word	0x0800d00f
 800cf9c:	0800d00f 	.word	0x0800d00f
 800cfa0:	0800d00f 	.word	0x0800d00f
 800cfa4:	0800d00f 	.word	0x0800d00f
 800cfa8:	0800d00f 	.word	0x0800d00f
 800cfac:	0800d00f 	.word	0x0800d00f
 800cfb0:	2b6e      	cmp	r3, #110	@ 0x6e
 800cfb2:	d809      	bhi.n	800cfc8 <_scanf_float+0x138>
 800cfb4:	2b60      	cmp	r3, #96	@ 0x60
 800cfb6:	d8b2      	bhi.n	800cf1e <_scanf_float+0x8e>
 800cfb8:	2b54      	cmp	r3, #84	@ 0x54
 800cfba:	d07b      	beq.n	800d0b4 <_scanf_float+0x224>
 800cfbc:	2b59      	cmp	r3, #89	@ 0x59
 800cfbe:	d199      	bne.n	800cef4 <_scanf_float+0x64>
 800cfc0:	2d07      	cmp	r5, #7
 800cfc2:	d197      	bne.n	800cef4 <_scanf_float+0x64>
 800cfc4:	2508      	movs	r5, #8
 800cfc6:	e02c      	b.n	800d022 <_scanf_float+0x192>
 800cfc8:	2b74      	cmp	r3, #116	@ 0x74
 800cfca:	d073      	beq.n	800d0b4 <_scanf_float+0x224>
 800cfcc:	2b79      	cmp	r3, #121	@ 0x79
 800cfce:	e7f6      	b.n	800cfbe <_scanf_float+0x12e>
 800cfd0:	6821      	ldr	r1, [r4, #0]
 800cfd2:	05c8      	lsls	r0, r1, #23
 800cfd4:	d51b      	bpl.n	800d00e <_scanf_float+0x17e>
 800cfd6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cfda:	6021      	str	r1, [r4, #0]
 800cfdc:	f109 0901 	add.w	r9, r9, #1
 800cfe0:	f1bb 0f00 	cmp.w	fp, #0
 800cfe4:	d003      	beq.n	800cfee <_scanf_float+0x15e>
 800cfe6:	3201      	adds	r2, #1
 800cfe8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cfec:	60a2      	str	r2, [r4, #8]
 800cfee:	68a3      	ldr	r3, [r4, #8]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	60a3      	str	r3, [r4, #8]
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	3301      	adds	r3, #1
 800cff8:	6123      	str	r3, [r4, #16]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	607b      	str	r3, [r7, #4]
 800d002:	f340 8087 	ble.w	800d114 <_scanf_float+0x284>
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	3301      	adds	r3, #1
 800d00a:	603b      	str	r3, [r7, #0]
 800d00c:	e765      	b.n	800ceda <_scanf_float+0x4a>
 800d00e:	eb1a 0105 	adds.w	r1, sl, r5
 800d012:	f47f af6f 	bne.w	800cef4 <_scanf_float+0x64>
 800d016:	6822      	ldr	r2, [r4, #0]
 800d018:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d01c:	6022      	str	r2, [r4, #0]
 800d01e:	460d      	mov	r5, r1
 800d020:	468a      	mov	sl, r1
 800d022:	f806 3b01 	strb.w	r3, [r6], #1
 800d026:	e7e2      	b.n	800cfee <_scanf_float+0x15e>
 800d028:	6822      	ldr	r2, [r4, #0]
 800d02a:	0610      	lsls	r0, r2, #24
 800d02c:	f57f af62 	bpl.w	800cef4 <_scanf_float+0x64>
 800d030:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d034:	6022      	str	r2, [r4, #0]
 800d036:	e7f4      	b.n	800d022 <_scanf_float+0x192>
 800d038:	f1ba 0f00 	cmp.w	sl, #0
 800d03c:	d10e      	bne.n	800d05c <_scanf_float+0x1cc>
 800d03e:	f1b9 0f00 	cmp.w	r9, #0
 800d042:	d10e      	bne.n	800d062 <_scanf_float+0x1d2>
 800d044:	6822      	ldr	r2, [r4, #0]
 800d046:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d04a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d04e:	d108      	bne.n	800d062 <_scanf_float+0x1d2>
 800d050:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d054:	6022      	str	r2, [r4, #0]
 800d056:	f04f 0a01 	mov.w	sl, #1
 800d05a:	e7e2      	b.n	800d022 <_scanf_float+0x192>
 800d05c:	f1ba 0f02 	cmp.w	sl, #2
 800d060:	d055      	beq.n	800d10e <_scanf_float+0x27e>
 800d062:	2d01      	cmp	r5, #1
 800d064:	d002      	beq.n	800d06c <_scanf_float+0x1dc>
 800d066:	2d04      	cmp	r5, #4
 800d068:	f47f af44 	bne.w	800cef4 <_scanf_float+0x64>
 800d06c:	3501      	adds	r5, #1
 800d06e:	b2ed      	uxtb	r5, r5
 800d070:	e7d7      	b.n	800d022 <_scanf_float+0x192>
 800d072:	f1ba 0f01 	cmp.w	sl, #1
 800d076:	f47f af3d 	bne.w	800cef4 <_scanf_float+0x64>
 800d07a:	f04f 0a02 	mov.w	sl, #2
 800d07e:	e7d0      	b.n	800d022 <_scanf_float+0x192>
 800d080:	b97d      	cbnz	r5, 800d0a2 <_scanf_float+0x212>
 800d082:	f1b9 0f00 	cmp.w	r9, #0
 800d086:	f47f af38 	bne.w	800cefa <_scanf_float+0x6a>
 800d08a:	6822      	ldr	r2, [r4, #0]
 800d08c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d090:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d094:	f040 8108 	bne.w	800d2a8 <_scanf_float+0x418>
 800d098:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d09c:	6022      	str	r2, [r4, #0]
 800d09e:	2501      	movs	r5, #1
 800d0a0:	e7bf      	b.n	800d022 <_scanf_float+0x192>
 800d0a2:	2d03      	cmp	r5, #3
 800d0a4:	d0e2      	beq.n	800d06c <_scanf_float+0x1dc>
 800d0a6:	2d05      	cmp	r5, #5
 800d0a8:	e7de      	b.n	800d068 <_scanf_float+0x1d8>
 800d0aa:	2d02      	cmp	r5, #2
 800d0ac:	f47f af22 	bne.w	800cef4 <_scanf_float+0x64>
 800d0b0:	2503      	movs	r5, #3
 800d0b2:	e7b6      	b.n	800d022 <_scanf_float+0x192>
 800d0b4:	2d06      	cmp	r5, #6
 800d0b6:	f47f af1d 	bne.w	800cef4 <_scanf_float+0x64>
 800d0ba:	2507      	movs	r5, #7
 800d0bc:	e7b1      	b.n	800d022 <_scanf_float+0x192>
 800d0be:	6822      	ldr	r2, [r4, #0]
 800d0c0:	0591      	lsls	r1, r2, #22
 800d0c2:	f57f af17 	bpl.w	800cef4 <_scanf_float+0x64>
 800d0c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d0ca:	6022      	str	r2, [r4, #0]
 800d0cc:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0d0:	e7a7      	b.n	800d022 <_scanf_float+0x192>
 800d0d2:	6822      	ldr	r2, [r4, #0]
 800d0d4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d0d8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d0dc:	d006      	beq.n	800d0ec <_scanf_float+0x25c>
 800d0de:	0550      	lsls	r0, r2, #21
 800d0e0:	f57f af08 	bpl.w	800cef4 <_scanf_float+0x64>
 800d0e4:	f1b9 0f00 	cmp.w	r9, #0
 800d0e8:	f000 80de 	beq.w	800d2a8 <_scanf_float+0x418>
 800d0ec:	0591      	lsls	r1, r2, #22
 800d0ee:	bf58      	it	pl
 800d0f0:	9902      	ldrpl	r1, [sp, #8]
 800d0f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d0f6:	bf58      	it	pl
 800d0f8:	eba9 0101 	subpl.w	r1, r9, r1
 800d0fc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d100:	bf58      	it	pl
 800d102:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d106:	6022      	str	r2, [r4, #0]
 800d108:	f04f 0900 	mov.w	r9, #0
 800d10c:	e789      	b.n	800d022 <_scanf_float+0x192>
 800d10e:	f04f 0a03 	mov.w	sl, #3
 800d112:	e786      	b.n	800d022 <_scanf_float+0x192>
 800d114:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d118:	4639      	mov	r1, r7
 800d11a:	4640      	mov	r0, r8
 800d11c:	4798      	blx	r3
 800d11e:	2800      	cmp	r0, #0
 800d120:	f43f aedb 	beq.w	800ceda <_scanf_float+0x4a>
 800d124:	e6e6      	b.n	800cef4 <_scanf_float+0x64>
 800d126:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d12a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d12e:	463a      	mov	r2, r7
 800d130:	4640      	mov	r0, r8
 800d132:	4798      	blx	r3
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	3b01      	subs	r3, #1
 800d138:	6123      	str	r3, [r4, #16]
 800d13a:	e6e8      	b.n	800cf0e <_scanf_float+0x7e>
 800d13c:	1e6b      	subs	r3, r5, #1
 800d13e:	2b06      	cmp	r3, #6
 800d140:	d824      	bhi.n	800d18c <_scanf_float+0x2fc>
 800d142:	2d02      	cmp	r5, #2
 800d144:	d836      	bhi.n	800d1b4 <_scanf_float+0x324>
 800d146:	9b01      	ldr	r3, [sp, #4]
 800d148:	429e      	cmp	r6, r3
 800d14a:	f67f aee4 	bls.w	800cf16 <_scanf_float+0x86>
 800d14e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d152:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d156:	463a      	mov	r2, r7
 800d158:	4640      	mov	r0, r8
 800d15a:	4798      	blx	r3
 800d15c:	6923      	ldr	r3, [r4, #16]
 800d15e:	3b01      	subs	r3, #1
 800d160:	6123      	str	r3, [r4, #16]
 800d162:	e7f0      	b.n	800d146 <_scanf_float+0x2b6>
 800d164:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d168:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d16c:	463a      	mov	r2, r7
 800d16e:	4640      	mov	r0, r8
 800d170:	4798      	blx	r3
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	3b01      	subs	r3, #1
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d17c:	fa5f fa8a 	uxtb.w	sl, sl
 800d180:	f1ba 0f02 	cmp.w	sl, #2
 800d184:	d1ee      	bne.n	800d164 <_scanf_float+0x2d4>
 800d186:	3d03      	subs	r5, #3
 800d188:	b2ed      	uxtb	r5, r5
 800d18a:	1b76      	subs	r6, r6, r5
 800d18c:	6823      	ldr	r3, [r4, #0]
 800d18e:	05da      	lsls	r2, r3, #23
 800d190:	d530      	bpl.n	800d1f4 <_scanf_float+0x364>
 800d192:	055b      	lsls	r3, r3, #21
 800d194:	d511      	bpl.n	800d1ba <_scanf_float+0x32a>
 800d196:	9b01      	ldr	r3, [sp, #4]
 800d198:	429e      	cmp	r6, r3
 800d19a:	f67f aebc 	bls.w	800cf16 <_scanf_float+0x86>
 800d19e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d1a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1a6:	463a      	mov	r2, r7
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	4798      	blx	r3
 800d1ac:	6923      	ldr	r3, [r4, #16]
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	6123      	str	r3, [r4, #16]
 800d1b2:	e7f0      	b.n	800d196 <_scanf_float+0x306>
 800d1b4:	46aa      	mov	sl, r5
 800d1b6:	46b3      	mov	fp, r6
 800d1b8:	e7de      	b.n	800d178 <_scanf_float+0x2e8>
 800d1ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	2965      	cmp	r1, #101	@ 0x65
 800d1c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800d1ca:	6123      	str	r3, [r4, #16]
 800d1cc:	d00c      	beq.n	800d1e8 <_scanf_float+0x358>
 800d1ce:	2945      	cmp	r1, #69	@ 0x45
 800d1d0:	d00a      	beq.n	800d1e8 <_scanf_float+0x358>
 800d1d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d1d6:	463a      	mov	r2, r7
 800d1d8:	4640      	mov	r0, r8
 800d1da:	4798      	blx	r3
 800d1dc:	6923      	ldr	r3, [r4, #16]
 800d1de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	1eb5      	subs	r5, r6, #2
 800d1e6:	6123      	str	r3, [r4, #16]
 800d1e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d1ec:	463a      	mov	r2, r7
 800d1ee:	4640      	mov	r0, r8
 800d1f0:	4798      	blx	r3
 800d1f2:	462e      	mov	r6, r5
 800d1f4:	6822      	ldr	r2, [r4, #0]
 800d1f6:	f012 0210 	ands.w	r2, r2, #16
 800d1fa:	d001      	beq.n	800d200 <_scanf_float+0x370>
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e68b      	b.n	800cf18 <_scanf_float+0x88>
 800d200:	7032      	strb	r2, [r6, #0]
 800d202:	6823      	ldr	r3, [r4, #0]
 800d204:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d20c:	d11c      	bne.n	800d248 <_scanf_float+0x3b8>
 800d20e:	9b02      	ldr	r3, [sp, #8]
 800d210:	454b      	cmp	r3, r9
 800d212:	eba3 0209 	sub.w	r2, r3, r9
 800d216:	d123      	bne.n	800d260 <_scanf_float+0x3d0>
 800d218:	9901      	ldr	r1, [sp, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	4640      	mov	r0, r8
 800d21e:	f002 fc8b 	bl	800fb38 <_strtod_r>
 800d222:	9b03      	ldr	r3, [sp, #12]
 800d224:	6821      	ldr	r1, [r4, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f011 0f02 	tst.w	r1, #2
 800d22c:	ec57 6b10 	vmov	r6, r7, d0
 800d230:	f103 0204 	add.w	r2, r3, #4
 800d234:	d01f      	beq.n	800d276 <_scanf_float+0x3e6>
 800d236:	9903      	ldr	r1, [sp, #12]
 800d238:	600a      	str	r2, [r1, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	e9c3 6700 	strd	r6, r7, [r3]
 800d240:	68e3      	ldr	r3, [r4, #12]
 800d242:	3301      	adds	r3, #1
 800d244:	60e3      	str	r3, [r4, #12]
 800d246:	e7d9      	b.n	800d1fc <_scanf_float+0x36c>
 800d248:	9b04      	ldr	r3, [sp, #16]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d0e4      	beq.n	800d218 <_scanf_float+0x388>
 800d24e:	9905      	ldr	r1, [sp, #20]
 800d250:	230a      	movs	r3, #10
 800d252:	3101      	adds	r1, #1
 800d254:	4640      	mov	r0, r8
 800d256:	f002 fcef 	bl	800fc38 <_strtol_r>
 800d25a:	9b04      	ldr	r3, [sp, #16]
 800d25c:	9e05      	ldr	r6, [sp, #20]
 800d25e:	1ac2      	subs	r2, r0, r3
 800d260:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d264:	429e      	cmp	r6, r3
 800d266:	bf28      	it	cs
 800d268:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d26c:	4910      	ldr	r1, [pc, #64]	@ (800d2b0 <_scanf_float+0x420>)
 800d26e:	4630      	mov	r0, r6
 800d270:	f000 f988 	bl	800d584 <siprintf>
 800d274:	e7d0      	b.n	800d218 <_scanf_float+0x388>
 800d276:	f011 0f04 	tst.w	r1, #4
 800d27a:	9903      	ldr	r1, [sp, #12]
 800d27c:	600a      	str	r2, [r1, #0]
 800d27e:	d1dc      	bne.n	800d23a <_scanf_float+0x3aa>
 800d280:	681d      	ldr	r5, [r3, #0]
 800d282:	4632      	mov	r2, r6
 800d284:	463b      	mov	r3, r7
 800d286:	4630      	mov	r0, r6
 800d288:	4639      	mov	r1, r7
 800d28a:	f7f3 fc6f 	bl	8000b6c <__aeabi_dcmpun>
 800d28e:	b128      	cbz	r0, 800d29c <_scanf_float+0x40c>
 800d290:	4808      	ldr	r0, [pc, #32]	@ (800d2b4 <_scanf_float+0x424>)
 800d292:	f000 faff 	bl	800d894 <nanf>
 800d296:	ed85 0a00 	vstr	s0, [r5]
 800d29a:	e7d1      	b.n	800d240 <_scanf_float+0x3b0>
 800d29c:	4630      	mov	r0, r6
 800d29e:	4639      	mov	r1, r7
 800d2a0:	f7f3 fcc2 	bl	8000c28 <__aeabi_d2f>
 800d2a4:	6028      	str	r0, [r5, #0]
 800d2a6:	e7cb      	b.n	800d240 <_scanf_float+0x3b0>
 800d2a8:	f04f 0900 	mov.w	r9, #0
 800d2ac:	e629      	b.n	800cf02 <_scanf_float+0x72>
 800d2ae:	bf00      	nop
 800d2b0:	08011eb8 	.word	0x08011eb8
 800d2b4:	0801224d 	.word	0x0801224d

0800d2b8 <std>:
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	4604      	mov	r4, r0
 800d2be:	e9c0 3300 	strd	r3, r3, [r0]
 800d2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2c6:	6083      	str	r3, [r0, #8]
 800d2c8:	8181      	strh	r1, [r0, #12]
 800d2ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800d2cc:	81c2      	strh	r2, [r0, #14]
 800d2ce:	6183      	str	r3, [r0, #24]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	2208      	movs	r2, #8
 800d2d4:	305c      	adds	r0, #92	@ 0x5c
 800d2d6:	f000 fa4d 	bl	800d774 <memset>
 800d2da:	4b0d      	ldr	r3, [pc, #52]	@ (800d310 <std+0x58>)
 800d2dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d2de:	4b0d      	ldr	r3, [pc, #52]	@ (800d314 <std+0x5c>)
 800d2e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d318 <std+0x60>)
 800d2e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d31c <std+0x64>)
 800d2e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d320 <std+0x68>)
 800d2ec:	6224      	str	r4, [r4, #32]
 800d2ee:	429c      	cmp	r4, r3
 800d2f0:	d006      	beq.n	800d300 <std+0x48>
 800d2f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d2f6:	4294      	cmp	r4, r2
 800d2f8:	d002      	beq.n	800d300 <std+0x48>
 800d2fa:	33d0      	adds	r3, #208	@ 0xd0
 800d2fc:	429c      	cmp	r4, r3
 800d2fe:	d105      	bne.n	800d30c <std+0x54>
 800d300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d308:	f000 bac0 	b.w	800d88c <__retarget_lock_init_recursive>
 800d30c:	bd10      	pop	{r4, pc}
 800d30e:	bf00      	nop
 800d310:	0800d5c5 	.word	0x0800d5c5
 800d314:	0800d5e7 	.word	0x0800d5e7
 800d318:	0800d61f 	.word	0x0800d61f
 800d31c:	0800d643 	.word	0x0800d643
 800d320:	200031a4 	.word	0x200031a4

0800d324 <stdio_exit_handler>:
 800d324:	4a02      	ldr	r2, [pc, #8]	@ (800d330 <stdio_exit_handler+0xc>)
 800d326:	4903      	ldr	r1, [pc, #12]	@ (800d334 <stdio_exit_handler+0x10>)
 800d328:	4803      	ldr	r0, [pc, #12]	@ (800d338 <stdio_exit_handler+0x14>)
 800d32a:	f000 b869 	b.w	800d400 <_fwalk_sglue>
 800d32e:	bf00      	nop
 800d330:	20000078 	.word	0x20000078
 800d334:	08010279 	.word	0x08010279
 800d338:	20000088 	.word	0x20000088

0800d33c <cleanup_stdio>:
 800d33c:	6841      	ldr	r1, [r0, #4]
 800d33e:	4b0c      	ldr	r3, [pc, #48]	@ (800d370 <cleanup_stdio+0x34>)
 800d340:	4299      	cmp	r1, r3
 800d342:	b510      	push	{r4, lr}
 800d344:	4604      	mov	r4, r0
 800d346:	d001      	beq.n	800d34c <cleanup_stdio+0x10>
 800d348:	f002 ff96 	bl	8010278 <_fflush_r>
 800d34c:	68a1      	ldr	r1, [r4, #8]
 800d34e:	4b09      	ldr	r3, [pc, #36]	@ (800d374 <cleanup_stdio+0x38>)
 800d350:	4299      	cmp	r1, r3
 800d352:	d002      	beq.n	800d35a <cleanup_stdio+0x1e>
 800d354:	4620      	mov	r0, r4
 800d356:	f002 ff8f 	bl	8010278 <_fflush_r>
 800d35a:	68e1      	ldr	r1, [r4, #12]
 800d35c:	4b06      	ldr	r3, [pc, #24]	@ (800d378 <cleanup_stdio+0x3c>)
 800d35e:	4299      	cmp	r1, r3
 800d360:	d004      	beq.n	800d36c <cleanup_stdio+0x30>
 800d362:	4620      	mov	r0, r4
 800d364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d368:	f002 bf86 	b.w	8010278 <_fflush_r>
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	bf00      	nop
 800d370:	200031a4 	.word	0x200031a4
 800d374:	2000320c 	.word	0x2000320c
 800d378:	20003274 	.word	0x20003274

0800d37c <global_stdio_init.part.0>:
 800d37c:	b510      	push	{r4, lr}
 800d37e:	4b0b      	ldr	r3, [pc, #44]	@ (800d3ac <global_stdio_init.part.0+0x30>)
 800d380:	4c0b      	ldr	r4, [pc, #44]	@ (800d3b0 <global_stdio_init.part.0+0x34>)
 800d382:	4a0c      	ldr	r2, [pc, #48]	@ (800d3b4 <global_stdio_init.part.0+0x38>)
 800d384:	601a      	str	r2, [r3, #0]
 800d386:	4620      	mov	r0, r4
 800d388:	2200      	movs	r2, #0
 800d38a:	2104      	movs	r1, #4
 800d38c:	f7ff ff94 	bl	800d2b8 <std>
 800d390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d394:	2201      	movs	r2, #1
 800d396:	2109      	movs	r1, #9
 800d398:	f7ff ff8e 	bl	800d2b8 <std>
 800d39c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3a6:	2112      	movs	r1, #18
 800d3a8:	f7ff bf86 	b.w	800d2b8 <std>
 800d3ac:	200032dc 	.word	0x200032dc
 800d3b0:	200031a4 	.word	0x200031a4
 800d3b4:	0800d325 	.word	0x0800d325

0800d3b8 <__sfp_lock_acquire>:
 800d3b8:	4801      	ldr	r0, [pc, #4]	@ (800d3c0 <__sfp_lock_acquire+0x8>)
 800d3ba:	f000 ba68 	b.w	800d88e <__retarget_lock_acquire_recursive>
 800d3be:	bf00      	nop
 800d3c0:	200032e5 	.word	0x200032e5

0800d3c4 <__sfp_lock_release>:
 800d3c4:	4801      	ldr	r0, [pc, #4]	@ (800d3cc <__sfp_lock_release+0x8>)
 800d3c6:	f000 ba63 	b.w	800d890 <__retarget_lock_release_recursive>
 800d3ca:	bf00      	nop
 800d3cc:	200032e5 	.word	0x200032e5

0800d3d0 <__sinit>:
 800d3d0:	b510      	push	{r4, lr}
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	f7ff fff0 	bl	800d3b8 <__sfp_lock_acquire>
 800d3d8:	6a23      	ldr	r3, [r4, #32]
 800d3da:	b11b      	cbz	r3, 800d3e4 <__sinit+0x14>
 800d3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3e0:	f7ff bff0 	b.w	800d3c4 <__sfp_lock_release>
 800d3e4:	4b04      	ldr	r3, [pc, #16]	@ (800d3f8 <__sinit+0x28>)
 800d3e6:	6223      	str	r3, [r4, #32]
 800d3e8:	4b04      	ldr	r3, [pc, #16]	@ (800d3fc <__sinit+0x2c>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1f5      	bne.n	800d3dc <__sinit+0xc>
 800d3f0:	f7ff ffc4 	bl	800d37c <global_stdio_init.part.0>
 800d3f4:	e7f2      	b.n	800d3dc <__sinit+0xc>
 800d3f6:	bf00      	nop
 800d3f8:	0800d33d 	.word	0x0800d33d
 800d3fc:	200032dc 	.word	0x200032dc

0800d400 <_fwalk_sglue>:
 800d400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d404:	4607      	mov	r7, r0
 800d406:	4688      	mov	r8, r1
 800d408:	4614      	mov	r4, r2
 800d40a:	2600      	movs	r6, #0
 800d40c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d410:	f1b9 0901 	subs.w	r9, r9, #1
 800d414:	d505      	bpl.n	800d422 <_fwalk_sglue+0x22>
 800d416:	6824      	ldr	r4, [r4, #0]
 800d418:	2c00      	cmp	r4, #0
 800d41a:	d1f7      	bne.n	800d40c <_fwalk_sglue+0xc>
 800d41c:	4630      	mov	r0, r6
 800d41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d422:	89ab      	ldrh	r3, [r5, #12]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d907      	bls.n	800d438 <_fwalk_sglue+0x38>
 800d428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d42c:	3301      	adds	r3, #1
 800d42e:	d003      	beq.n	800d438 <_fwalk_sglue+0x38>
 800d430:	4629      	mov	r1, r5
 800d432:	4638      	mov	r0, r7
 800d434:	47c0      	blx	r8
 800d436:	4306      	orrs	r6, r0
 800d438:	3568      	adds	r5, #104	@ 0x68
 800d43a:	e7e9      	b.n	800d410 <_fwalk_sglue+0x10>

0800d43c <iprintf>:
 800d43c:	b40f      	push	{r0, r1, r2, r3}
 800d43e:	b507      	push	{r0, r1, r2, lr}
 800d440:	4906      	ldr	r1, [pc, #24]	@ (800d45c <iprintf+0x20>)
 800d442:	ab04      	add	r3, sp, #16
 800d444:	6808      	ldr	r0, [r1, #0]
 800d446:	f853 2b04 	ldr.w	r2, [r3], #4
 800d44a:	6881      	ldr	r1, [r0, #8]
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	f002 fd77 	bl	800ff40 <_vfiprintf_r>
 800d452:	b003      	add	sp, #12
 800d454:	f85d eb04 	ldr.w	lr, [sp], #4
 800d458:	b004      	add	sp, #16
 800d45a:	4770      	bx	lr
 800d45c:	20000084 	.word	0x20000084

0800d460 <_puts_r>:
 800d460:	6a03      	ldr	r3, [r0, #32]
 800d462:	b570      	push	{r4, r5, r6, lr}
 800d464:	6884      	ldr	r4, [r0, #8]
 800d466:	4605      	mov	r5, r0
 800d468:	460e      	mov	r6, r1
 800d46a:	b90b      	cbnz	r3, 800d470 <_puts_r+0x10>
 800d46c:	f7ff ffb0 	bl	800d3d0 <__sinit>
 800d470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d472:	07db      	lsls	r3, r3, #31
 800d474:	d405      	bmi.n	800d482 <_puts_r+0x22>
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	0598      	lsls	r0, r3, #22
 800d47a:	d402      	bmi.n	800d482 <_puts_r+0x22>
 800d47c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d47e:	f000 fa06 	bl	800d88e <__retarget_lock_acquire_recursive>
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	0719      	lsls	r1, r3, #28
 800d486:	d502      	bpl.n	800d48e <_puts_r+0x2e>
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d135      	bne.n	800d4fa <_puts_r+0x9a>
 800d48e:	4621      	mov	r1, r4
 800d490:	4628      	mov	r0, r5
 800d492:	f000 f919 	bl	800d6c8 <__swsetup_r>
 800d496:	b380      	cbz	r0, 800d4fa <_puts_r+0x9a>
 800d498:	f04f 35ff 	mov.w	r5, #4294967295
 800d49c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d49e:	07da      	lsls	r2, r3, #31
 800d4a0:	d405      	bmi.n	800d4ae <_puts_r+0x4e>
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	059b      	lsls	r3, r3, #22
 800d4a6:	d402      	bmi.n	800d4ae <_puts_r+0x4e>
 800d4a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4aa:	f000 f9f1 	bl	800d890 <__retarget_lock_release_recursive>
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	da04      	bge.n	800d4c0 <_puts_r+0x60>
 800d4b6:	69a2      	ldr	r2, [r4, #24]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	dc17      	bgt.n	800d4ec <_puts_r+0x8c>
 800d4bc:	290a      	cmp	r1, #10
 800d4be:	d015      	beq.n	800d4ec <_puts_r+0x8c>
 800d4c0:	6823      	ldr	r3, [r4, #0]
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	6022      	str	r2, [r4, #0]
 800d4c6:	7019      	strb	r1, [r3, #0]
 800d4c8:	68a3      	ldr	r3, [r4, #8]
 800d4ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	60a3      	str	r3, [r4, #8]
 800d4d2:	2900      	cmp	r1, #0
 800d4d4:	d1ed      	bne.n	800d4b2 <_puts_r+0x52>
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	da11      	bge.n	800d4fe <_puts_r+0x9e>
 800d4da:	4622      	mov	r2, r4
 800d4dc:	210a      	movs	r1, #10
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f000 f8b3 	bl	800d64a <__swbuf_r>
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d0d7      	beq.n	800d498 <_puts_r+0x38>
 800d4e8:	250a      	movs	r5, #10
 800d4ea:	e7d7      	b.n	800d49c <_puts_r+0x3c>
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f000 f8ab 	bl	800d64a <__swbuf_r>
 800d4f4:	3001      	adds	r0, #1
 800d4f6:	d1e7      	bne.n	800d4c8 <_puts_r+0x68>
 800d4f8:	e7ce      	b.n	800d498 <_puts_r+0x38>
 800d4fa:	3e01      	subs	r6, #1
 800d4fc:	e7e4      	b.n	800d4c8 <_puts_r+0x68>
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	1c5a      	adds	r2, r3, #1
 800d502:	6022      	str	r2, [r4, #0]
 800d504:	220a      	movs	r2, #10
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	e7ee      	b.n	800d4e8 <_puts_r+0x88>
	...

0800d50c <puts>:
 800d50c:	4b02      	ldr	r3, [pc, #8]	@ (800d518 <puts+0xc>)
 800d50e:	4601      	mov	r1, r0
 800d510:	6818      	ldr	r0, [r3, #0]
 800d512:	f7ff bfa5 	b.w	800d460 <_puts_r>
 800d516:	bf00      	nop
 800d518:	20000084 	.word	0x20000084

0800d51c <sniprintf>:
 800d51c:	b40c      	push	{r2, r3}
 800d51e:	b530      	push	{r4, r5, lr}
 800d520:	4b17      	ldr	r3, [pc, #92]	@ (800d580 <sniprintf+0x64>)
 800d522:	1e0c      	subs	r4, r1, #0
 800d524:	681d      	ldr	r5, [r3, #0]
 800d526:	b09d      	sub	sp, #116	@ 0x74
 800d528:	da08      	bge.n	800d53c <sniprintf+0x20>
 800d52a:	238b      	movs	r3, #139	@ 0x8b
 800d52c:	602b      	str	r3, [r5, #0]
 800d52e:	f04f 30ff 	mov.w	r0, #4294967295
 800d532:	b01d      	add	sp, #116	@ 0x74
 800d534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d538:	b002      	add	sp, #8
 800d53a:	4770      	bx	lr
 800d53c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d540:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d544:	bf14      	ite	ne
 800d546:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d54a:	4623      	moveq	r3, r4
 800d54c:	9304      	str	r3, [sp, #16]
 800d54e:	9307      	str	r3, [sp, #28]
 800d550:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d554:	9002      	str	r0, [sp, #8]
 800d556:	9006      	str	r0, [sp, #24]
 800d558:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d55c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d55e:	ab21      	add	r3, sp, #132	@ 0x84
 800d560:	a902      	add	r1, sp, #8
 800d562:	4628      	mov	r0, r5
 800d564:	9301      	str	r3, [sp, #4]
 800d566:	f002 fbc5 	bl	800fcf4 <_svfiprintf_r>
 800d56a:	1c43      	adds	r3, r0, #1
 800d56c:	bfbc      	itt	lt
 800d56e:	238b      	movlt	r3, #139	@ 0x8b
 800d570:	602b      	strlt	r3, [r5, #0]
 800d572:	2c00      	cmp	r4, #0
 800d574:	d0dd      	beq.n	800d532 <sniprintf+0x16>
 800d576:	9b02      	ldr	r3, [sp, #8]
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
 800d57c:	e7d9      	b.n	800d532 <sniprintf+0x16>
 800d57e:	bf00      	nop
 800d580:	20000084 	.word	0x20000084

0800d584 <siprintf>:
 800d584:	b40e      	push	{r1, r2, r3}
 800d586:	b500      	push	{lr}
 800d588:	b09c      	sub	sp, #112	@ 0x70
 800d58a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d58c:	9002      	str	r0, [sp, #8]
 800d58e:	9006      	str	r0, [sp, #24]
 800d590:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d594:	4809      	ldr	r0, [pc, #36]	@ (800d5bc <siprintf+0x38>)
 800d596:	9107      	str	r1, [sp, #28]
 800d598:	9104      	str	r1, [sp, #16]
 800d59a:	4909      	ldr	r1, [pc, #36]	@ (800d5c0 <siprintf+0x3c>)
 800d59c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5a0:	9105      	str	r1, [sp, #20]
 800d5a2:	6800      	ldr	r0, [r0, #0]
 800d5a4:	9301      	str	r3, [sp, #4]
 800d5a6:	a902      	add	r1, sp, #8
 800d5a8:	f002 fba4 	bl	800fcf4 <_svfiprintf_r>
 800d5ac:	9b02      	ldr	r3, [sp, #8]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	701a      	strb	r2, [r3, #0]
 800d5b2:	b01c      	add	sp, #112	@ 0x70
 800d5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5b8:	b003      	add	sp, #12
 800d5ba:	4770      	bx	lr
 800d5bc:	20000084 	.word	0x20000084
 800d5c0:	ffff0208 	.word	0xffff0208

0800d5c4 <__sread>:
 800d5c4:	b510      	push	{r4, lr}
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5cc:	f000 f900 	bl	800d7d0 <_read_r>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	bfab      	itete	ge
 800d5d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d5d6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5d8:	181b      	addge	r3, r3, r0
 800d5da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5de:	bfac      	ite	ge
 800d5e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5e2:	81a3      	strhlt	r3, [r4, #12]
 800d5e4:	bd10      	pop	{r4, pc}

0800d5e6 <__swrite>:
 800d5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ea:	461f      	mov	r7, r3
 800d5ec:	898b      	ldrh	r3, [r1, #12]
 800d5ee:	05db      	lsls	r3, r3, #23
 800d5f0:	4605      	mov	r5, r0
 800d5f2:	460c      	mov	r4, r1
 800d5f4:	4616      	mov	r6, r2
 800d5f6:	d505      	bpl.n	800d604 <__swrite+0x1e>
 800d5f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	2200      	movs	r2, #0
 800d600:	f000 f8d4 	bl	800d7ac <_lseek_r>
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d60a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	4632      	mov	r2, r6
 800d612:	463b      	mov	r3, r7
 800d614:	4628      	mov	r0, r5
 800d616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d61a:	f000 b8fb 	b.w	800d814 <_write_r>

0800d61e <__sseek>:
 800d61e:	b510      	push	{r4, lr}
 800d620:	460c      	mov	r4, r1
 800d622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d626:	f000 f8c1 	bl	800d7ac <_lseek_r>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	89a3      	ldrh	r3, [r4, #12]
 800d62e:	bf15      	itete	ne
 800d630:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d632:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d636:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d63a:	81a3      	strheq	r3, [r4, #12]
 800d63c:	bf18      	it	ne
 800d63e:	81a3      	strhne	r3, [r4, #12]
 800d640:	bd10      	pop	{r4, pc}

0800d642 <__sclose>:
 800d642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d646:	f000 b8a1 	b.w	800d78c <_close_r>

0800d64a <__swbuf_r>:
 800d64a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64c:	460e      	mov	r6, r1
 800d64e:	4614      	mov	r4, r2
 800d650:	4605      	mov	r5, r0
 800d652:	b118      	cbz	r0, 800d65c <__swbuf_r+0x12>
 800d654:	6a03      	ldr	r3, [r0, #32]
 800d656:	b90b      	cbnz	r3, 800d65c <__swbuf_r+0x12>
 800d658:	f7ff feba 	bl	800d3d0 <__sinit>
 800d65c:	69a3      	ldr	r3, [r4, #24]
 800d65e:	60a3      	str	r3, [r4, #8]
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	071a      	lsls	r2, r3, #28
 800d664:	d501      	bpl.n	800d66a <__swbuf_r+0x20>
 800d666:	6923      	ldr	r3, [r4, #16]
 800d668:	b943      	cbnz	r3, 800d67c <__swbuf_r+0x32>
 800d66a:	4621      	mov	r1, r4
 800d66c:	4628      	mov	r0, r5
 800d66e:	f000 f82b 	bl	800d6c8 <__swsetup_r>
 800d672:	b118      	cbz	r0, 800d67c <__swbuf_r+0x32>
 800d674:	f04f 37ff 	mov.w	r7, #4294967295
 800d678:	4638      	mov	r0, r7
 800d67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	6922      	ldr	r2, [r4, #16]
 800d680:	1a98      	subs	r0, r3, r2
 800d682:	6963      	ldr	r3, [r4, #20]
 800d684:	b2f6      	uxtb	r6, r6
 800d686:	4283      	cmp	r3, r0
 800d688:	4637      	mov	r7, r6
 800d68a:	dc05      	bgt.n	800d698 <__swbuf_r+0x4e>
 800d68c:	4621      	mov	r1, r4
 800d68e:	4628      	mov	r0, r5
 800d690:	f002 fdf2 	bl	8010278 <_fflush_r>
 800d694:	2800      	cmp	r0, #0
 800d696:	d1ed      	bne.n	800d674 <__swbuf_r+0x2a>
 800d698:	68a3      	ldr	r3, [r4, #8]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	60a3      	str	r3, [r4, #8]
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	1c5a      	adds	r2, r3, #1
 800d6a2:	6022      	str	r2, [r4, #0]
 800d6a4:	701e      	strb	r6, [r3, #0]
 800d6a6:	6962      	ldr	r2, [r4, #20]
 800d6a8:	1c43      	adds	r3, r0, #1
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d004      	beq.n	800d6b8 <__swbuf_r+0x6e>
 800d6ae:	89a3      	ldrh	r3, [r4, #12]
 800d6b0:	07db      	lsls	r3, r3, #31
 800d6b2:	d5e1      	bpl.n	800d678 <__swbuf_r+0x2e>
 800d6b4:	2e0a      	cmp	r6, #10
 800d6b6:	d1df      	bne.n	800d678 <__swbuf_r+0x2e>
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	f002 fddc 	bl	8010278 <_fflush_r>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d0d9      	beq.n	800d678 <__swbuf_r+0x2e>
 800d6c4:	e7d6      	b.n	800d674 <__swbuf_r+0x2a>
	...

0800d6c8 <__swsetup_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4b29      	ldr	r3, [pc, #164]	@ (800d770 <__swsetup_r+0xa8>)
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	6818      	ldr	r0, [r3, #0]
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	b118      	cbz	r0, 800d6dc <__swsetup_r+0x14>
 800d6d4:	6a03      	ldr	r3, [r0, #32]
 800d6d6:	b90b      	cbnz	r3, 800d6dc <__swsetup_r+0x14>
 800d6d8:	f7ff fe7a 	bl	800d3d0 <__sinit>
 800d6dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e0:	0719      	lsls	r1, r3, #28
 800d6e2:	d422      	bmi.n	800d72a <__swsetup_r+0x62>
 800d6e4:	06da      	lsls	r2, r3, #27
 800d6e6:	d407      	bmi.n	800d6f8 <__swsetup_r+0x30>
 800d6e8:	2209      	movs	r2, #9
 800d6ea:	602a      	str	r2, [r5, #0]
 800d6ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6f0:	81a3      	strh	r3, [r4, #12]
 800d6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f6:	e033      	b.n	800d760 <__swsetup_r+0x98>
 800d6f8:	0758      	lsls	r0, r3, #29
 800d6fa:	d512      	bpl.n	800d722 <__swsetup_r+0x5a>
 800d6fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6fe:	b141      	cbz	r1, 800d712 <__swsetup_r+0x4a>
 800d700:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d704:	4299      	cmp	r1, r3
 800d706:	d002      	beq.n	800d70e <__swsetup_r+0x46>
 800d708:	4628      	mov	r0, r5
 800d70a:	f000 ff15 	bl	800e538 <_free_r>
 800d70e:	2300      	movs	r3, #0
 800d710:	6363      	str	r3, [r4, #52]	@ 0x34
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	2300      	movs	r3, #0
 800d71c:	6063      	str	r3, [r4, #4]
 800d71e:	6923      	ldr	r3, [r4, #16]
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	89a3      	ldrh	r3, [r4, #12]
 800d724:	f043 0308 	orr.w	r3, r3, #8
 800d728:	81a3      	strh	r3, [r4, #12]
 800d72a:	6923      	ldr	r3, [r4, #16]
 800d72c:	b94b      	cbnz	r3, 800d742 <__swsetup_r+0x7a>
 800d72e:	89a3      	ldrh	r3, [r4, #12]
 800d730:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d738:	d003      	beq.n	800d742 <__swsetup_r+0x7a>
 800d73a:	4621      	mov	r1, r4
 800d73c:	4628      	mov	r0, r5
 800d73e:	f002 fde9 	bl	8010314 <__smakebuf_r>
 800d742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d746:	f013 0201 	ands.w	r2, r3, #1
 800d74a:	d00a      	beq.n	800d762 <__swsetup_r+0x9a>
 800d74c:	2200      	movs	r2, #0
 800d74e:	60a2      	str	r2, [r4, #8]
 800d750:	6962      	ldr	r2, [r4, #20]
 800d752:	4252      	negs	r2, r2
 800d754:	61a2      	str	r2, [r4, #24]
 800d756:	6922      	ldr	r2, [r4, #16]
 800d758:	b942      	cbnz	r2, 800d76c <__swsetup_r+0xa4>
 800d75a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d75e:	d1c5      	bne.n	800d6ec <__swsetup_r+0x24>
 800d760:	bd38      	pop	{r3, r4, r5, pc}
 800d762:	0799      	lsls	r1, r3, #30
 800d764:	bf58      	it	pl
 800d766:	6962      	ldrpl	r2, [r4, #20]
 800d768:	60a2      	str	r2, [r4, #8]
 800d76a:	e7f4      	b.n	800d756 <__swsetup_r+0x8e>
 800d76c:	2000      	movs	r0, #0
 800d76e:	e7f7      	b.n	800d760 <__swsetup_r+0x98>
 800d770:	20000084 	.word	0x20000084

0800d774 <memset>:
 800d774:	4402      	add	r2, r0
 800d776:	4603      	mov	r3, r0
 800d778:	4293      	cmp	r3, r2
 800d77a:	d100      	bne.n	800d77e <memset+0xa>
 800d77c:	4770      	bx	lr
 800d77e:	f803 1b01 	strb.w	r1, [r3], #1
 800d782:	e7f9      	b.n	800d778 <memset+0x4>

0800d784 <_localeconv_r>:
 800d784:	4800      	ldr	r0, [pc, #0]	@ (800d788 <_localeconv_r+0x4>)
 800d786:	4770      	bx	lr
 800d788:	200001c4 	.word	0x200001c4

0800d78c <_close_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d06      	ldr	r5, [pc, #24]	@ (800d7a8 <_close_r+0x1c>)
 800d790:	2300      	movs	r3, #0
 800d792:	4604      	mov	r4, r0
 800d794:	4608      	mov	r0, r1
 800d796:	602b      	str	r3, [r5, #0]
 800d798:	f7f6 fd74 	bl	8004284 <_close>
 800d79c:	1c43      	adds	r3, r0, #1
 800d79e:	d102      	bne.n	800d7a6 <_close_r+0x1a>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	b103      	cbz	r3, 800d7a6 <_close_r+0x1a>
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	200032e0 	.word	0x200032e0

0800d7ac <_lseek_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4d07      	ldr	r5, [pc, #28]	@ (800d7cc <_lseek_r+0x20>)
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	4608      	mov	r0, r1
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	602a      	str	r2, [r5, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	f7f6 fd89 	bl	80042d2 <_lseek>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	d102      	bne.n	800d7ca <_lseek_r+0x1e>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	b103      	cbz	r3, 800d7ca <_lseek_r+0x1e>
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	bd38      	pop	{r3, r4, r5, pc}
 800d7cc:	200032e0 	.word	0x200032e0

0800d7d0 <_read_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4d07      	ldr	r5, [pc, #28]	@ (800d7f0 <_read_r+0x20>)
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	4608      	mov	r0, r1
 800d7d8:	4611      	mov	r1, r2
 800d7da:	2200      	movs	r2, #0
 800d7dc:	602a      	str	r2, [r5, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	f7f6 fd17 	bl	8004212 <_read>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d102      	bne.n	800d7ee <_read_r+0x1e>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	b103      	cbz	r3, 800d7ee <_read_r+0x1e>
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	200032e0 	.word	0x200032e0

0800d7f4 <_sbrk_r>:
 800d7f4:	b538      	push	{r3, r4, r5, lr}
 800d7f6:	4d06      	ldr	r5, [pc, #24]	@ (800d810 <_sbrk_r+0x1c>)
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	4608      	mov	r0, r1
 800d7fe:	602b      	str	r3, [r5, #0]
 800d800:	f7f6 fd74 	bl	80042ec <_sbrk>
 800d804:	1c43      	adds	r3, r0, #1
 800d806:	d102      	bne.n	800d80e <_sbrk_r+0x1a>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	b103      	cbz	r3, 800d80e <_sbrk_r+0x1a>
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	bd38      	pop	{r3, r4, r5, pc}
 800d810:	200032e0 	.word	0x200032e0

0800d814 <_write_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	4d07      	ldr	r5, [pc, #28]	@ (800d834 <_write_r+0x20>)
 800d818:	4604      	mov	r4, r0
 800d81a:	4608      	mov	r0, r1
 800d81c:	4611      	mov	r1, r2
 800d81e:	2200      	movs	r2, #0
 800d820:	602a      	str	r2, [r5, #0]
 800d822:	461a      	mov	r2, r3
 800d824:	f7f6 fd12 	bl	800424c <_write>
 800d828:	1c43      	adds	r3, r0, #1
 800d82a:	d102      	bne.n	800d832 <_write_r+0x1e>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b103      	cbz	r3, 800d832 <_write_r+0x1e>
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	200032e0 	.word	0x200032e0

0800d838 <__errno>:
 800d838:	4b01      	ldr	r3, [pc, #4]	@ (800d840 <__errno+0x8>)
 800d83a:	6818      	ldr	r0, [r3, #0]
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	20000084 	.word	0x20000084

0800d844 <__libc_init_array>:
 800d844:	b570      	push	{r4, r5, r6, lr}
 800d846:	4d0d      	ldr	r5, [pc, #52]	@ (800d87c <__libc_init_array+0x38>)
 800d848:	4c0d      	ldr	r4, [pc, #52]	@ (800d880 <__libc_init_array+0x3c>)
 800d84a:	1b64      	subs	r4, r4, r5
 800d84c:	10a4      	asrs	r4, r4, #2
 800d84e:	2600      	movs	r6, #0
 800d850:	42a6      	cmp	r6, r4
 800d852:	d109      	bne.n	800d868 <__libc_init_array+0x24>
 800d854:	4d0b      	ldr	r5, [pc, #44]	@ (800d884 <__libc_init_array+0x40>)
 800d856:	4c0c      	ldr	r4, [pc, #48]	@ (800d888 <__libc_init_array+0x44>)
 800d858:	f003 fa1c 	bl	8010c94 <_init>
 800d85c:	1b64      	subs	r4, r4, r5
 800d85e:	10a4      	asrs	r4, r4, #2
 800d860:	2600      	movs	r6, #0
 800d862:	42a6      	cmp	r6, r4
 800d864:	d105      	bne.n	800d872 <__libc_init_array+0x2e>
 800d866:	bd70      	pop	{r4, r5, r6, pc}
 800d868:	f855 3b04 	ldr.w	r3, [r5], #4
 800d86c:	4798      	blx	r3
 800d86e:	3601      	adds	r6, #1
 800d870:	e7ee      	b.n	800d850 <__libc_init_array+0xc>
 800d872:	f855 3b04 	ldr.w	r3, [r5], #4
 800d876:	4798      	blx	r3
 800d878:	3601      	adds	r6, #1
 800d87a:	e7f2      	b.n	800d862 <__libc_init_array+0x1e>
 800d87c:	080122b8 	.word	0x080122b8
 800d880:	080122b8 	.word	0x080122b8
 800d884:	080122b8 	.word	0x080122b8
 800d888:	080122bc 	.word	0x080122bc

0800d88c <__retarget_lock_init_recursive>:
 800d88c:	4770      	bx	lr

0800d88e <__retarget_lock_acquire_recursive>:
 800d88e:	4770      	bx	lr

0800d890 <__retarget_lock_release_recursive>:
 800d890:	4770      	bx	lr
	...

0800d894 <nanf>:
 800d894:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d89c <nanf+0x8>
 800d898:	4770      	bx	lr
 800d89a:	bf00      	nop
 800d89c:	7fc00000 	.word	0x7fc00000

0800d8a0 <quorem>:
 800d8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a4:	6903      	ldr	r3, [r0, #16]
 800d8a6:	690c      	ldr	r4, [r1, #16]
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	4607      	mov	r7, r0
 800d8ac:	db7e      	blt.n	800d9ac <quorem+0x10c>
 800d8ae:	3c01      	subs	r4, #1
 800d8b0:	f101 0814 	add.w	r8, r1, #20
 800d8b4:	00a3      	lsls	r3, r4, #2
 800d8b6:	f100 0514 	add.w	r5, r0, #20
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8d6:	d32e      	bcc.n	800d936 <quorem+0x96>
 800d8d8:	f04f 0a00 	mov.w	sl, #0
 800d8dc:	46c4      	mov	ip, r8
 800d8de:	46ae      	mov	lr, r5
 800d8e0:	46d3      	mov	fp, sl
 800d8e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d8e6:	b298      	uxth	r0, r3
 800d8e8:	fb06 a000 	mla	r0, r6, r0, sl
 800d8ec:	0c02      	lsrs	r2, r0, #16
 800d8ee:	0c1b      	lsrs	r3, r3, #16
 800d8f0:	fb06 2303 	mla	r3, r6, r3, r2
 800d8f4:	f8de 2000 	ldr.w	r2, [lr]
 800d8f8:	b280      	uxth	r0, r0
 800d8fa:	b292      	uxth	r2, r2
 800d8fc:	1a12      	subs	r2, r2, r0
 800d8fe:	445a      	add	r2, fp
 800d900:	f8de 0000 	ldr.w	r0, [lr]
 800d904:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d908:	b29b      	uxth	r3, r3
 800d90a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d90e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d912:	b292      	uxth	r2, r2
 800d914:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d918:	45e1      	cmp	r9, ip
 800d91a:	f84e 2b04 	str.w	r2, [lr], #4
 800d91e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d922:	d2de      	bcs.n	800d8e2 <quorem+0x42>
 800d924:	9b00      	ldr	r3, [sp, #0]
 800d926:	58eb      	ldr	r3, [r5, r3]
 800d928:	b92b      	cbnz	r3, 800d936 <quorem+0x96>
 800d92a:	9b01      	ldr	r3, [sp, #4]
 800d92c:	3b04      	subs	r3, #4
 800d92e:	429d      	cmp	r5, r3
 800d930:	461a      	mov	r2, r3
 800d932:	d32f      	bcc.n	800d994 <quorem+0xf4>
 800d934:	613c      	str	r4, [r7, #16]
 800d936:	4638      	mov	r0, r7
 800d938:	f001 f90c 	bl	800eb54 <__mcmp>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	db25      	blt.n	800d98c <quorem+0xec>
 800d940:	4629      	mov	r1, r5
 800d942:	2000      	movs	r0, #0
 800d944:	f858 2b04 	ldr.w	r2, [r8], #4
 800d948:	f8d1 c000 	ldr.w	ip, [r1]
 800d94c:	fa1f fe82 	uxth.w	lr, r2
 800d950:	fa1f f38c 	uxth.w	r3, ip
 800d954:	eba3 030e 	sub.w	r3, r3, lr
 800d958:	4403      	add	r3, r0
 800d95a:	0c12      	lsrs	r2, r2, #16
 800d95c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d960:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d964:	b29b      	uxth	r3, r3
 800d966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d96a:	45c1      	cmp	r9, r8
 800d96c:	f841 3b04 	str.w	r3, [r1], #4
 800d970:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d974:	d2e6      	bcs.n	800d944 <quorem+0xa4>
 800d976:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d97a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d97e:	b922      	cbnz	r2, 800d98a <quorem+0xea>
 800d980:	3b04      	subs	r3, #4
 800d982:	429d      	cmp	r5, r3
 800d984:	461a      	mov	r2, r3
 800d986:	d30b      	bcc.n	800d9a0 <quorem+0x100>
 800d988:	613c      	str	r4, [r7, #16]
 800d98a:	3601      	adds	r6, #1
 800d98c:	4630      	mov	r0, r6
 800d98e:	b003      	add	sp, #12
 800d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d994:	6812      	ldr	r2, [r2, #0]
 800d996:	3b04      	subs	r3, #4
 800d998:	2a00      	cmp	r2, #0
 800d99a:	d1cb      	bne.n	800d934 <quorem+0x94>
 800d99c:	3c01      	subs	r4, #1
 800d99e:	e7c6      	b.n	800d92e <quorem+0x8e>
 800d9a0:	6812      	ldr	r2, [r2, #0]
 800d9a2:	3b04      	subs	r3, #4
 800d9a4:	2a00      	cmp	r2, #0
 800d9a6:	d1ef      	bne.n	800d988 <quorem+0xe8>
 800d9a8:	3c01      	subs	r4, #1
 800d9aa:	e7ea      	b.n	800d982 <quorem+0xe2>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	e7ee      	b.n	800d98e <quorem+0xee>

0800d9b0 <_dtoa_r>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	69c7      	ldr	r7, [r0, #28]
 800d9b6:	b099      	sub	sp, #100	@ 0x64
 800d9b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d9bc:	ec55 4b10 	vmov	r4, r5, d0
 800d9c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d9c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d9c4:	4683      	mov	fp, r0
 800d9c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d9c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9ca:	b97f      	cbnz	r7, 800d9ec <_dtoa_r+0x3c>
 800d9cc:	2010      	movs	r0, #16
 800d9ce:	f7fe fd51 	bl	800c474 <malloc>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d9d8:	b920      	cbnz	r0, 800d9e4 <_dtoa_r+0x34>
 800d9da:	4ba7      	ldr	r3, [pc, #668]	@ (800dc78 <_dtoa_r+0x2c8>)
 800d9dc:	21ef      	movs	r1, #239	@ 0xef
 800d9de:	48a7      	ldr	r0, [pc, #668]	@ (800dc7c <_dtoa_r+0x2cc>)
 800d9e0:	f002 fd3a 	bl	8010458 <__assert_func>
 800d9e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d9e8:	6007      	str	r7, [r0, #0]
 800d9ea:	60c7      	str	r7, [r0, #12]
 800d9ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d9f0:	6819      	ldr	r1, [r3, #0]
 800d9f2:	b159      	cbz	r1, 800da0c <_dtoa_r+0x5c>
 800d9f4:	685a      	ldr	r2, [r3, #4]
 800d9f6:	604a      	str	r2, [r1, #4]
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	4093      	lsls	r3, r2
 800d9fc:	608b      	str	r3, [r1, #8]
 800d9fe:	4658      	mov	r0, fp
 800da00:	f000 fe24 	bl	800e64c <_Bfree>
 800da04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800da08:	2200      	movs	r2, #0
 800da0a:	601a      	str	r2, [r3, #0]
 800da0c:	1e2b      	subs	r3, r5, #0
 800da0e:	bfb9      	ittee	lt
 800da10:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800da14:	9303      	strlt	r3, [sp, #12]
 800da16:	2300      	movge	r3, #0
 800da18:	6033      	strge	r3, [r6, #0]
 800da1a:	9f03      	ldr	r7, [sp, #12]
 800da1c:	4b98      	ldr	r3, [pc, #608]	@ (800dc80 <_dtoa_r+0x2d0>)
 800da1e:	bfbc      	itt	lt
 800da20:	2201      	movlt	r2, #1
 800da22:	6032      	strlt	r2, [r6, #0]
 800da24:	43bb      	bics	r3, r7
 800da26:	d112      	bne.n	800da4e <_dtoa_r+0x9e>
 800da28:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800da2a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800da2e:	6013      	str	r3, [r2, #0]
 800da30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da34:	4323      	orrs	r3, r4
 800da36:	f000 854d 	beq.w	800e4d4 <_dtoa_r+0xb24>
 800da3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da3c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dc94 <_dtoa_r+0x2e4>
 800da40:	2b00      	cmp	r3, #0
 800da42:	f000 854f 	beq.w	800e4e4 <_dtoa_r+0xb34>
 800da46:	f10a 0303 	add.w	r3, sl, #3
 800da4a:	f000 bd49 	b.w	800e4e0 <_dtoa_r+0xb30>
 800da4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da52:	2200      	movs	r2, #0
 800da54:	ec51 0b17 	vmov	r0, r1, d7
 800da58:	2300      	movs	r3, #0
 800da5a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800da5e:	f7f3 f853 	bl	8000b08 <__aeabi_dcmpeq>
 800da62:	4680      	mov	r8, r0
 800da64:	b158      	cbz	r0, 800da7e <_dtoa_r+0xce>
 800da66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800da68:	2301      	movs	r3, #1
 800da6a:	6013      	str	r3, [r2, #0]
 800da6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800da6e:	b113      	cbz	r3, 800da76 <_dtoa_r+0xc6>
 800da70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800da72:	4b84      	ldr	r3, [pc, #528]	@ (800dc84 <_dtoa_r+0x2d4>)
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dc98 <_dtoa_r+0x2e8>
 800da7a:	f000 bd33 	b.w	800e4e4 <_dtoa_r+0xb34>
 800da7e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800da82:	aa16      	add	r2, sp, #88	@ 0x58
 800da84:	a917      	add	r1, sp, #92	@ 0x5c
 800da86:	4658      	mov	r0, fp
 800da88:	f001 f984 	bl	800ed94 <__d2b>
 800da8c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800da90:	4681      	mov	r9, r0
 800da92:	2e00      	cmp	r6, #0
 800da94:	d077      	beq.n	800db86 <_dtoa_r+0x1d6>
 800da96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da98:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800da9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800daa4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800daa8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800daac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dab0:	4619      	mov	r1, r3
 800dab2:	2200      	movs	r2, #0
 800dab4:	4b74      	ldr	r3, [pc, #464]	@ (800dc88 <_dtoa_r+0x2d8>)
 800dab6:	f7f2 fc07 	bl	80002c8 <__aeabi_dsub>
 800daba:	a369      	add	r3, pc, #420	@ (adr r3, 800dc60 <_dtoa_r+0x2b0>)
 800dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac0:	f7f2 fdba 	bl	8000638 <__aeabi_dmul>
 800dac4:	a368      	add	r3, pc, #416	@ (adr r3, 800dc68 <_dtoa_r+0x2b8>)
 800dac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daca:	f7f2 fbff 	bl	80002cc <__adddf3>
 800dace:	4604      	mov	r4, r0
 800dad0:	4630      	mov	r0, r6
 800dad2:	460d      	mov	r5, r1
 800dad4:	f7f2 fd46 	bl	8000564 <__aeabi_i2d>
 800dad8:	a365      	add	r3, pc, #404	@ (adr r3, 800dc70 <_dtoa_r+0x2c0>)
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	f7f2 fdab 	bl	8000638 <__aeabi_dmul>
 800dae2:	4602      	mov	r2, r0
 800dae4:	460b      	mov	r3, r1
 800dae6:	4620      	mov	r0, r4
 800dae8:	4629      	mov	r1, r5
 800daea:	f7f2 fbef 	bl	80002cc <__adddf3>
 800daee:	4604      	mov	r4, r0
 800daf0:	460d      	mov	r5, r1
 800daf2:	f7f3 f851 	bl	8000b98 <__aeabi_d2iz>
 800daf6:	2200      	movs	r2, #0
 800daf8:	4607      	mov	r7, r0
 800dafa:	2300      	movs	r3, #0
 800dafc:	4620      	mov	r0, r4
 800dafe:	4629      	mov	r1, r5
 800db00:	f7f3 f80c 	bl	8000b1c <__aeabi_dcmplt>
 800db04:	b140      	cbz	r0, 800db18 <_dtoa_r+0x168>
 800db06:	4638      	mov	r0, r7
 800db08:	f7f2 fd2c 	bl	8000564 <__aeabi_i2d>
 800db0c:	4622      	mov	r2, r4
 800db0e:	462b      	mov	r3, r5
 800db10:	f7f2 fffa 	bl	8000b08 <__aeabi_dcmpeq>
 800db14:	b900      	cbnz	r0, 800db18 <_dtoa_r+0x168>
 800db16:	3f01      	subs	r7, #1
 800db18:	2f16      	cmp	r7, #22
 800db1a:	d851      	bhi.n	800dbc0 <_dtoa_r+0x210>
 800db1c:	4b5b      	ldr	r3, [pc, #364]	@ (800dc8c <_dtoa_r+0x2dc>)
 800db1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db2a:	f7f2 fff7 	bl	8000b1c <__aeabi_dcmplt>
 800db2e:	2800      	cmp	r0, #0
 800db30:	d048      	beq.n	800dbc4 <_dtoa_r+0x214>
 800db32:	3f01      	subs	r7, #1
 800db34:	2300      	movs	r3, #0
 800db36:	9312      	str	r3, [sp, #72]	@ 0x48
 800db38:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800db3a:	1b9b      	subs	r3, r3, r6
 800db3c:	1e5a      	subs	r2, r3, #1
 800db3e:	bf44      	itt	mi
 800db40:	f1c3 0801 	rsbmi	r8, r3, #1
 800db44:	2300      	movmi	r3, #0
 800db46:	9208      	str	r2, [sp, #32]
 800db48:	bf54      	ite	pl
 800db4a:	f04f 0800 	movpl.w	r8, #0
 800db4e:	9308      	strmi	r3, [sp, #32]
 800db50:	2f00      	cmp	r7, #0
 800db52:	db39      	blt.n	800dbc8 <_dtoa_r+0x218>
 800db54:	9b08      	ldr	r3, [sp, #32]
 800db56:	970f      	str	r7, [sp, #60]	@ 0x3c
 800db58:	443b      	add	r3, r7
 800db5a:	9308      	str	r3, [sp, #32]
 800db5c:	2300      	movs	r3, #0
 800db5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800db60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db62:	2b09      	cmp	r3, #9
 800db64:	d864      	bhi.n	800dc30 <_dtoa_r+0x280>
 800db66:	2b05      	cmp	r3, #5
 800db68:	bfc4      	itt	gt
 800db6a:	3b04      	subgt	r3, #4
 800db6c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800db6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db70:	f1a3 0302 	sub.w	r3, r3, #2
 800db74:	bfcc      	ite	gt
 800db76:	2400      	movgt	r4, #0
 800db78:	2401      	movle	r4, #1
 800db7a:	2b03      	cmp	r3, #3
 800db7c:	d863      	bhi.n	800dc46 <_dtoa_r+0x296>
 800db7e:	e8df f003 	tbb	[pc, r3]
 800db82:	372a      	.short	0x372a
 800db84:	5535      	.short	0x5535
 800db86:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800db8a:	441e      	add	r6, r3
 800db8c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800db90:	2b20      	cmp	r3, #32
 800db92:	bfc1      	itttt	gt
 800db94:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800db98:	409f      	lslgt	r7, r3
 800db9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800db9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dba2:	bfd6      	itet	le
 800dba4:	f1c3 0320 	rsble	r3, r3, #32
 800dba8:	ea47 0003 	orrgt.w	r0, r7, r3
 800dbac:	fa04 f003 	lslle.w	r0, r4, r3
 800dbb0:	f7f2 fcc8 	bl	8000544 <__aeabi_ui2d>
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dbba:	3e01      	subs	r6, #1
 800dbbc:	9214      	str	r2, [sp, #80]	@ 0x50
 800dbbe:	e777      	b.n	800dab0 <_dtoa_r+0x100>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	e7b8      	b.n	800db36 <_dtoa_r+0x186>
 800dbc4:	9012      	str	r0, [sp, #72]	@ 0x48
 800dbc6:	e7b7      	b.n	800db38 <_dtoa_r+0x188>
 800dbc8:	427b      	negs	r3, r7
 800dbca:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbcc:	2300      	movs	r3, #0
 800dbce:	eba8 0807 	sub.w	r8, r8, r7
 800dbd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbd4:	e7c4      	b.n	800db60 <_dtoa_r+0x1b0>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	dc35      	bgt.n	800dc4c <_dtoa_r+0x29c>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	9307      	str	r3, [sp, #28]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dbea:	e00b      	b.n	800dc04 <_dtoa_r+0x254>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e7f3      	b.n	800dbd8 <_dtoa_r+0x228>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbf6:	18fb      	adds	r3, r7, r3
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	9307      	str	r3, [sp, #28]
 800dc00:	bfb8      	it	lt
 800dc02:	2301      	movlt	r3, #1
 800dc04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dc08:	2100      	movs	r1, #0
 800dc0a:	2204      	movs	r2, #4
 800dc0c:	f102 0514 	add.w	r5, r2, #20
 800dc10:	429d      	cmp	r5, r3
 800dc12:	d91f      	bls.n	800dc54 <_dtoa_r+0x2a4>
 800dc14:	6041      	str	r1, [r0, #4]
 800dc16:	4658      	mov	r0, fp
 800dc18:	f000 fcd8 	bl	800e5cc <_Balloc>
 800dc1c:	4682      	mov	sl, r0
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d13c      	bne.n	800dc9c <_dtoa_r+0x2ec>
 800dc22:	4b1b      	ldr	r3, [pc, #108]	@ (800dc90 <_dtoa_r+0x2e0>)
 800dc24:	4602      	mov	r2, r0
 800dc26:	f240 11af 	movw	r1, #431	@ 0x1af
 800dc2a:	e6d8      	b.n	800d9de <_dtoa_r+0x2e>
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e7e0      	b.n	800dbf2 <_dtoa_r+0x242>
 800dc30:	2401      	movs	r4, #1
 800dc32:	2300      	movs	r3, #0
 800dc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dc38:	f04f 33ff 	mov.w	r3, #4294967295
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	9307      	str	r3, [sp, #28]
 800dc40:	2200      	movs	r2, #0
 800dc42:	2312      	movs	r3, #18
 800dc44:	e7d0      	b.n	800dbe8 <_dtoa_r+0x238>
 800dc46:	2301      	movs	r3, #1
 800dc48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc4a:	e7f5      	b.n	800dc38 <_dtoa_r+0x288>
 800dc4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	9307      	str	r3, [sp, #28]
 800dc52:	e7d7      	b.n	800dc04 <_dtoa_r+0x254>
 800dc54:	3101      	adds	r1, #1
 800dc56:	0052      	lsls	r2, r2, #1
 800dc58:	e7d8      	b.n	800dc0c <_dtoa_r+0x25c>
 800dc5a:	bf00      	nop
 800dc5c:	f3af 8000 	nop.w
 800dc60:	636f4361 	.word	0x636f4361
 800dc64:	3fd287a7 	.word	0x3fd287a7
 800dc68:	8b60c8b3 	.word	0x8b60c8b3
 800dc6c:	3fc68a28 	.word	0x3fc68a28
 800dc70:	509f79fb 	.word	0x509f79fb
 800dc74:	3fd34413 	.word	0x3fd34413
 800dc78:	08011eca 	.word	0x08011eca
 800dc7c:	08011ee1 	.word	0x08011ee1
 800dc80:	7ff00000 	.word	0x7ff00000
 800dc84:	08011e95 	.word	0x08011e95
 800dc88:	3ff80000 	.word	0x3ff80000
 800dc8c:	08011fd8 	.word	0x08011fd8
 800dc90:	08011f39 	.word	0x08011f39
 800dc94:	08011ec6 	.word	0x08011ec6
 800dc98:	08011e94 	.word	0x08011e94
 800dc9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dca0:	6018      	str	r0, [r3, #0]
 800dca2:	9b07      	ldr	r3, [sp, #28]
 800dca4:	2b0e      	cmp	r3, #14
 800dca6:	f200 80a4 	bhi.w	800ddf2 <_dtoa_r+0x442>
 800dcaa:	2c00      	cmp	r4, #0
 800dcac:	f000 80a1 	beq.w	800ddf2 <_dtoa_r+0x442>
 800dcb0:	2f00      	cmp	r7, #0
 800dcb2:	dd33      	ble.n	800dd1c <_dtoa_r+0x36c>
 800dcb4:	4bad      	ldr	r3, [pc, #692]	@ (800df6c <_dtoa_r+0x5bc>)
 800dcb6:	f007 020f 	and.w	r2, r7, #15
 800dcba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcbe:	ed93 7b00 	vldr	d7, [r3]
 800dcc2:	05f8      	lsls	r0, r7, #23
 800dcc4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dcc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dccc:	d516      	bpl.n	800dcfc <_dtoa_r+0x34c>
 800dcce:	4ba8      	ldr	r3, [pc, #672]	@ (800df70 <_dtoa_r+0x5c0>)
 800dcd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dcd8:	f7f2 fdd8 	bl	800088c <__aeabi_ddiv>
 800dcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dce0:	f004 040f 	and.w	r4, r4, #15
 800dce4:	2603      	movs	r6, #3
 800dce6:	4da2      	ldr	r5, [pc, #648]	@ (800df70 <_dtoa_r+0x5c0>)
 800dce8:	b954      	cbnz	r4, 800dd00 <_dtoa_r+0x350>
 800dcea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcf2:	f7f2 fdcb 	bl	800088c <__aeabi_ddiv>
 800dcf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcfa:	e028      	b.n	800dd4e <_dtoa_r+0x39e>
 800dcfc:	2602      	movs	r6, #2
 800dcfe:	e7f2      	b.n	800dce6 <_dtoa_r+0x336>
 800dd00:	07e1      	lsls	r1, r4, #31
 800dd02:	d508      	bpl.n	800dd16 <_dtoa_r+0x366>
 800dd04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd0c:	f7f2 fc94 	bl	8000638 <__aeabi_dmul>
 800dd10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd14:	3601      	adds	r6, #1
 800dd16:	1064      	asrs	r4, r4, #1
 800dd18:	3508      	adds	r5, #8
 800dd1a:	e7e5      	b.n	800dce8 <_dtoa_r+0x338>
 800dd1c:	f000 80d2 	beq.w	800dec4 <_dtoa_r+0x514>
 800dd20:	427c      	negs	r4, r7
 800dd22:	4b92      	ldr	r3, [pc, #584]	@ (800df6c <_dtoa_r+0x5bc>)
 800dd24:	4d92      	ldr	r5, [pc, #584]	@ (800df70 <_dtoa_r+0x5c0>)
 800dd26:	f004 020f 	and.w	r2, r4, #15
 800dd2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd36:	f7f2 fc7f 	bl	8000638 <__aeabi_dmul>
 800dd3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd3e:	1124      	asrs	r4, r4, #4
 800dd40:	2300      	movs	r3, #0
 800dd42:	2602      	movs	r6, #2
 800dd44:	2c00      	cmp	r4, #0
 800dd46:	f040 80b2 	bne.w	800deae <_dtoa_r+0x4fe>
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1d3      	bne.n	800dcf6 <_dtoa_r+0x346>
 800dd4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f000 80b7 	beq.w	800dec8 <_dtoa_r+0x518>
 800dd5a:	4b86      	ldr	r3, [pc, #536]	@ (800df74 <_dtoa_r+0x5c4>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4620      	mov	r0, r4
 800dd60:	4629      	mov	r1, r5
 800dd62:	f7f2 fedb 	bl	8000b1c <__aeabi_dcmplt>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	f000 80ae 	beq.w	800dec8 <_dtoa_r+0x518>
 800dd6c:	9b07      	ldr	r3, [sp, #28]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 80aa 	beq.w	800dec8 <_dtoa_r+0x518>
 800dd74:	9b00      	ldr	r3, [sp, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	dd37      	ble.n	800ddea <_dtoa_r+0x43a>
 800dd7a:	1e7b      	subs	r3, r7, #1
 800dd7c:	9304      	str	r3, [sp, #16]
 800dd7e:	4620      	mov	r0, r4
 800dd80:	4b7d      	ldr	r3, [pc, #500]	@ (800df78 <_dtoa_r+0x5c8>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	4629      	mov	r1, r5
 800dd86:	f7f2 fc57 	bl	8000638 <__aeabi_dmul>
 800dd8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd8e:	9c00      	ldr	r4, [sp, #0]
 800dd90:	3601      	adds	r6, #1
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7f2 fbe6 	bl	8000564 <__aeabi_i2d>
 800dd98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd9c:	f7f2 fc4c 	bl	8000638 <__aeabi_dmul>
 800dda0:	4b76      	ldr	r3, [pc, #472]	@ (800df7c <_dtoa_r+0x5cc>)
 800dda2:	2200      	movs	r2, #0
 800dda4:	f7f2 fa92 	bl	80002cc <__adddf3>
 800dda8:	4605      	mov	r5, r0
 800ddaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ddae:	2c00      	cmp	r4, #0
 800ddb0:	f040 808d 	bne.w	800dece <_dtoa_r+0x51e>
 800ddb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddb8:	4b71      	ldr	r3, [pc, #452]	@ (800df80 <_dtoa_r+0x5d0>)
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f7f2 fa84 	bl	80002c8 <__aeabi_dsub>
 800ddc0:	4602      	mov	r2, r0
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ddc8:	462a      	mov	r2, r5
 800ddca:	4633      	mov	r3, r6
 800ddcc:	f7f2 fec4 	bl	8000b58 <__aeabi_dcmpgt>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	f040 828b 	bne.w	800e2ec <_dtoa_r+0x93c>
 800ddd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddda:	462a      	mov	r2, r5
 800dddc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dde0:	f7f2 fe9c 	bl	8000b1c <__aeabi_dcmplt>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	f040 8128 	bne.w	800e03a <_dtoa_r+0x68a>
 800ddea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ddee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ddf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f2c0 815a 	blt.w	800e0ae <_dtoa_r+0x6fe>
 800ddfa:	2f0e      	cmp	r7, #14
 800ddfc:	f300 8157 	bgt.w	800e0ae <_dtoa_r+0x6fe>
 800de00:	4b5a      	ldr	r3, [pc, #360]	@ (800df6c <_dtoa_r+0x5bc>)
 800de02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de06:	ed93 7b00 	vldr	d7, [r3]
 800de0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	ed8d 7b00 	vstr	d7, [sp]
 800de12:	da03      	bge.n	800de1c <_dtoa_r+0x46c>
 800de14:	9b07      	ldr	r3, [sp, #28]
 800de16:	2b00      	cmp	r3, #0
 800de18:	f340 8101 	ble.w	800e01e <_dtoa_r+0x66e>
 800de1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800de20:	4656      	mov	r6, sl
 800de22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de26:	4620      	mov	r0, r4
 800de28:	4629      	mov	r1, r5
 800de2a:	f7f2 fd2f 	bl	800088c <__aeabi_ddiv>
 800de2e:	f7f2 feb3 	bl	8000b98 <__aeabi_d2iz>
 800de32:	4680      	mov	r8, r0
 800de34:	f7f2 fb96 	bl	8000564 <__aeabi_i2d>
 800de38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de3c:	f7f2 fbfc 	bl	8000638 <__aeabi_dmul>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4620      	mov	r0, r4
 800de46:	4629      	mov	r1, r5
 800de48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800de4c:	f7f2 fa3c 	bl	80002c8 <__aeabi_dsub>
 800de50:	f806 4b01 	strb.w	r4, [r6], #1
 800de54:	9d07      	ldr	r5, [sp, #28]
 800de56:	eba6 040a 	sub.w	r4, r6, sl
 800de5a:	42a5      	cmp	r5, r4
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	f040 8117 	bne.w	800e092 <_dtoa_r+0x6e2>
 800de64:	f7f2 fa32 	bl	80002cc <__adddf3>
 800de68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de6c:	4604      	mov	r4, r0
 800de6e:	460d      	mov	r5, r1
 800de70:	f7f2 fe72 	bl	8000b58 <__aeabi_dcmpgt>
 800de74:	2800      	cmp	r0, #0
 800de76:	f040 80f9 	bne.w	800e06c <_dtoa_r+0x6bc>
 800de7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de7e:	4620      	mov	r0, r4
 800de80:	4629      	mov	r1, r5
 800de82:	f7f2 fe41 	bl	8000b08 <__aeabi_dcmpeq>
 800de86:	b118      	cbz	r0, 800de90 <_dtoa_r+0x4e0>
 800de88:	f018 0f01 	tst.w	r8, #1
 800de8c:	f040 80ee 	bne.w	800e06c <_dtoa_r+0x6bc>
 800de90:	4649      	mov	r1, r9
 800de92:	4658      	mov	r0, fp
 800de94:	f000 fbda 	bl	800e64c <_Bfree>
 800de98:	2300      	movs	r3, #0
 800de9a:	7033      	strb	r3, [r6, #0]
 800de9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800de9e:	3701      	adds	r7, #1
 800dea0:	601f      	str	r7, [r3, #0]
 800dea2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 831d 	beq.w	800e4e4 <_dtoa_r+0xb34>
 800deaa:	601e      	str	r6, [r3, #0]
 800deac:	e31a      	b.n	800e4e4 <_dtoa_r+0xb34>
 800deae:	07e2      	lsls	r2, r4, #31
 800deb0:	d505      	bpl.n	800debe <_dtoa_r+0x50e>
 800deb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800deb6:	f7f2 fbbf 	bl	8000638 <__aeabi_dmul>
 800deba:	3601      	adds	r6, #1
 800debc:	2301      	movs	r3, #1
 800debe:	1064      	asrs	r4, r4, #1
 800dec0:	3508      	adds	r5, #8
 800dec2:	e73f      	b.n	800dd44 <_dtoa_r+0x394>
 800dec4:	2602      	movs	r6, #2
 800dec6:	e742      	b.n	800dd4e <_dtoa_r+0x39e>
 800dec8:	9c07      	ldr	r4, [sp, #28]
 800deca:	9704      	str	r7, [sp, #16]
 800decc:	e761      	b.n	800dd92 <_dtoa_r+0x3e2>
 800dece:	4b27      	ldr	r3, [pc, #156]	@ (800df6c <_dtoa_r+0x5bc>)
 800ded0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ded2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ded6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800deda:	4454      	add	r4, sl
 800dedc:	2900      	cmp	r1, #0
 800dede:	d053      	beq.n	800df88 <_dtoa_r+0x5d8>
 800dee0:	4928      	ldr	r1, [pc, #160]	@ (800df84 <_dtoa_r+0x5d4>)
 800dee2:	2000      	movs	r0, #0
 800dee4:	f7f2 fcd2 	bl	800088c <__aeabi_ddiv>
 800dee8:	4633      	mov	r3, r6
 800deea:	462a      	mov	r2, r5
 800deec:	f7f2 f9ec 	bl	80002c8 <__aeabi_dsub>
 800def0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800def4:	4656      	mov	r6, sl
 800def6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800defa:	f7f2 fe4d 	bl	8000b98 <__aeabi_d2iz>
 800defe:	4605      	mov	r5, r0
 800df00:	f7f2 fb30 	bl	8000564 <__aeabi_i2d>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df0c:	f7f2 f9dc 	bl	80002c8 <__aeabi_dsub>
 800df10:	3530      	adds	r5, #48	@ 0x30
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df1a:	f806 5b01 	strb.w	r5, [r6], #1
 800df1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800df22:	f7f2 fdfb 	bl	8000b1c <__aeabi_dcmplt>
 800df26:	2800      	cmp	r0, #0
 800df28:	d171      	bne.n	800e00e <_dtoa_r+0x65e>
 800df2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df2e:	4911      	ldr	r1, [pc, #68]	@ (800df74 <_dtoa_r+0x5c4>)
 800df30:	2000      	movs	r0, #0
 800df32:	f7f2 f9c9 	bl	80002c8 <__aeabi_dsub>
 800df36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800df3a:	f7f2 fdef 	bl	8000b1c <__aeabi_dcmplt>
 800df3e:	2800      	cmp	r0, #0
 800df40:	f040 8095 	bne.w	800e06e <_dtoa_r+0x6be>
 800df44:	42a6      	cmp	r6, r4
 800df46:	f43f af50 	beq.w	800ddea <_dtoa_r+0x43a>
 800df4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800df4e:	4b0a      	ldr	r3, [pc, #40]	@ (800df78 <_dtoa_r+0x5c8>)
 800df50:	2200      	movs	r2, #0
 800df52:	f7f2 fb71 	bl	8000638 <__aeabi_dmul>
 800df56:	4b08      	ldr	r3, [pc, #32]	@ (800df78 <_dtoa_r+0x5c8>)
 800df58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800df5c:	2200      	movs	r2, #0
 800df5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df62:	f7f2 fb69 	bl	8000638 <__aeabi_dmul>
 800df66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df6a:	e7c4      	b.n	800def6 <_dtoa_r+0x546>
 800df6c:	08011fd8 	.word	0x08011fd8
 800df70:	08011fb0 	.word	0x08011fb0
 800df74:	3ff00000 	.word	0x3ff00000
 800df78:	40240000 	.word	0x40240000
 800df7c:	401c0000 	.word	0x401c0000
 800df80:	40140000 	.word	0x40140000
 800df84:	3fe00000 	.word	0x3fe00000
 800df88:	4631      	mov	r1, r6
 800df8a:	4628      	mov	r0, r5
 800df8c:	f7f2 fb54 	bl	8000638 <__aeabi_dmul>
 800df90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800df94:	9415      	str	r4, [sp, #84]	@ 0x54
 800df96:	4656      	mov	r6, sl
 800df98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df9c:	f7f2 fdfc 	bl	8000b98 <__aeabi_d2iz>
 800dfa0:	4605      	mov	r5, r0
 800dfa2:	f7f2 fadf 	bl	8000564 <__aeabi_i2d>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfae:	f7f2 f98b 	bl	80002c8 <__aeabi_dsub>
 800dfb2:	3530      	adds	r5, #48	@ 0x30
 800dfb4:	f806 5b01 	strb.w	r5, [r6], #1
 800dfb8:	4602      	mov	r2, r0
 800dfba:	460b      	mov	r3, r1
 800dfbc:	42a6      	cmp	r6, r4
 800dfbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dfc2:	f04f 0200 	mov.w	r2, #0
 800dfc6:	d124      	bne.n	800e012 <_dtoa_r+0x662>
 800dfc8:	4bac      	ldr	r3, [pc, #688]	@ (800e27c <_dtoa_r+0x8cc>)
 800dfca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dfce:	f7f2 f97d 	bl	80002cc <__adddf3>
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfda:	f7f2 fdbd 	bl	8000b58 <__aeabi_dcmpgt>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d145      	bne.n	800e06e <_dtoa_r+0x6be>
 800dfe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dfe6:	49a5      	ldr	r1, [pc, #660]	@ (800e27c <_dtoa_r+0x8cc>)
 800dfe8:	2000      	movs	r0, #0
 800dfea:	f7f2 f96d 	bl	80002c8 <__aeabi_dsub>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dff6:	f7f2 fd91 	bl	8000b1c <__aeabi_dcmplt>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	f43f aef5 	beq.w	800ddea <_dtoa_r+0x43a>
 800e000:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e002:	1e73      	subs	r3, r6, #1
 800e004:	9315      	str	r3, [sp, #84]	@ 0x54
 800e006:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e00a:	2b30      	cmp	r3, #48	@ 0x30
 800e00c:	d0f8      	beq.n	800e000 <_dtoa_r+0x650>
 800e00e:	9f04      	ldr	r7, [sp, #16]
 800e010:	e73e      	b.n	800de90 <_dtoa_r+0x4e0>
 800e012:	4b9b      	ldr	r3, [pc, #620]	@ (800e280 <_dtoa_r+0x8d0>)
 800e014:	f7f2 fb10 	bl	8000638 <__aeabi_dmul>
 800e018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e01c:	e7bc      	b.n	800df98 <_dtoa_r+0x5e8>
 800e01e:	d10c      	bne.n	800e03a <_dtoa_r+0x68a>
 800e020:	4b98      	ldr	r3, [pc, #608]	@ (800e284 <_dtoa_r+0x8d4>)
 800e022:	2200      	movs	r2, #0
 800e024:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e028:	f7f2 fb06 	bl	8000638 <__aeabi_dmul>
 800e02c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e030:	f7f2 fd88 	bl	8000b44 <__aeabi_dcmpge>
 800e034:	2800      	cmp	r0, #0
 800e036:	f000 8157 	beq.w	800e2e8 <_dtoa_r+0x938>
 800e03a:	2400      	movs	r4, #0
 800e03c:	4625      	mov	r5, r4
 800e03e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e040:	43db      	mvns	r3, r3
 800e042:	9304      	str	r3, [sp, #16]
 800e044:	4656      	mov	r6, sl
 800e046:	2700      	movs	r7, #0
 800e048:	4621      	mov	r1, r4
 800e04a:	4658      	mov	r0, fp
 800e04c:	f000 fafe 	bl	800e64c <_Bfree>
 800e050:	2d00      	cmp	r5, #0
 800e052:	d0dc      	beq.n	800e00e <_dtoa_r+0x65e>
 800e054:	b12f      	cbz	r7, 800e062 <_dtoa_r+0x6b2>
 800e056:	42af      	cmp	r7, r5
 800e058:	d003      	beq.n	800e062 <_dtoa_r+0x6b2>
 800e05a:	4639      	mov	r1, r7
 800e05c:	4658      	mov	r0, fp
 800e05e:	f000 faf5 	bl	800e64c <_Bfree>
 800e062:	4629      	mov	r1, r5
 800e064:	4658      	mov	r0, fp
 800e066:	f000 faf1 	bl	800e64c <_Bfree>
 800e06a:	e7d0      	b.n	800e00e <_dtoa_r+0x65e>
 800e06c:	9704      	str	r7, [sp, #16]
 800e06e:	4633      	mov	r3, r6
 800e070:	461e      	mov	r6, r3
 800e072:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e076:	2a39      	cmp	r2, #57	@ 0x39
 800e078:	d107      	bne.n	800e08a <_dtoa_r+0x6da>
 800e07a:	459a      	cmp	sl, r3
 800e07c:	d1f8      	bne.n	800e070 <_dtoa_r+0x6c0>
 800e07e:	9a04      	ldr	r2, [sp, #16]
 800e080:	3201      	adds	r2, #1
 800e082:	9204      	str	r2, [sp, #16]
 800e084:	2230      	movs	r2, #48	@ 0x30
 800e086:	f88a 2000 	strb.w	r2, [sl]
 800e08a:	781a      	ldrb	r2, [r3, #0]
 800e08c:	3201      	adds	r2, #1
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	e7bd      	b.n	800e00e <_dtoa_r+0x65e>
 800e092:	4b7b      	ldr	r3, [pc, #492]	@ (800e280 <_dtoa_r+0x8d0>)
 800e094:	2200      	movs	r2, #0
 800e096:	f7f2 facf 	bl	8000638 <__aeabi_dmul>
 800e09a:	2200      	movs	r2, #0
 800e09c:	2300      	movs	r3, #0
 800e09e:	4604      	mov	r4, r0
 800e0a0:	460d      	mov	r5, r1
 800e0a2:	f7f2 fd31 	bl	8000b08 <__aeabi_dcmpeq>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f43f aebb 	beq.w	800de22 <_dtoa_r+0x472>
 800e0ac:	e6f0      	b.n	800de90 <_dtoa_r+0x4e0>
 800e0ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e0b0:	2a00      	cmp	r2, #0
 800e0b2:	f000 80db 	beq.w	800e26c <_dtoa_r+0x8bc>
 800e0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0b8:	2a01      	cmp	r2, #1
 800e0ba:	f300 80bf 	bgt.w	800e23c <_dtoa_r+0x88c>
 800e0be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e0c0:	2a00      	cmp	r2, #0
 800e0c2:	f000 80b7 	beq.w	800e234 <_dtoa_r+0x884>
 800e0c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e0ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e0cc:	4646      	mov	r6, r8
 800e0ce:	9a08      	ldr	r2, [sp, #32]
 800e0d0:	2101      	movs	r1, #1
 800e0d2:	441a      	add	r2, r3
 800e0d4:	4658      	mov	r0, fp
 800e0d6:	4498      	add	r8, r3
 800e0d8:	9208      	str	r2, [sp, #32]
 800e0da:	f000 fbb5 	bl	800e848 <__i2b>
 800e0de:	4605      	mov	r5, r0
 800e0e0:	b15e      	cbz	r6, 800e0fa <_dtoa_r+0x74a>
 800e0e2:	9b08      	ldr	r3, [sp, #32]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	dd08      	ble.n	800e0fa <_dtoa_r+0x74a>
 800e0e8:	42b3      	cmp	r3, r6
 800e0ea:	9a08      	ldr	r2, [sp, #32]
 800e0ec:	bfa8      	it	ge
 800e0ee:	4633      	movge	r3, r6
 800e0f0:	eba8 0803 	sub.w	r8, r8, r3
 800e0f4:	1af6      	subs	r6, r6, r3
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	9308      	str	r3, [sp, #32]
 800e0fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0fc:	b1f3      	cbz	r3, 800e13c <_dtoa_r+0x78c>
 800e0fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e100:	2b00      	cmp	r3, #0
 800e102:	f000 80b7 	beq.w	800e274 <_dtoa_r+0x8c4>
 800e106:	b18c      	cbz	r4, 800e12c <_dtoa_r+0x77c>
 800e108:	4629      	mov	r1, r5
 800e10a:	4622      	mov	r2, r4
 800e10c:	4658      	mov	r0, fp
 800e10e:	f000 fc5b 	bl	800e9c8 <__pow5mult>
 800e112:	464a      	mov	r2, r9
 800e114:	4601      	mov	r1, r0
 800e116:	4605      	mov	r5, r0
 800e118:	4658      	mov	r0, fp
 800e11a:	f000 fbab 	bl	800e874 <__multiply>
 800e11e:	4649      	mov	r1, r9
 800e120:	9004      	str	r0, [sp, #16]
 800e122:	4658      	mov	r0, fp
 800e124:	f000 fa92 	bl	800e64c <_Bfree>
 800e128:	9b04      	ldr	r3, [sp, #16]
 800e12a:	4699      	mov	r9, r3
 800e12c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e12e:	1b1a      	subs	r2, r3, r4
 800e130:	d004      	beq.n	800e13c <_dtoa_r+0x78c>
 800e132:	4649      	mov	r1, r9
 800e134:	4658      	mov	r0, fp
 800e136:	f000 fc47 	bl	800e9c8 <__pow5mult>
 800e13a:	4681      	mov	r9, r0
 800e13c:	2101      	movs	r1, #1
 800e13e:	4658      	mov	r0, fp
 800e140:	f000 fb82 	bl	800e848 <__i2b>
 800e144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e146:	4604      	mov	r4, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f000 81cf 	beq.w	800e4ec <_dtoa_r+0xb3c>
 800e14e:	461a      	mov	r2, r3
 800e150:	4601      	mov	r1, r0
 800e152:	4658      	mov	r0, fp
 800e154:	f000 fc38 	bl	800e9c8 <__pow5mult>
 800e158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	4604      	mov	r4, r0
 800e15e:	f300 8095 	bgt.w	800e28c <_dtoa_r+0x8dc>
 800e162:	9b02      	ldr	r3, [sp, #8]
 800e164:	2b00      	cmp	r3, #0
 800e166:	f040 8087 	bne.w	800e278 <_dtoa_r+0x8c8>
 800e16a:	9b03      	ldr	r3, [sp, #12]
 800e16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e170:	2b00      	cmp	r3, #0
 800e172:	f040 8089 	bne.w	800e288 <_dtoa_r+0x8d8>
 800e176:	9b03      	ldr	r3, [sp, #12]
 800e178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e17c:	0d1b      	lsrs	r3, r3, #20
 800e17e:	051b      	lsls	r3, r3, #20
 800e180:	b12b      	cbz	r3, 800e18e <_dtoa_r+0x7de>
 800e182:	9b08      	ldr	r3, [sp, #32]
 800e184:	3301      	adds	r3, #1
 800e186:	9308      	str	r3, [sp, #32]
 800e188:	f108 0801 	add.w	r8, r8, #1
 800e18c:	2301      	movs	r3, #1
 800e18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e192:	2b00      	cmp	r3, #0
 800e194:	f000 81b0 	beq.w	800e4f8 <_dtoa_r+0xb48>
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e19e:	6918      	ldr	r0, [r3, #16]
 800e1a0:	f000 fb06 	bl	800e7b0 <__hi0bits>
 800e1a4:	f1c0 0020 	rsb	r0, r0, #32
 800e1a8:	9b08      	ldr	r3, [sp, #32]
 800e1aa:	4418      	add	r0, r3
 800e1ac:	f010 001f 	ands.w	r0, r0, #31
 800e1b0:	d077      	beq.n	800e2a2 <_dtoa_r+0x8f2>
 800e1b2:	f1c0 0320 	rsb	r3, r0, #32
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	dd6b      	ble.n	800e292 <_dtoa_r+0x8e2>
 800e1ba:	9b08      	ldr	r3, [sp, #32]
 800e1bc:	f1c0 001c 	rsb	r0, r0, #28
 800e1c0:	4403      	add	r3, r0
 800e1c2:	4480      	add	r8, r0
 800e1c4:	4406      	add	r6, r0
 800e1c6:	9308      	str	r3, [sp, #32]
 800e1c8:	f1b8 0f00 	cmp.w	r8, #0
 800e1cc:	dd05      	ble.n	800e1da <_dtoa_r+0x82a>
 800e1ce:	4649      	mov	r1, r9
 800e1d0:	4642      	mov	r2, r8
 800e1d2:	4658      	mov	r0, fp
 800e1d4:	f000 fc52 	bl	800ea7c <__lshift>
 800e1d8:	4681      	mov	r9, r0
 800e1da:	9b08      	ldr	r3, [sp, #32]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dd05      	ble.n	800e1ec <_dtoa_r+0x83c>
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	4658      	mov	r0, fp
 800e1e6:	f000 fc49 	bl	800ea7c <__lshift>
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d059      	beq.n	800e2a6 <_dtoa_r+0x8f6>
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	4648      	mov	r0, r9
 800e1f6:	f000 fcad 	bl	800eb54 <__mcmp>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	da53      	bge.n	800e2a6 <_dtoa_r+0x8f6>
 800e1fe:	1e7b      	subs	r3, r7, #1
 800e200:	9304      	str	r3, [sp, #16]
 800e202:	4649      	mov	r1, r9
 800e204:	2300      	movs	r3, #0
 800e206:	220a      	movs	r2, #10
 800e208:	4658      	mov	r0, fp
 800e20a:	f000 fa41 	bl	800e690 <__multadd>
 800e20e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e210:	4681      	mov	r9, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 8172 	beq.w	800e4fc <_dtoa_r+0xb4c>
 800e218:	2300      	movs	r3, #0
 800e21a:	4629      	mov	r1, r5
 800e21c:	220a      	movs	r2, #10
 800e21e:	4658      	mov	r0, fp
 800e220:	f000 fa36 	bl	800e690 <__multadd>
 800e224:	9b00      	ldr	r3, [sp, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	4605      	mov	r5, r0
 800e22a:	dc67      	bgt.n	800e2fc <_dtoa_r+0x94c>
 800e22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e22e:	2b02      	cmp	r3, #2
 800e230:	dc41      	bgt.n	800e2b6 <_dtoa_r+0x906>
 800e232:	e063      	b.n	800e2fc <_dtoa_r+0x94c>
 800e234:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e236:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e23a:	e746      	b.n	800e0ca <_dtoa_r+0x71a>
 800e23c:	9b07      	ldr	r3, [sp, #28]
 800e23e:	1e5c      	subs	r4, r3, #1
 800e240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e242:	42a3      	cmp	r3, r4
 800e244:	bfbf      	itttt	lt
 800e246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e248:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e24a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e24c:	1ae3      	sublt	r3, r4, r3
 800e24e:	bfb4      	ite	lt
 800e250:	18d2      	addlt	r2, r2, r3
 800e252:	1b1c      	subge	r4, r3, r4
 800e254:	9b07      	ldr	r3, [sp, #28]
 800e256:	bfbc      	itt	lt
 800e258:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e25a:	2400      	movlt	r4, #0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	bfb5      	itete	lt
 800e260:	eba8 0603 	sublt.w	r6, r8, r3
 800e264:	9b07      	ldrge	r3, [sp, #28]
 800e266:	2300      	movlt	r3, #0
 800e268:	4646      	movge	r6, r8
 800e26a:	e730      	b.n	800e0ce <_dtoa_r+0x71e>
 800e26c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e26e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e270:	4646      	mov	r6, r8
 800e272:	e735      	b.n	800e0e0 <_dtoa_r+0x730>
 800e274:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e276:	e75c      	b.n	800e132 <_dtoa_r+0x782>
 800e278:	2300      	movs	r3, #0
 800e27a:	e788      	b.n	800e18e <_dtoa_r+0x7de>
 800e27c:	3fe00000 	.word	0x3fe00000
 800e280:	40240000 	.word	0x40240000
 800e284:	40140000 	.word	0x40140000
 800e288:	9b02      	ldr	r3, [sp, #8]
 800e28a:	e780      	b.n	800e18e <_dtoa_r+0x7de>
 800e28c:	2300      	movs	r3, #0
 800e28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e290:	e782      	b.n	800e198 <_dtoa_r+0x7e8>
 800e292:	d099      	beq.n	800e1c8 <_dtoa_r+0x818>
 800e294:	9a08      	ldr	r2, [sp, #32]
 800e296:	331c      	adds	r3, #28
 800e298:	441a      	add	r2, r3
 800e29a:	4498      	add	r8, r3
 800e29c:	441e      	add	r6, r3
 800e29e:	9208      	str	r2, [sp, #32]
 800e2a0:	e792      	b.n	800e1c8 <_dtoa_r+0x818>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	e7f6      	b.n	800e294 <_dtoa_r+0x8e4>
 800e2a6:	9b07      	ldr	r3, [sp, #28]
 800e2a8:	9704      	str	r7, [sp, #16]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	dc20      	bgt.n	800e2f0 <_dtoa_r+0x940>
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	dd1e      	ble.n	800e2f4 <_dtoa_r+0x944>
 800e2b6:	9b00      	ldr	r3, [sp, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f47f aec0 	bne.w	800e03e <_dtoa_r+0x68e>
 800e2be:	4621      	mov	r1, r4
 800e2c0:	2205      	movs	r2, #5
 800e2c2:	4658      	mov	r0, fp
 800e2c4:	f000 f9e4 	bl	800e690 <__multadd>
 800e2c8:	4601      	mov	r1, r0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4648      	mov	r0, r9
 800e2ce:	f000 fc41 	bl	800eb54 <__mcmp>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	f77f aeb3 	ble.w	800e03e <_dtoa_r+0x68e>
 800e2d8:	4656      	mov	r6, sl
 800e2da:	2331      	movs	r3, #49	@ 0x31
 800e2dc:	f806 3b01 	strb.w	r3, [r6], #1
 800e2e0:	9b04      	ldr	r3, [sp, #16]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	9304      	str	r3, [sp, #16]
 800e2e6:	e6ae      	b.n	800e046 <_dtoa_r+0x696>
 800e2e8:	9c07      	ldr	r4, [sp, #28]
 800e2ea:	9704      	str	r7, [sp, #16]
 800e2ec:	4625      	mov	r5, r4
 800e2ee:	e7f3      	b.n	800e2d8 <_dtoa_r+0x928>
 800e2f0:	9b07      	ldr	r3, [sp, #28]
 800e2f2:	9300      	str	r3, [sp, #0]
 800e2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f000 8104 	beq.w	800e504 <_dtoa_r+0xb54>
 800e2fc:	2e00      	cmp	r6, #0
 800e2fe:	dd05      	ble.n	800e30c <_dtoa_r+0x95c>
 800e300:	4629      	mov	r1, r5
 800e302:	4632      	mov	r2, r6
 800e304:	4658      	mov	r0, fp
 800e306:	f000 fbb9 	bl	800ea7c <__lshift>
 800e30a:	4605      	mov	r5, r0
 800e30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d05a      	beq.n	800e3c8 <_dtoa_r+0xa18>
 800e312:	6869      	ldr	r1, [r5, #4]
 800e314:	4658      	mov	r0, fp
 800e316:	f000 f959 	bl	800e5cc <_Balloc>
 800e31a:	4606      	mov	r6, r0
 800e31c:	b928      	cbnz	r0, 800e32a <_dtoa_r+0x97a>
 800e31e:	4b84      	ldr	r3, [pc, #528]	@ (800e530 <_dtoa_r+0xb80>)
 800e320:	4602      	mov	r2, r0
 800e322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e326:	f7ff bb5a 	b.w	800d9de <_dtoa_r+0x2e>
 800e32a:	692a      	ldr	r2, [r5, #16]
 800e32c:	3202      	adds	r2, #2
 800e32e:	0092      	lsls	r2, r2, #2
 800e330:	f105 010c 	add.w	r1, r5, #12
 800e334:	300c      	adds	r0, #12
 800e336:	f002 f877 	bl	8010428 <memcpy>
 800e33a:	2201      	movs	r2, #1
 800e33c:	4631      	mov	r1, r6
 800e33e:	4658      	mov	r0, fp
 800e340:	f000 fb9c 	bl	800ea7c <__lshift>
 800e344:	f10a 0301 	add.w	r3, sl, #1
 800e348:	9307      	str	r3, [sp, #28]
 800e34a:	9b00      	ldr	r3, [sp, #0]
 800e34c:	4453      	add	r3, sl
 800e34e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e350:	9b02      	ldr	r3, [sp, #8]
 800e352:	f003 0301 	and.w	r3, r3, #1
 800e356:	462f      	mov	r7, r5
 800e358:	930a      	str	r3, [sp, #40]	@ 0x28
 800e35a:	4605      	mov	r5, r0
 800e35c:	9b07      	ldr	r3, [sp, #28]
 800e35e:	4621      	mov	r1, r4
 800e360:	3b01      	subs	r3, #1
 800e362:	4648      	mov	r0, r9
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	f7ff fa9b 	bl	800d8a0 <quorem>
 800e36a:	4639      	mov	r1, r7
 800e36c:	9002      	str	r0, [sp, #8]
 800e36e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e372:	4648      	mov	r0, r9
 800e374:	f000 fbee 	bl	800eb54 <__mcmp>
 800e378:	462a      	mov	r2, r5
 800e37a:	9008      	str	r0, [sp, #32]
 800e37c:	4621      	mov	r1, r4
 800e37e:	4658      	mov	r0, fp
 800e380:	f000 fc04 	bl	800eb8c <__mdiff>
 800e384:	68c2      	ldr	r2, [r0, #12]
 800e386:	4606      	mov	r6, r0
 800e388:	bb02      	cbnz	r2, 800e3cc <_dtoa_r+0xa1c>
 800e38a:	4601      	mov	r1, r0
 800e38c:	4648      	mov	r0, r9
 800e38e:	f000 fbe1 	bl	800eb54 <__mcmp>
 800e392:	4602      	mov	r2, r0
 800e394:	4631      	mov	r1, r6
 800e396:	4658      	mov	r0, fp
 800e398:	920e      	str	r2, [sp, #56]	@ 0x38
 800e39a:	f000 f957 	bl	800e64c <_Bfree>
 800e39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3a2:	9e07      	ldr	r6, [sp, #28]
 800e3a4:	ea43 0102 	orr.w	r1, r3, r2
 800e3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3aa:	4319      	orrs	r1, r3
 800e3ac:	d110      	bne.n	800e3d0 <_dtoa_r+0xa20>
 800e3ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e3b2:	d029      	beq.n	800e408 <_dtoa_r+0xa58>
 800e3b4:	9b08      	ldr	r3, [sp, #32]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	dd02      	ble.n	800e3c0 <_dtoa_r+0xa10>
 800e3ba:	9b02      	ldr	r3, [sp, #8]
 800e3bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e3c0:	9b00      	ldr	r3, [sp, #0]
 800e3c2:	f883 8000 	strb.w	r8, [r3]
 800e3c6:	e63f      	b.n	800e048 <_dtoa_r+0x698>
 800e3c8:	4628      	mov	r0, r5
 800e3ca:	e7bb      	b.n	800e344 <_dtoa_r+0x994>
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	e7e1      	b.n	800e394 <_dtoa_r+0x9e4>
 800e3d0:	9b08      	ldr	r3, [sp, #32]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	db04      	blt.n	800e3e0 <_dtoa_r+0xa30>
 800e3d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3d8:	430b      	orrs	r3, r1
 800e3da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e3dc:	430b      	orrs	r3, r1
 800e3de:	d120      	bne.n	800e422 <_dtoa_r+0xa72>
 800e3e0:	2a00      	cmp	r2, #0
 800e3e2:	dded      	ble.n	800e3c0 <_dtoa_r+0xa10>
 800e3e4:	4649      	mov	r1, r9
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	4658      	mov	r0, fp
 800e3ea:	f000 fb47 	bl	800ea7c <__lshift>
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4681      	mov	r9, r0
 800e3f2:	f000 fbaf 	bl	800eb54 <__mcmp>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	dc03      	bgt.n	800e402 <_dtoa_r+0xa52>
 800e3fa:	d1e1      	bne.n	800e3c0 <_dtoa_r+0xa10>
 800e3fc:	f018 0f01 	tst.w	r8, #1
 800e400:	d0de      	beq.n	800e3c0 <_dtoa_r+0xa10>
 800e402:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e406:	d1d8      	bne.n	800e3ba <_dtoa_r+0xa0a>
 800e408:	9a00      	ldr	r2, [sp, #0]
 800e40a:	2339      	movs	r3, #57	@ 0x39
 800e40c:	7013      	strb	r3, [r2, #0]
 800e40e:	4633      	mov	r3, r6
 800e410:	461e      	mov	r6, r3
 800e412:	3b01      	subs	r3, #1
 800e414:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e418:	2a39      	cmp	r2, #57	@ 0x39
 800e41a:	d052      	beq.n	800e4c2 <_dtoa_r+0xb12>
 800e41c:	3201      	adds	r2, #1
 800e41e:	701a      	strb	r2, [r3, #0]
 800e420:	e612      	b.n	800e048 <_dtoa_r+0x698>
 800e422:	2a00      	cmp	r2, #0
 800e424:	dd07      	ble.n	800e436 <_dtoa_r+0xa86>
 800e426:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e42a:	d0ed      	beq.n	800e408 <_dtoa_r+0xa58>
 800e42c:	9a00      	ldr	r2, [sp, #0]
 800e42e:	f108 0301 	add.w	r3, r8, #1
 800e432:	7013      	strb	r3, [r2, #0]
 800e434:	e608      	b.n	800e048 <_dtoa_r+0x698>
 800e436:	9b07      	ldr	r3, [sp, #28]
 800e438:	9a07      	ldr	r2, [sp, #28]
 800e43a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e440:	4293      	cmp	r3, r2
 800e442:	d028      	beq.n	800e496 <_dtoa_r+0xae6>
 800e444:	4649      	mov	r1, r9
 800e446:	2300      	movs	r3, #0
 800e448:	220a      	movs	r2, #10
 800e44a:	4658      	mov	r0, fp
 800e44c:	f000 f920 	bl	800e690 <__multadd>
 800e450:	42af      	cmp	r7, r5
 800e452:	4681      	mov	r9, r0
 800e454:	f04f 0300 	mov.w	r3, #0
 800e458:	f04f 020a 	mov.w	r2, #10
 800e45c:	4639      	mov	r1, r7
 800e45e:	4658      	mov	r0, fp
 800e460:	d107      	bne.n	800e472 <_dtoa_r+0xac2>
 800e462:	f000 f915 	bl	800e690 <__multadd>
 800e466:	4607      	mov	r7, r0
 800e468:	4605      	mov	r5, r0
 800e46a:	9b07      	ldr	r3, [sp, #28]
 800e46c:	3301      	adds	r3, #1
 800e46e:	9307      	str	r3, [sp, #28]
 800e470:	e774      	b.n	800e35c <_dtoa_r+0x9ac>
 800e472:	f000 f90d 	bl	800e690 <__multadd>
 800e476:	4629      	mov	r1, r5
 800e478:	4607      	mov	r7, r0
 800e47a:	2300      	movs	r3, #0
 800e47c:	220a      	movs	r2, #10
 800e47e:	4658      	mov	r0, fp
 800e480:	f000 f906 	bl	800e690 <__multadd>
 800e484:	4605      	mov	r5, r0
 800e486:	e7f0      	b.n	800e46a <_dtoa_r+0xaba>
 800e488:	9b00      	ldr	r3, [sp, #0]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	bfcc      	ite	gt
 800e48e:	461e      	movgt	r6, r3
 800e490:	2601      	movle	r6, #1
 800e492:	4456      	add	r6, sl
 800e494:	2700      	movs	r7, #0
 800e496:	4649      	mov	r1, r9
 800e498:	2201      	movs	r2, #1
 800e49a:	4658      	mov	r0, fp
 800e49c:	f000 faee 	bl	800ea7c <__lshift>
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	4681      	mov	r9, r0
 800e4a4:	f000 fb56 	bl	800eb54 <__mcmp>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	dcb0      	bgt.n	800e40e <_dtoa_r+0xa5e>
 800e4ac:	d102      	bne.n	800e4b4 <_dtoa_r+0xb04>
 800e4ae:	f018 0f01 	tst.w	r8, #1
 800e4b2:	d1ac      	bne.n	800e40e <_dtoa_r+0xa5e>
 800e4b4:	4633      	mov	r3, r6
 800e4b6:	461e      	mov	r6, r3
 800e4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e4bc:	2a30      	cmp	r2, #48	@ 0x30
 800e4be:	d0fa      	beq.n	800e4b6 <_dtoa_r+0xb06>
 800e4c0:	e5c2      	b.n	800e048 <_dtoa_r+0x698>
 800e4c2:	459a      	cmp	sl, r3
 800e4c4:	d1a4      	bne.n	800e410 <_dtoa_r+0xa60>
 800e4c6:	9b04      	ldr	r3, [sp, #16]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	9304      	str	r3, [sp, #16]
 800e4cc:	2331      	movs	r3, #49	@ 0x31
 800e4ce:	f88a 3000 	strb.w	r3, [sl]
 800e4d2:	e5b9      	b.n	800e048 <_dtoa_r+0x698>
 800e4d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e534 <_dtoa_r+0xb84>
 800e4da:	b11b      	cbz	r3, 800e4e4 <_dtoa_r+0xb34>
 800e4dc:	f10a 0308 	add.w	r3, sl, #8
 800e4e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e4e2:	6013      	str	r3, [r2, #0]
 800e4e4:	4650      	mov	r0, sl
 800e4e6:	b019      	add	sp, #100	@ 0x64
 800e4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	f77f ae37 	ble.w	800e162 <_dtoa_r+0x7b2>
 800e4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	e655      	b.n	800e1a8 <_dtoa_r+0x7f8>
 800e4fc:	9b00      	ldr	r3, [sp, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f77f aed6 	ble.w	800e2b0 <_dtoa_r+0x900>
 800e504:	4656      	mov	r6, sl
 800e506:	4621      	mov	r1, r4
 800e508:	4648      	mov	r0, r9
 800e50a:	f7ff f9c9 	bl	800d8a0 <quorem>
 800e50e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e512:	f806 8b01 	strb.w	r8, [r6], #1
 800e516:	9b00      	ldr	r3, [sp, #0]
 800e518:	eba6 020a 	sub.w	r2, r6, sl
 800e51c:	4293      	cmp	r3, r2
 800e51e:	ddb3      	ble.n	800e488 <_dtoa_r+0xad8>
 800e520:	4649      	mov	r1, r9
 800e522:	2300      	movs	r3, #0
 800e524:	220a      	movs	r2, #10
 800e526:	4658      	mov	r0, fp
 800e528:	f000 f8b2 	bl	800e690 <__multadd>
 800e52c:	4681      	mov	r9, r0
 800e52e:	e7ea      	b.n	800e506 <_dtoa_r+0xb56>
 800e530:	08011f39 	.word	0x08011f39
 800e534:	08011ebd 	.word	0x08011ebd

0800e538 <_free_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4605      	mov	r5, r0
 800e53c:	2900      	cmp	r1, #0
 800e53e:	d041      	beq.n	800e5c4 <_free_r+0x8c>
 800e540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e544:	1f0c      	subs	r4, r1, #4
 800e546:	2b00      	cmp	r3, #0
 800e548:	bfb8      	it	lt
 800e54a:	18e4      	addlt	r4, r4, r3
 800e54c:	f7fe f83c 	bl	800c5c8 <__malloc_lock>
 800e550:	4a1d      	ldr	r2, [pc, #116]	@ (800e5c8 <_free_r+0x90>)
 800e552:	6813      	ldr	r3, [r2, #0]
 800e554:	b933      	cbnz	r3, 800e564 <_free_r+0x2c>
 800e556:	6063      	str	r3, [r4, #4]
 800e558:	6014      	str	r4, [r2, #0]
 800e55a:	4628      	mov	r0, r5
 800e55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e560:	f7fe b838 	b.w	800c5d4 <__malloc_unlock>
 800e564:	42a3      	cmp	r3, r4
 800e566:	d908      	bls.n	800e57a <_free_r+0x42>
 800e568:	6820      	ldr	r0, [r4, #0]
 800e56a:	1821      	adds	r1, r4, r0
 800e56c:	428b      	cmp	r3, r1
 800e56e:	bf01      	itttt	eq
 800e570:	6819      	ldreq	r1, [r3, #0]
 800e572:	685b      	ldreq	r3, [r3, #4]
 800e574:	1809      	addeq	r1, r1, r0
 800e576:	6021      	streq	r1, [r4, #0]
 800e578:	e7ed      	b.n	800e556 <_free_r+0x1e>
 800e57a:	461a      	mov	r2, r3
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	b10b      	cbz	r3, 800e584 <_free_r+0x4c>
 800e580:	42a3      	cmp	r3, r4
 800e582:	d9fa      	bls.n	800e57a <_free_r+0x42>
 800e584:	6811      	ldr	r1, [r2, #0]
 800e586:	1850      	adds	r0, r2, r1
 800e588:	42a0      	cmp	r0, r4
 800e58a:	d10b      	bne.n	800e5a4 <_free_r+0x6c>
 800e58c:	6820      	ldr	r0, [r4, #0]
 800e58e:	4401      	add	r1, r0
 800e590:	1850      	adds	r0, r2, r1
 800e592:	4283      	cmp	r3, r0
 800e594:	6011      	str	r1, [r2, #0]
 800e596:	d1e0      	bne.n	800e55a <_free_r+0x22>
 800e598:	6818      	ldr	r0, [r3, #0]
 800e59a:	685b      	ldr	r3, [r3, #4]
 800e59c:	6053      	str	r3, [r2, #4]
 800e59e:	4408      	add	r0, r1
 800e5a0:	6010      	str	r0, [r2, #0]
 800e5a2:	e7da      	b.n	800e55a <_free_r+0x22>
 800e5a4:	d902      	bls.n	800e5ac <_free_r+0x74>
 800e5a6:	230c      	movs	r3, #12
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	e7d6      	b.n	800e55a <_free_r+0x22>
 800e5ac:	6820      	ldr	r0, [r4, #0]
 800e5ae:	1821      	adds	r1, r4, r0
 800e5b0:	428b      	cmp	r3, r1
 800e5b2:	bf04      	itt	eq
 800e5b4:	6819      	ldreq	r1, [r3, #0]
 800e5b6:	685b      	ldreq	r3, [r3, #4]
 800e5b8:	6063      	str	r3, [r4, #4]
 800e5ba:	bf04      	itt	eq
 800e5bc:	1809      	addeq	r1, r1, r0
 800e5be:	6021      	streq	r1, [r4, #0]
 800e5c0:	6054      	str	r4, [r2, #4]
 800e5c2:	e7ca      	b.n	800e55a <_free_r+0x22>
 800e5c4:	bd38      	pop	{r3, r4, r5, pc}
 800e5c6:	bf00      	nop
 800e5c8:	200031a0 	.word	0x200031a0

0800e5cc <_Balloc>:
 800e5cc:	b570      	push	{r4, r5, r6, lr}
 800e5ce:	69c6      	ldr	r6, [r0, #28]
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	460d      	mov	r5, r1
 800e5d4:	b976      	cbnz	r6, 800e5f4 <_Balloc+0x28>
 800e5d6:	2010      	movs	r0, #16
 800e5d8:	f7fd ff4c 	bl	800c474 <malloc>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	61e0      	str	r0, [r4, #28]
 800e5e0:	b920      	cbnz	r0, 800e5ec <_Balloc+0x20>
 800e5e2:	4b18      	ldr	r3, [pc, #96]	@ (800e644 <_Balloc+0x78>)
 800e5e4:	4818      	ldr	r0, [pc, #96]	@ (800e648 <_Balloc+0x7c>)
 800e5e6:	216b      	movs	r1, #107	@ 0x6b
 800e5e8:	f001 ff36 	bl	8010458 <__assert_func>
 800e5ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5f0:	6006      	str	r6, [r0, #0]
 800e5f2:	60c6      	str	r6, [r0, #12]
 800e5f4:	69e6      	ldr	r6, [r4, #28]
 800e5f6:	68f3      	ldr	r3, [r6, #12]
 800e5f8:	b183      	cbz	r3, 800e61c <_Balloc+0x50>
 800e5fa:	69e3      	ldr	r3, [r4, #28]
 800e5fc:	68db      	ldr	r3, [r3, #12]
 800e5fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e602:	b9b8      	cbnz	r0, 800e634 <_Balloc+0x68>
 800e604:	2101      	movs	r1, #1
 800e606:	fa01 f605 	lsl.w	r6, r1, r5
 800e60a:	1d72      	adds	r2, r6, #5
 800e60c:	0092      	lsls	r2, r2, #2
 800e60e:	4620      	mov	r0, r4
 800e610:	f001 ff40 	bl	8010494 <_calloc_r>
 800e614:	b160      	cbz	r0, 800e630 <_Balloc+0x64>
 800e616:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e61a:	e00e      	b.n	800e63a <_Balloc+0x6e>
 800e61c:	2221      	movs	r2, #33	@ 0x21
 800e61e:	2104      	movs	r1, #4
 800e620:	4620      	mov	r0, r4
 800e622:	f001 ff37 	bl	8010494 <_calloc_r>
 800e626:	69e3      	ldr	r3, [r4, #28]
 800e628:	60f0      	str	r0, [r6, #12]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d1e4      	bne.n	800e5fa <_Balloc+0x2e>
 800e630:	2000      	movs	r0, #0
 800e632:	bd70      	pop	{r4, r5, r6, pc}
 800e634:	6802      	ldr	r2, [r0, #0]
 800e636:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e63a:	2300      	movs	r3, #0
 800e63c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e640:	e7f7      	b.n	800e632 <_Balloc+0x66>
 800e642:	bf00      	nop
 800e644:	08011eca 	.word	0x08011eca
 800e648:	08011f4a 	.word	0x08011f4a

0800e64c <_Bfree>:
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	69c6      	ldr	r6, [r0, #28]
 800e650:	4605      	mov	r5, r0
 800e652:	460c      	mov	r4, r1
 800e654:	b976      	cbnz	r6, 800e674 <_Bfree+0x28>
 800e656:	2010      	movs	r0, #16
 800e658:	f7fd ff0c 	bl	800c474 <malloc>
 800e65c:	4602      	mov	r2, r0
 800e65e:	61e8      	str	r0, [r5, #28]
 800e660:	b920      	cbnz	r0, 800e66c <_Bfree+0x20>
 800e662:	4b09      	ldr	r3, [pc, #36]	@ (800e688 <_Bfree+0x3c>)
 800e664:	4809      	ldr	r0, [pc, #36]	@ (800e68c <_Bfree+0x40>)
 800e666:	218f      	movs	r1, #143	@ 0x8f
 800e668:	f001 fef6 	bl	8010458 <__assert_func>
 800e66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e670:	6006      	str	r6, [r0, #0]
 800e672:	60c6      	str	r6, [r0, #12]
 800e674:	b13c      	cbz	r4, 800e686 <_Bfree+0x3a>
 800e676:	69eb      	ldr	r3, [r5, #28]
 800e678:	6862      	ldr	r2, [r4, #4]
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e680:	6021      	str	r1, [r4, #0]
 800e682:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e686:	bd70      	pop	{r4, r5, r6, pc}
 800e688:	08011eca 	.word	0x08011eca
 800e68c:	08011f4a 	.word	0x08011f4a

0800e690 <__multadd>:
 800e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e694:	690d      	ldr	r5, [r1, #16]
 800e696:	4607      	mov	r7, r0
 800e698:	460c      	mov	r4, r1
 800e69a:	461e      	mov	r6, r3
 800e69c:	f101 0c14 	add.w	ip, r1, #20
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	f8dc 3000 	ldr.w	r3, [ip]
 800e6a6:	b299      	uxth	r1, r3
 800e6a8:	fb02 6101 	mla	r1, r2, r1, r6
 800e6ac:	0c1e      	lsrs	r6, r3, #16
 800e6ae:	0c0b      	lsrs	r3, r1, #16
 800e6b0:	fb02 3306 	mla	r3, r2, r6, r3
 800e6b4:	b289      	uxth	r1, r1
 800e6b6:	3001      	adds	r0, #1
 800e6b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e6bc:	4285      	cmp	r5, r0
 800e6be:	f84c 1b04 	str.w	r1, [ip], #4
 800e6c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e6c6:	dcec      	bgt.n	800e6a2 <__multadd+0x12>
 800e6c8:	b30e      	cbz	r6, 800e70e <__multadd+0x7e>
 800e6ca:	68a3      	ldr	r3, [r4, #8]
 800e6cc:	42ab      	cmp	r3, r5
 800e6ce:	dc19      	bgt.n	800e704 <__multadd+0x74>
 800e6d0:	6861      	ldr	r1, [r4, #4]
 800e6d2:	4638      	mov	r0, r7
 800e6d4:	3101      	adds	r1, #1
 800e6d6:	f7ff ff79 	bl	800e5cc <_Balloc>
 800e6da:	4680      	mov	r8, r0
 800e6dc:	b928      	cbnz	r0, 800e6ea <__multadd+0x5a>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	4b0c      	ldr	r3, [pc, #48]	@ (800e714 <__multadd+0x84>)
 800e6e2:	480d      	ldr	r0, [pc, #52]	@ (800e718 <__multadd+0x88>)
 800e6e4:	21ba      	movs	r1, #186	@ 0xba
 800e6e6:	f001 feb7 	bl	8010458 <__assert_func>
 800e6ea:	6922      	ldr	r2, [r4, #16]
 800e6ec:	3202      	adds	r2, #2
 800e6ee:	f104 010c 	add.w	r1, r4, #12
 800e6f2:	0092      	lsls	r2, r2, #2
 800e6f4:	300c      	adds	r0, #12
 800e6f6:	f001 fe97 	bl	8010428 <memcpy>
 800e6fa:	4621      	mov	r1, r4
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	f7ff ffa5 	bl	800e64c <_Bfree>
 800e702:	4644      	mov	r4, r8
 800e704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e708:	3501      	adds	r5, #1
 800e70a:	615e      	str	r6, [r3, #20]
 800e70c:	6125      	str	r5, [r4, #16]
 800e70e:	4620      	mov	r0, r4
 800e710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e714:	08011f39 	.word	0x08011f39
 800e718:	08011f4a 	.word	0x08011f4a

0800e71c <__s2b>:
 800e71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e720:	460c      	mov	r4, r1
 800e722:	4615      	mov	r5, r2
 800e724:	461f      	mov	r7, r3
 800e726:	2209      	movs	r2, #9
 800e728:	3308      	adds	r3, #8
 800e72a:	4606      	mov	r6, r0
 800e72c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e730:	2100      	movs	r1, #0
 800e732:	2201      	movs	r2, #1
 800e734:	429a      	cmp	r2, r3
 800e736:	db09      	blt.n	800e74c <__s2b+0x30>
 800e738:	4630      	mov	r0, r6
 800e73a:	f7ff ff47 	bl	800e5cc <_Balloc>
 800e73e:	b940      	cbnz	r0, 800e752 <__s2b+0x36>
 800e740:	4602      	mov	r2, r0
 800e742:	4b19      	ldr	r3, [pc, #100]	@ (800e7a8 <__s2b+0x8c>)
 800e744:	4819      	ldr	r0, [pc, #100]	@ (800e7ac <__s2b+0x90>)
 800e746:	21d3      	movs	r1, #211	@ 0xd3
 800e748:	f001 fe86 	bl	8010458 <__assert_func>
 800e74c:	0052      	lsls	r2, r2, #1
 800e74e:	3101      	adds	r1, #1
 800e750:	e7f0      	b.n	800e734 <__s2b+0x18>
 800e752:	9b08      	ldr	r3, [sp, #32]
 800e754:	6143      	str	r3, [r0, #20]
 800e756:	2d09      	cmp	r5, #9
 800e758:	f04f 0301 	mov.w	r3, #1
 800e75c:	6103      	str	r3, [r0, #16]
 800e75e:	dd16      	ble.n	800e78e <__s2b+0x72>
 800e760:	f104 0909 	add.w	r9, r4, #9
 800e764:	46c8      	mov	r8, r9
 800e766:	442c      	add	r4, r5
 800e768:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e76c:	4601      	mov	r1, r0
 800e76e:	3b30      	subs	r3, #48	@ 0x30
 800e770:	220a      	movs	r2, #10
 800e772:	4630      	mov	r0, r6
 800e774:	f7ff ff8c 	bl	800e690 <__multadd>
 800e778:	45a0      	cmp	r8, r4
 800e77a:	d1f5      	bne.n	800e768 <__s2b+0x4c>
 800e77c:	f1a5 0408 	sub.w	r4, r5, #8
 800e780:	444c      	add	r4, r9
 800e782:	1b2d      	subs	r5, r5, r4
 800e784:	1963      	adds	r3, r4, r5
 800e786:	42bb      	cmp	r3, r7
 800e788:	db04      	blt.n	800e794 <__s2b+0x78>
 800e78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e78e:	340a      	adds	r4, #10
 800e790:	2509      	movs	r5, #9
 800e792:	e7f6      	b.n	800e782 <__s2b+0x66>
 800e794:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e798:	4601      	mov	r1, r0
 800e79a:	3b30      	subs	r3, #48	@ 0x30
 800e79c:	220a      	movs	r2, #10
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f7ff ff76 	bl	800e690 <__multadd>
 800e7a4:	e7ee      	b.n	800e784 <__s2b+0x68>
 800e7a6:	bf00      	nop
 800e7a8:	08011f39 	.word	0x08011f39
 800e7ac:	08011f4a 	.word	0x08011f4a

0800e7b0 <__hi0bits>:
 800e7b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	bf36      	itet	cc
 800e7b8:	0403      	lslcc	r3, r0, #16
 800e7ba:	2000      	movcs	r0, #0
 800e7bc:	2010      	movcc	r0, #16
 800e7be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e7c2:	bf3c      	itt	cc
 800e7c4:	021b      	lslcc	r3, r3, #8
 800e7c6:	3008      	addcc	r0, #8
 800e7c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7cc:	bf3c      	itt	cc
 800e7ce:	011b      	lslcc	r3, r3, #4
 800e7d0:	3004      	addcc	r0, #4
 800e7d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7d6:	bf3c      	itt	cc
 800e7d8:	009b      	lslcc	r3, r3, #2
 800e7da:	3002      	addcc	r0, #2
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	db05      	blt.n	800e7ec <__hi0bits+0x3c>
 800e7e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e7e4:	f100 0001 	add.w	r0, r0, #1
 800e7e8:	bf08      	it	eq
 800e7ea:	2020      	moveq	r0, #32
 800e7ec:	4770      	bx	lr

0800e7ee <__lo0bits>:
 800e7ee:	6803      	ldr	r3, [r0, #0]
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	f013 0007 	ands.w	r0, r3, #7
 800e7f6:	d00b      	beq.n	800e810 <__lo0bits+0x22>
 800e7f8:	07d9      	lsls	r1, r3, #31
 800e7fa:	d421      	bmi.n	800e840 <__lo0bits+0x52>
 800e7fc:	0798      	lsls	r0, r3, #30
 800e7fe:	bf49      	itett	mi
 800e800:	085b      	lsrmi	r3, r3, #1
 800e802:	089b      	lsrpl	r3, r3, #2
 800e804:	2001      	movmi	r0, #1
 800e806:	6013      	strmi	r3, [r2, #0]
 800e808:	bf5c      	itt	pl
 800e80a:	6013      	strpl	r3, [r2, #0]
 800e80c:	2002      	movpl	r0, #2
 800e80e:	4770      	bx	lr
 800e810:	b299      	uxth	r1, r3
 800e812:	b909      	cbnz	r1, 800e818 <__lo0bits+0x2a>
 800e814:	0c1b      	lsrs	r3, r3, #16
 800e816:	2010      	movs	r0, #16
 800e818:	b2d9      	uxtb	r1, r3
 800e81a:	b909      	cbnz	r1, 800e820 <__lo0bits+0x32>
 800e81c:	3008      	adds	r0, #8
 800e81e:	0a1b      	lsrs	r3, r3, #8
 800e820:	0719      	lsls	r1, r3, #28
 800e822:	bf04      	itt	eq
 800e824:	091b      	lsreq	r3, r3, #4
 800e826:	3004      	addeq	r0, #4
 800e828:	0799      	lsls	r1, r3, #30
 800e82a:	bf04      	itt	eq
 800e82c:	089b      	lsreq	r3, r3, #2
 800e82e:	3002      	addeq	r0, #2
 800e830:	07d9      	lsls	r1, r3, #31
 800e832:	d403      	bmi.n	800e83c <__lo0bits+0x4e>
 800e834:	085b      	lsrs	r3, r3, #1
 800e836:	f100 0001 	add.w	r0, r0, #1
 800e83a:	d003      	beq.n	800e844 <__lo0bits+0x56>
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	4770      	bx	lr
 800e840:	2000      	movs	r0, #0
 800e842:	4770      	bx	lr
 800e844:	2020      	movs	r0, #32
 800e846:	4770      	bx	lr

0800e848 <__i2b>:
 800e848:	b510      	push	{r4, lr}
 800e84a:	460c      	mov	r4, r1
 800e84c:	2101      	movs	r1, #1
 800e84e:	f7ff febd 	bl	800e5cc <_Balloc>
 800e852:	4602      	mov	r2, r0
 800e854:	b928      	cbnz	r0, 800e862 <__i2b+0x1a>
 800e856:	4b05      	ldr	r3, [pc, #20]	@ (800e86c <__i2b+0x24>)
 800e858:	4805      	ldr	r0, [pc, #20]	@ (800e870 <__i2b+0x28>)
 800e85a:	f240 1145 	movw	r1, #325	@ 0x145
 800e85e:	f001 fdfb 	bl	8010458 <__assert_func>
 800e862:	2301      	movs	r3, #1
 800e864:	6144      	str	r4, [r0, #20]
 800e866:	6103      	str	r3, [r0, #16]
 800e868:	bd10      	pop	{r4, pc}
 800e86a:	bf00      	nop
 800e86c:	08011f39 	.word	0x08011f39
 800e870:	08011f4a 	.word	0x08011f4a

0800e874 <__multiply>:
 800e874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	4614      	mov	r4, r2
 800e87a:	690a      	ldr	r2, [r1, #16]
 800e87c:	6923      	ldr	r3, [r4, #16]
 800e87e:	429a      	cmp	r2, r3
 800e880:	bfa8      	it	ge
 800e882:	4623      	movge	r3, r4
 800e884:	460f      	mov	r7, r1
 800e886:	bfa4      	itt	ge
 800e888:	460c      	movge	r4, r1
 800e88a:	461f      	movge	r7, r3
 800e88c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e890:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e894:	68a3      	ldr	r3, [r4, #8]
 800e896:	6861      	ldr	r1, [r4, #4]
 800e898:	eb0a 0609 	add.w	r6, sl, r9
 800e89c:	42b3      	cmp	r3, r6
 800e89e:	b085      	sub	sp, #20
 800e8a0:	bfb8      	it	lt
 800e8a2:	3101      	addlt	r1, #1
 800e8a4:	f7ff fe92 	bl	800e5cc <_Balloc>
 800e8a8:	b930      	cbnz	r0, 800e8b8 <__multiply+0x44>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	4b44      	ldr	r3, [pc, #272]	@ (800e9c0 <__multiply+0x14c>)
 800e8ae:	4845      	ldr	r0, [pc, #276]	@ (800e9c4 <__multiply+0x150>)
 800e8b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e8b4:	f001 fdd0 	bl	8010458 <__assert_func>
 800e8b8:	f100 0514 	add.w	r5, r0, #20
 800e8bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e8c0:	462b      	mov	r3, r5
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	4543      	cmp	r3, r8
 800e8c6:	d321      	bcc.n	800e90c <__multiply+0x98>
 800e8c8:	f107 0114 	add.w	r1, r7, #20
 800e8cc:	f104 0214 	add.w	r2, r4, #20
 800e8d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e8d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e8d8:	9302      	str	r3, [sp, #8]
 800e8da:	1b13      	subs	r3, r2, r4
 800e8dc:	3b15      	subs	r3, #21
 800e8de:	f023 0303 	bic.w	r3, r3, #3
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	f104 0715 	add.w	r7, r4, #21
 800e8e8:	42ba      	cmp	r2, r7
 800e8ea:	bf38      	it	cc
 800e8ec:	2304      	movcc	r3, #4
 800e8ee:	9301      	str	r3, [sp, #4]
 800e8f0:	9b02      	ldr	r3, [sp, #8]
 800e8f2:	9103      	str	r1, [sp, #12]
 800e8f4:	428b      	cmp	r3, r1
 800e8f6:	d80c      	bhi.n	800e912 <__multiply+0x9e>
 800e8f8:	2e00      	cmp	r6, #0
 800e8fa:	dd03      	ble.n	800e904 <__multiply+0x90>
 800e8fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e900:	2b00      	cmp	r3, #0
 800e902:	d05b      	beq.n	800e9bc <__multiply+0x148>
 800e904:	6106      	str	r6, [r0, #16]
 800e906:	b005      	add	sp, #20
 800e908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e90c:	f843 2b04 	str.w	r2, [r3], #4
 800e910:	e7d8      	b.n	800e8c4 <__multiply+0x50>
 800e912:	f8b1 a000 	ldrh.w	sl, [r1]
 800e916:	f1ba 0f00 	cmp.w	sl, #0
 800e91a:	d024      	beq.n	800e966 <__multiply+0xf2>
 800e91c:	f104 0e14 	add.w	lr, r4, #20
 800e920:	46a9      	mov	r9, r5
 800e922:	f04f 0c00 	mov.w	ip, #0
 800e926:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e92a:	f8d9 3000 	ldr.w	r3, [r9]
 800e92e:	fa1f fb87 	uxth.w	fp, r7
 800e932:	b29b      	uxth	r3, r3
 800e934:	fb0a 330b 	mla	r3, sl, fp, r3
 800e938:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e93c:	f8d9 7000 	ldr.w	r7, [r9]
 800e940:	4463      	add	r3, ip
 800e942:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e946:	fb0a c70b 	mla	r7, sl, fp, ip
 800e94a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e94e:	b29b      	uxth	r3, r3
 800e950:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e954:	4572      	cmp	r2, lr
 800e956:	f849 3b04 	str.w	r3, [r9], #4
 800e95a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e95e:	d8e2      	bhi.n	800e926 <__multiply+0xb2>
 800e960:	9b01      	ldr	r3, [sp, #4]
 800e962:	f845 c003 	str.w	ip, [r5, r3]
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e96c:	3104      	adds	r1, #4
 800e96e:	f1b9 0f00 	cmp.w	r9, #0
 800e972:	d021      	beq.n	800e9b8 <__multiply+0x144>
 800e974:	682b      	ldr	r3, [r5, #0]
 800e976:	f104 0c14 	add.w	ip, r4, #20
 800e97a:	46ae      	mov	lr, r5
 800e97c:	f04f 0a00 	mov.w	sl, #0
 800e980:	f8bc b000 	ldrh.w	fp, [ip]
 800e984:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e988:	fb09 770b 	mla	r7, r9, fp, r7
 800e98c:	4457      	add	r7, sl
 800e98e:	b29b      	uxth	r3, r3
 800e990:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e994:	f84e 3b04 	str.w	r3, [lr], #4
 800e998:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e99c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9a0:	f8be 3000 	ldrh.w	r3, [lr]
 800e9a4:	fb09 330a 	mla	r3, r9, sl, r3
 800e9a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e9ac:	4562      	cmp	r2, ip
 800e9ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9b2:	d8e5      	bhi.n	800e980 <__multiply+0x10c>
 800e9b4:	9f01      	ldr	r7, [sp, #4]
 800e9b6:	51eb      	str	r3, [r5, r7]
 800e9b8:	3504      	adds	r5, #4
 800e9ba:	e799      	b.n	800e8f0 <__multiply+0x7c>
 800e9bc:	3e01      	subs	r6, #1
 800e9be:	e79b      	b.n	800e8f8 <__multiply+0x84>
 800e9c0:	08011f39 	.word	0x08011f39
 800e9c4:	08011f4a 	.word	0x08011f4a

0800e9c8 <__pow5mult>:
 800e9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9cc:	4615      	mov	r5, r2
 800e9ce:	f012 0203 	ands.w	r2, r2, #3
 800e9d2:	4607      	mov	r7, r0
 800e9d4:	460e      	mov	r6, r1
 800e9d6:	d007      	beq.n	800e9e8 <__pow5mult+0x20>
 800e9d8:	4c25      	ldr	r4, [pc, #148]	@ (800ea70 <__pow5mult+0xa8>)
 800e9da:	3a01      	subs	r2, #1
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9e2:	f7ff fe55 	bl	800e690 <__multadd>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	10ad      	asrs	r5, r5, #2
 800e9ea:	d03d      	beq.n	800ea68 <__pow5mult+0xa0>
 800e9ec:	69fc      	ldr	r4, [r7, #28]
 800e9ee:	b97c      	cbnz	r4, 800ea10 <__pow5mult+0x48>
 800e9f0:	2010      	movs	r0, #16
 800e9f2:	f7fd fd3f 	bl	800c474 <malloc>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	61f8      	str	r0, [r7, #28]
 800e9fa:	b928      	cbnz	r0, 800ea08 <__pow5mult+0x40>
 800e9fc:	4b1d      	ldr	r3, [pc, #116]	@ (800ea74 <__pow5mult+0xac>)
 800e9fe:	481e      	ldr	r0, [pc, #120]	@ (800ea78 <__pow5mult+0xb0>)
 800ea00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ea04:	f001 fd28 	bl	8010458 <__assert_func>
 800ea08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea0c:	6004      	str	r4, [r0, #0]
 800ea0e:	60c4      	str	r4, [r0, #12]
 800ea10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ea14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea18:	b94c      	cbnz	r4, 800ea2e <__pow5mult+0x66>
 800ea1a:	f240 2171 	movw	r1, #625	@ 0x271
 800ea1e:	4638      	mov	r0, r7
 800ea20:	f7ff ff12 	bl	800e848 <__i2b>
 800ea24:	2300      	movs	r3, #0
 800ea26:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	6003      	str	r3, [r0, #0]
 800ea2e:	f04f 0900 	mov.w	r9, #0
 800ea32:	07eb      	lsls	r3, r5, #31
 800ea34:	d50a      	bpl.n	800ea4c <__pow5mult+0x84>
 800ea36:	4631      	mov	r1, r6
 800ea38:	4622      	mov	r2, r4
 800ea3a:	4638      	mov	r0, r7
 800ea3c:	f7ff ff1a 	bl	800e874 <__multiply>
 800ea40:	4631      	mov	r1, r6
 800ea42:	4680      	mov	r8, r0
 800ea44:	4638      	mov	r0, r7
 800ea46:	f7ff fe01 	bl	800e64c <_Bfree>
 800ea4a:	4646      	mov	r6, r8
 800ea4c:	106d      	asrs	r5, r5, #1
 800ea4e:	d00b      	beq.n	800ea68 <__pow5mult+0xa0>
 800ea50:	6820      	ldr	r0, [r4, #0]
 800ea52:	b938      	cbnz	r0, 800ea64 <__pow5mult+0x9c>
 800ea54:	4622      	mov	r2, r4
 800ea56:	4621      	mov	r1, r4
 800ea58:	4638      	mov	r0, r7
 800ea5a:	f7ff ff0b 	bl	800e874 <__multiply>
 800ea5e:	6020      	str	r0, [r4, #0]
 800ea60:	f8c0 9000 	str.w	r9, [r0]
 800ea64:	4604      	mov	r4, r0
 800ea66:	e7e4      	b.n	800ea32 <__pow5mult+0x6a>
 800ea68:	4630      	mov	r0, r6
 800ea6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea6e:	bf00      	nop
 800ea70:	08011fa4 	.word	0x08011fa4
 800ea74:	08011eca 	.word	0x08011eca
 800ea78:	08011f4a 	.word	0x08011f4a

0800ea7c <__lshift>:
 800ea7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea80:	460c      	mov	r4, r1
 800ea82:	6849      	ldr	r1, [r1, #4]
 800ea84:	6923      	ldr	r3, [r4, #16]
 800ea86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea8a:	68a3      	ldr	r3, [r4, #8]
 800ea8c:	4607      	mov	r7, r0
 800ea8e:	4691      	mov	r9, r2
 800ea90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea94:	f108 0601 	add.w	r6, r8, #1
 800ea98:	42b3      	cmp	r3, r6
 800ea9a:	db0b      	blt.n	800eab4 <__lshift+0x38>
 800ea9c:	4638      	mov	r0, r7
 800ea9e:	f7ff fd95 	bl	800e5cc <_Balloc>
 800eaa2:	4605      	mov	r5, r0
 800eaa4:	b948      	cbnz	r0, 800eaba <__lshift+0x3e>
 800eaa6:	4602      	mov	r2, r0
 800eaa8:	4b28      	ldr	r3, [pc, #160]	@ (800eb4c <__lshift+0xd0>)
 800eaaa:	4829      	ldr	r0, [pc, #164]	@ (800eb50 <__lshift+0xd4>)
 800eaac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eab0:	f001 fcd2 	bl	8010458 <__assert_func>
 800eab4:	3101      	adds	r1, #1
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	e7ee      	b.n	800ea98 <__lshift+0x1c>
 800eaba:	2300      	movs	r3, #0
 800eabc:	f100 0114 	add.w	r1, r0, #20
 800eac0:	f100 0210 	add.w	r2, r0, #16
 800eac4:	4618      	mov	r0, r3
 800eac6:	4553      	cmp	r3, sl
 800eac8:	db33      	blt.n	800eb32 <__lshift+0xb6>
 800eaca:	6920      	ldr	r0, [r4, #16]
 800eacc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ead0:	f104 0314 	add.w	r3, r4, #20
 800ead4:	f019 091f 	ands.w	r9, r9, #31
 800ead8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eadc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eae0:	d02b      	beq.n	800eb3a <__lshift+0xbe>
 800eae2:	f1c9 0e20 	rsb	lr, r9, #32
 800eae6:	468a      	mov	sl, r1
 800eae8:	2200      	movs	r2, #0
 800eaea:	6818      	ldr	r0, [r3, #0]
 800eaec:	fa00 f009 	lsl.w	r0, r0, r9
 800eaf0:	4310      	orrs	r0, r2
 800eaf2:	f84a 0b04 	str.w	r0, [sl], #4
 800eaf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eafa:	459c      	cmp	ip, r3
 800eafc:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb00:	d8f3      	bhi.n	800eaea <__lshift+0x6e>
 800eb02:	ebac 0304 	sub.w	r3, ip, r4
 800eb06:	3b15      	subs	r3, #21
 800eb08:	f023 0303 	bic.w	r3, r3, #3
 800eb0c:	3304      	adds	r3, #4
 800eb0e:	f104 0015 	add.w	r0, r4, #21
 800eb12:	4584      	cmp	ip, r0
 800eb14:	bf38      	it	cc
 800eb16:	2304      	movcc	r3, #4
 800eb18:	50ca      	str	r2, [r1, r3]
 800eb1a:	b10a      	cbz	r2, 800eb20 <__lshift+0xa4>
 800eb1c:	f108 0602 	add.w	r6, r8, #2
 800eb20:	3e01      	subs	r6, #1
 800eb22:	4638      	mov	r0, r7
 800eb24:	612e      	str	r6, [r5, #16]
 800eb26:	4621      	mov	r1, r4
 800eb28:	f7ff fd90 	bl	800e64c <_Bfree>
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb32:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb36:	3301      	adds	r3, #1
 800eb38:	e7c5      	b.n	800eac6 <__lshift+0x4a>
 800eb3a:	3904      	subs	r1, #4
 800eb3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb40:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb44:	459c      	cmp	ip, r3
 800eb46:	d8f9      	bhi.n	800eb3c <__lshift+0xc0>
 800eb48:	e7ea      	b.n	800eb20 <__lshift+0xa4>
 800eb4a:	bf00      	nop
 800eb4c:	08011f39 	.word	0x08011f39
 800eb50:	08011f4a 	.word	0x08011f4a

0800eb54 <__mcmp>:
 800eb54:	690a      	ldr	r2, [r1, #16]
 800eb56:	4603      	mov	r3, r0
 800eb58:	6900      	ldr	r0, [r0, #16]
 800eb5a:	1a80      	subs	r0, r0, r2
 800eb5c:	b530      	push	{r4, r5, lr}
 800eb5e:	d10e      	bne.n	800eb7e <__mcmp+0x2a>
 800eb60:	3314      	adds	r3, #20
 800eb62:	3114      	adds	r1, #20
 800eb64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eb68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eb6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb74:	4295      	cmp	r5, r2
 800eb76:	d003      	beq.n	800eb80 <__mcmp+0x2c>
 800eb78:	d205      	bcs.n	800eb86 <__mcmp+0x32>
 800eb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7e:	bd30      	pop	{r4, r5, pc}
 800eb80:	42a3      	cmp	r3, r4
 800eb82:	d3f3      	bcc.n	800eb6c <__mcmp+0x18>
 800eb84:	e7fb      	b.n	800eb7e <__mcmp+0x2a>
 800eb86:	2001      	movs	r0, #1
 800eb88:	e7f9      	b.n	800eb7e <__mcmp+0x2a>
	...

0800eb8c <__mdiff>:
 800eb8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb90:	4689      	mov	r9, r1
 800eb92:	4606      	mov	r6, r0
 800eb94:	4611      	mov	r1, r2
 800eb96:	4648      	mov	r0, r9
 800eb98:	4614      	mov	r4, r2
 800eb9a:	f7ff ffdb 	bl	800eb54 <__mcmp>
 800eb9e:	1e05      	subs	r5, r0, #0
 800eba0:	d112      	bne.n	800ebc8 <__mdiff+0x3c>
 800eba2:	4629      	mov	r1, r5
 800eba4:	4630      	mov	r0, r6
 800eba6:	f7ff fd11 	bl	800e5cc <_Balloc>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	b928      	cbnz	r0, 800ebba <__mdiff+0x2e>
 800ebae:	4b3f      	ldr	r3, [pc, #252]	@ (800ecac <__mdiff+0x120>)
 800ebb0:	f240 2137 	movw	r1, #567	@ 0x237
 800ebb4:	483e      	ldr	r0, [pc, #248]	@ (800ecb0 <__mdiff+0x124>)
 800ebb6:	f001 fc4f 	bl	8010458 <__assert_func>
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ebc0:	4610      	mov	r0, r2
 800ebc2:	b003      	add	sp, #12
 800ebc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc8:	bfbc      	itt	lt
 800ebca:	464b      	movlt	r3, r9
 800ebcc:	46a1      	movlt	r9, r4
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ebd4:	bfba      	itte	lt
 800ebd6:	461c      	movlt	r4, r3
 800ebd8:	2501      	movlt	r5, #1
 800ebda:	2500      	movge	r5, #0
 800ebdc:	f7ff fcf6 	bl	800e5cc <_Balloc>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	b918      	cbnz	r0, 800ebec <__mdiff+0x60>
 800ebe4:	4b31      	ldr	r3, [pc, #196]	@ (800ecac <__mdiff+0x120>)
 800ebe6:	f240 2145 	movw	r1, #581	@ 0x245
 800ebea:	e7e3      	b.n	800ebb4 <__mdiff+0x28>
 800ebec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ebf0:	6926      	ldr	r6, [r4, #16]
 800ebf2:	60c5      	str	r5, [r0, #12]
 800ebf4:	f109 0310 	add.w	r3, r9, #16
 800ebf8:	f109 0514 	add.w	r5, r9, #20
 800ebfc:	f104 0e14 	add.w	lr, r4, #20
 800ec00:	f100 0b14 	add.w	fp, r0, #20
 800ec04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ec08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ec0c:	9301      	str	r3, [sp, #4]
 800ec0e:	46d9      	mov	r9, fp
 800ec10:	f04f 0c00 	mov.w	ip, #0
 800ec14:	9b01      	ldr	r3, [sp, #4]
 800ec16:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ec1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	fa1f f38a 	uxth.w	r3, sl
 800ec24:	4619      	mov	r1, r3
 800ec26:	b283      	uxth	r3, r0
 800ec28:	1acb      	subs	r3, r1, r3
 800ec2a:	0c00      	lsrs	r0, r0, #16
 800ec2c:	4463      	add	r3, ip
 800ec2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ec32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ec3c:	4576      	cmp	r6, lr
 800ec3e:	f849 3b04 	str.w	r3, [r9], #4
 800ec42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec46:	d8e5      	bhi.n	800ec14 <__mdiff+0x88>
 800ec48:	1b33      	subs	r3, r6, r4
 800ec4a:	3b15      	subs	r3, #21
 800ec4c:	f023 0303 	bic.w	r3, r3, #3
 800ec50:	3415      	adds	r4, #21
 800ec52:	3304      	adds	r3, #4
 800ec54:	42a6      	cmp	r6, r4
 800ec56:	bf38      	it	cc
 800ec58:	2304      	movcc	r3, #4
 800ec5a:	441d      	add	r5, r3
 800ec5c:	445b      	add	r3, fp
 800ec5e:	461e      	mov	r6, r3
 800ec60:	462c      	mov	r4, r5
 800ec62:	4544      	cmp	r4, r8
 800ec64:	d30e      	bcc.n	800ec84 <__mdiff+0xf8>
 800ec66:	f108 0103 	add.w	r1, r8, #3
 800ec6a:	1b49      	subs	r1, r1, r5
 800ec6c:	f021 0103 	bic.w	r1, r1, #3
 800ec70:	3d03      	subs	r5, #3
 800ec72:	45a8      	cmp	r8, r5
 800ec74:	bf38      	it	cc
 800ec76:	2100      	movcc	r1, #0
 800ec78:	440b      	add	r3, r1
 800ec7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec7e:	b191      	cbz	r1, 800eca6 <__mdiff+0x11a>
 800ec80:	6117      	str	r7, [r2, #16]
 800ec82:	e79d      	b.n	800ebc0 <__mdiff+0x34>
 800ec84:	f854 1b04 	ldr.w	r1, [r4], #4
 800ec88:	46e6      	mov	lr, ip
 800ec8a:	0c08      	lsrs	r0, r1, #16
 800ec8c:	fa1c fc81 	uxtah	ip, ip, r1
 800ec90:	4471      	add	r1, lr
 800ec92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ec96:	b289      	uxth	r1, r1
 800ec98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ec9c:	f846 1b04 	str.w	r1, [r6], #4
 800eca0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eca4:	e7dd      	b.n	800ec62 <__mdiff+0xd6>
 800eca6:	3f01      	subs	r7, #1
 800eca8:	e7e7      	b.n	800ec7a <__mdiff+0xee>
 800ecaa:	bf00      	nop
 800ecac:	08011f39 	.word	0x08011f39
 800ecb0:	08011f4a 	.word	0x08011f4a

0800ecb4 <__ulp>:
 800ecb4:	b082      	sub	sp, #8
 800ecb6:	ed8d 0b00 	vstr	d0, [sp]
 800ecba:	9a01      	ldr	r2, [sp, #4]
 800ecbc:	4b0f      	ldr	r3, [pc, #60]	@ (800ecfc <__ulp+0x48>)
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	dc08      	bgt.n	800ecda <__ulp+0x26>
 800ecc8:	425b      	negs	r3, r3
 800ecca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ecce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ecd2:	da04      	bge.n	800ecde <__ulp+0x2a>
 800ecd4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ecd8:	4113      	asrs	r3, r2
 800ecda:	2200      	movs	r2, #0
 800ecdc:	e008      	b.n	800ecf0 <__ulp+0x3c>
 800ecde:	f1a2 0314 	sub.w	r3, r2, #20
 800ece2:	2b1e      	cmp	r3, #30
 800ece4:	bfda      	itte	le
 800ece6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ecea:	40da      	lsrle	r2, r3
 800ecec:	2201      	movgt	r2, #1
 800ecee:	2300      	movs	r3, #0
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4610      	mov	r0, r2
 800ecf4:	ec41 0b10 	vmov	d0, r0, r1
 800ecf8:	b002      	add	sp, #8
 800ecfa:	4770      	bx	lr
 800ecfc:	7ff00000 	.word	0x7ff00000

0800ed00 <__b2d>:
 800ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	6906      	ldr	r6, [r0, #16]
 800ed06:	f100 0814 	add.w	r8, r0, #20
 800ed0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ed0e:	1f37      	subs	r7, r6, #4
 800ed10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed14:	4610      	mov	r0, r2
 800ed16:	f7ff fd4b 	bl	800e7b0 <__hi0bits>
 800ed1a:	f1c0 0320 	rsb	r3, r0, #32
 800ed1e:	280a      	cmp	r0, #10
 800ed20:	600b      	str	r3, [r1, #0]
 800ed22:	491b      	ldr	r1, [pc, #108]	@ (800ed90 <__b2d+0x90>)
 800ed24:	dc15      	bgt.n	800ed52 <__b2d+0x52>
 800ed26:	f1c0 0c0b 	rsb	ip, r0, #11
 800ed2a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ed2e:	45b8      	cmp	r8, r7
 800ed30:	ea43 0501 	orr.w	r5, r3, r1
 800ed34:	bf34      	ite	cc
 800ed36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ed3a:	2300      	movcs	r3, #0
 800ed3c:	3015      	adds	r0, #21
 800ed3e:	fa02 f000 	lsl.w	r0, r2, r0
 800ed42:	fa23 f30c 	lsr.w	r3, r3, ip
 800ed46:	4303      	orrs	r3, r0
 800ed48:	461c      	mov	r4, r3
 800ed4a:	ec45 4b10 	vmov	d0, r4, r5
 800ed4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed52:	45b8      	cmp	r8, r7
 800ed54:	bf3a      	itte	cc
 800ed56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ed5a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ed5e:	2300      	movcs	r3, #0
 800ed60:	380b      	subs	r0, #11
 800ed62:	d012      	beq.n	800ed8a <__b2d+0x8a>
 800ed64:	f1c0 0120 	rsb	r1, r0, #32
 800ed68:	fa23 f401 	lsr.w	r4, r3, r1
 800ed6c:	4082      	lsls	r2, r0
 800ed6e:	4322      	orrs	r2, r4
 800ed70:	4547      	cmp	r7, r8
 800ed72:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ed76:	bf8c      	ite	hi
 800ed78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ed7c:	2200      	movls	r2, #0
 800ed7e:	4083      	lsls	r3, r0
 800ed80:	40ca      	lsrs	r2, r1
 800ed82:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ed86:	4313      	orrs	r3, r2
 800ed88:	e7de      	b.n	800ed48 <__b2d+0x48>
 800ed8a:	ea42 0501 	orr.w	r5, r2, r1
 800ed8e:	e7db      	b.n	800ed48 <__b2d+0x48>
 800ed90:	3ff00000 	.word	0x3ff00000

0800ed94 <__d2b>:
 800ed94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed98:	460f      	mov	r7, r1
 800ed9a:	2101      	movs	r1, #1
 800ed9c:	ec59 8b10 	vmov	r8, r9, d0
 800eda0:	4616      	mov	r6, r2
 800eda2:	f7ff fc13 	bl	800e5cc <_Balloc>
 800eda6:	4604      	mov	r4, r0
 800eda8:	b930      	cbnz	r0, 800edb8 <__d2b+0x24>
 800edaa:	4602      	mov	r2, r0
 800edac:	4b23      	ldr	r3, [pc, #140]	@ (800ee3c <__d2b+0xa8>)
 800edae:	4824      	ldr	r0, [pc, #144]	@ (800ee40 <__d2b+0xac>)
 800edb0:	f240 310f 	movw	r1, #783	@ 0x30f
 800edb4:	f001 fb50 	bl	8010458 <__assert_func>
 800edb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800edbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edc0:	b10d      	cbz	r5, 800edc6 <__d2b+0x32>
 800edc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	f1b8 0300 	subs.w	r3, r8, #0
 800edcc:	d023      	beq.n	800ee16 <__d2b+0x82>
 800edce:	4668      	mov	r0, sp
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	f7ff fd0c 	bl	800e7ee <__lo0bits>
 800edd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800edda:	b1d0      	cbz	r0, 800ee12 <__d2b+0x7e>
 800eddc:	f1c0 0320 	rsb	r3, r0, #32
 800ede0:	fa02 f303 	lsl.w	r3, r2, r3
 800ede4:	430b      	orrs	r3, r1
 800ede6:	40c2      	lsrs	r2, r0
 800ede8:	6163      	str	r3, [r4, #20]
 800edea:	9201      	str	r2, [sp, #4]
 800edec:	9b01      	ldr	r3, [sp, #4]
 800edee:	61a3      	str	r3, [r4, #24]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	bf0c      	ite	eq
 800edf4:	2201      	moveq	r2, #1
 800edf6:	2202      	movne	r2, #2
 800edf8:	6122      	str	r2, [r4, #16]
 800edfa:	b1a5      	cbz	r5, 800ee26 <__d2b+0x92>
 800edfc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ee00:	4405      	add	r5, r0
 800ee02:	603d      	str	r5, [r7, #0]
 800ee04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ee08:	6030      	str	r0, [r6, #0]
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	b003      	add	sp, #12
 800ee0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee12:	6161      	str	r1, [r4, #20]
 800ee14:	e7ea      	b.n	800edec <__d2b+0x58>
 800ee16:	a801      	add	r0, sp, #4
 800ee18:	f7ff fce9 	bl	800e7ee <__lo0bits>
 800ee1c:	9b01      	ldr	r3, [sp, #4]
 800ee1e:	6163      	str	r3, [r4, #20]
 800ee20:	3020      	adds	r0, #32
 800ee22:	2201      	movs	r2, #1
 800ee24:	e7e8      	b.n	800edf8 <__d2b+0x64>
 800ee26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ee2e:	6038      	str	r0, [r7, #0]
 800ee30:	6918      	ldr	r0, [r3, #16]
 800ee32:	f7ff fcbd 	bl	800e7b0 <__hi0bits>
 800ee36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee3a:	e7e5      	b.n	800ee08 <__d2b+0x74>
 800ee3c:	08011f39 	.word	0x08011f39
 800ee40:	08011f4a 	.word	0x08011f4a

0800ee44 <__ratio>:
 800ee44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee48:	b085      	sub	sp, #20
 800ee4a:	e9cd 1000 	strd	r1, r0, [sp]
 800ee4e:	a902      	add	r1, sp, #8
 800ee50:	f7ff ff56 	bl	800ed00 <__b2d>
 800ee54:	9800      	ldr	r0, [sp, #0]
 800ee56:	a903      	add	r1, sp, #12
 800ee58:	ec55 4b10 	vmov	r4, r5, d0
 800ee5c:	f7ff ff50 	bl	800ed00 <__b2d>
 800ee60:	9b01      	ldr	r3, [sp, #4]
 800ee62:	6919      	ldr	r1, [r3, #16]
 800ee64:	9b00      	ldr	r3, [sp, #0]
 800ee66:	691b      	ldr	r3, [r3, #16]
 800ee68:	1ac9      	subs	r1, r1, r3
 800ee6a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ee6e:	1a9b      	subs	r3, r3, r2
 800ee70:	ec5b ab10 	vmov	sl, fp, d0
 800ee74:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	bfce      	itee	gt
 800ee7c:	462a      	movgt	r2, r5
 800ee7e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ee82:	465a      	movle	r2, fp
 800ee84:	462f      	mov	r7, r5
 800ee86:	46d9      	mov	r9, fp
 800ee88:	bfcc      	ite	gt
 800ee8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ee8e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ee92:	464b      	mov	r3, r9
 800ee94:	4652      	mov	r2, sl
 800ee96:	4620      	mov	r0, r4
 800ee98:	4639      	mov	r1, r7
 800ee9a:	f7f1 fcf7 	bl	800088c <__aeabi_ddiv>
 800ee9e:	ec41 0b10 	vmov	d0, r0, r1
 800eea2:	b005      	add	sp, #20
 800eea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eea8 <__copybits>:
 800eea8:	3901      	subs	r1, #1
 800eeaa:	b570      	push	{r4, r5, r6, lr}
 800eeac:	1149      	asrs	r1, r1, #5
 800eeae:	6914      	ldr	r4, [r2, #16]
 800eeb0:	3101      	adds	r1, #1
 800eeb2:	f102 0314 	add.w	r3, r2, #20
 800eeb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eeba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eebe:	1f05      	subs	r5, r0, #4
 800eec0:	42a3      	cmp	r3, r4
 800eec2:	d30c      	bcc.n	800eede <__copybits+0x36>
 800eec4:	1aa3      	subs	r3, r4, r2
 800eec6:	3b11      	subs	r3, #17
 800eec8:	f023 0303 	bic.w	r3, r3, #3
 800eecc:	3211      	adds	r2, #17
 800eece:	42a2      	cmp	r2, r4
 800eed0:	bf88      	it	hi
 800eed2:	2300      	movhi	r3, #0
 800eed4:	4418      	add	r0, r3
 800eed6:	2300      	movs	r3, #0
 800eed8:	4288      	cmp	r0, r1
 800eeda:	d305      	bcc.n	800eee8 <__copybits+0x40>
 800eedc:	bd70      	pop	{r4, r5, r6, pc}
 800eede:	f853 6b04 	ldr.w	r6, [r3], #4
 800eee2:	f845 6f04 	str.w	r6, [r5, #4]!
 800eee6:	e7eb      	b.n	800eec0 <__copybits+0x18>
 800eee8:	f840 3b04 	str.w	r3, [r0], #4
 800eeec:	e7f4      	b.n	800eed8 <__copybits+0x30>

0800eeee <__any_on>:
 800eeee:	f100 0214 	add.w	r2, r0, #20
 800eef2:	6900      	ldr	r0, [r0, #16]
 800eef4:	114b      	asrs	r3, r1, #5
 800eef6:	4298      	cmp	r0, r3
 800eef8:	b510      	push	{r4, lr}
 800eefa:	db11      	blt.n	800ef20 <__any_on+0x32>
 800eefc:	dd0a      	ble.n	800ef14 <__any_on+0x26>
 800eefe:	f011 011f 	ands.w	r1, r1, #31
 800ef02:	d007      	beq.n	800ef14 <__any_on+0x26>
 800ef04:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ef08:	fa24 f001 	lsr.w	r0, r4, r1
 800ef0c:	fa00 f101 	lsl.w	r1, r0, r1
 800ef10:	428c      	cmp	r4, r1
 800ef12:	d10b      	bne.n	800ef2c <__any_on+0x3e>
 800ef14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d803      	bhi.n	800ef24 <__any_on+0x36>
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	bd10      	pop	{r4, pc}
 800ef20:	4603      	mov	r3, r0
 800ef22:	e7f7      	b.n	800ef14 <__any_on+0x26>
 800ef24:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef28:	2900      	cmp	r1, #0
 800ef2a:	d0f5      	beq.n	800ef18 <__any_on+0x2a>
 800ef2c:	2001      	movs	r0, #1
 800ef2e:	e7f6      	b.n	800ef1e <__any_on+0x30>

0800ef30 <sulp>:
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	460d      	mov	r5, r1
 800ef36:	ec45 4b10 	vmov	d0, r4, r5
 800ef3a:	4616      	mov	r6, r2
 800ef3c:	f7ff feba 	bl	800ecb4 <__ulp>
 800ef40:	ec51 0b10 	vmov	r0, r1, d0
 800ef44:	b17e      	cbz	r6, 800ef66 <sulp+0x36>
 800ef46:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef4a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	dd09      	ble.n	800ef66 <sulp+0x36>
 800ef52:	051b      	lsls	r3, r3, #20
 800ef54:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ef58:	2400      	movs	r4, #0
 800ef5a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ef5e:	4622      	mov	r2, r4
 800ef60:	462b      	mov	r3, r5
 800ef62:	f7f1 fb69 	bl	8000638 <__aeabi_dmul>
 800ef66:	ec41 0b10 	vmov	d0, r0, r1
 800ef6a:	bd70      	pop	{r4, r5, r6, pc}
 800ef6c:	0000      	movs	r0, r0
	...

0800ef70 <_strtod_l>:
 800ef70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef74:	b09f      	sub	sp, #124	@ 0x7c
 800ef76:	460c      	mov	r4, r1
 800ef78:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ef7e:	9005      	str	r0, [sp, #20]
 800ef80:	f04f 0a00 	mov.w	sl, #0
 800ef84:	f04f 0b00 	mov.w	fp, #0
 800ef88:	460a      	mov	r2, r1
 800ef8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef8c:	7811      	ldrb	r1, [r2, #0]
 800ef8e:	292b      	cmp	r1, #43	@ 0x2b
 800ef90:	d04a      	beq.n	800f028 <_strtod_l+0xb8>
 800ef92:	d838      	bhi.n	800f006 <_strtod_l+0x96>
 800ef94:	290d      	cmp	r1, #13
 800ef96:	d832      	bhi.n	800effe <_strtod_l+0x8e>
 800ef98:	2908      	cmp	r1, #8
 800ef9a:	d832      	bhi.n	800f002 <_strtod_l+0x92>
 800ef9c:	2900      	cmp	r1, #0
 800ef9e:	d03b      	beq.n	800f018 <_strtod_l+0xa8>
 800efa0:	2200      	movs	r2, #0
 800efa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800efa4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800efa6:	782a      	ldrb	r2, [r5, #0]
 800efa8:	2a30      	cmp	r2, #48	@ 0x30
 800efaa:	f040 80b3 	bne.w	800f114 <_strtod_l+0x1a4>
 800efae:	786a      	ldrb	r2, [r5, #1]
 800efb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800efb4:	2a58      	cmp	r2, #88	@ 0x58
 800efb6:	d16e      	bne.n	800f096 <_strtod_l+0x126>
 800efb8:	9302      	str	r3, [sp, #8]
 800efba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efbc:	9301      	str	r3, [sp, #4]
 800efbe:	ab1a      	add	r3, sp, #104	@ 0x68
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	4a8e      	ldr	r2, [pc, #568]	@ (800f1fc <_strtod_l+0x28c>)
 800efc4:	9805      	ldr	r0, [sp, #20]
 800efc6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800efc8:	a919      	add	r1, sp, #100	@ 0x64
 800efca:	f001 fadf 	bl	801058c <__gethex>
 800efce:	f010 060f 	ands.w	r6, r0, #15
 800efd2:	4604      	mov	r4, r0
 800efd4:	d005      	beq.n	800efe2 <_strtod_l+0x72>
 800efd6:	2e06      	cmp	r6, #6
 800efd8:	d128      	bne.n	800f02c <_strtod_l+0xbc>
 800efda:	3501      	adds	r5, #1
 800efdc:	2300      	movs	r3, #0
 800efde:	9519      	str	r5, [sp, #100]	@ 0x64
 800efe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	f040 858e 	bne.w	800fb06 <_strtod_l+0xb96>
 800efea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efec:	b1cb      	cbz	r3, 800f022 <_strtod_l+0xb2>
 800efee:	4652      	mov	r2, sl
 800eff0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eff4:	ec43 2b10 	vmov	d0, r2, r3
 800eff8:	b01f      	add	sp, #124	@ 0x7c
 800effa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800effe:	2920      	cmp	r1, #32
 800f000:	d1ce      	bne.n	800efa0 <_strtod_l+0x30>
 800f002:	3201      	adds	r2, #1
 800f004:	e7c1      	b.n	800ef8a <_strtod_l+0x1a>
 800f006:	292d      	cmp	r1, #45	@ 0x2d
 800f008:	d1ca      	bne.n	800efa0 <_strtod_l+0x30>
 800f00a:	2101      	movs	r1, #1
 800f00c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f00e:	1c51      	adds	r1, r2, #1
 800f010:	9119      	str	r1, [sp, #100]	@ 0x64
 800f012:	7852      	ldrb	r2, [r2, #1]
 800f014:	2a00      	cmp	r2, #0
 800f016:	d1c5      	bne.n	800efa4 <_strtod_l+0x34>
 800f018:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f01a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f040 8570 	bne.w	800fb02 <_strtod_l+0xb92>
 800f022:	4652      	mov	r2, sl
 800f024:	465b      	mov	r3, fp
 800f026:	e7e5      	b.n	800eff4 <_strtod_l+0x84>
 800f028:	2100      	movs	r1, #0
 800f02a:	e7ef      	b.n	800f00c <_strtod_l+0x9c>
 800f02c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f02e:	b13a      	cbz	r2, 800f040 <_strtod_l+0xd0>
 800f030:	2135      	movs	r1, #53	@ 0x35
 800f032:	a81c      	add	r0, sp, #112	@ 0x70
 800f034:	f7ff ff38 	bl	800eea8 <__copybits>
 800f038:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f03a:	9805      	ldr	r0, [sp, #20]
 800f03c:	f7ff fb06 	bl	800e64c <_Bfree>
 800f040:	3e01      	subs	r6, #1
 800f042:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f044:	2e04      	cmp	r6, #4
 800f046:	d806      	bhi.n	800f056 <_strtod_l+0xe6>
 800f048:	e8df f006 	tbb	[pc, r6]
 800f04c:	201d0314 	.word	0x201d0314
 800f050:	14          	.byte	0x14
 800f051:	00          	.byte	0x00
 800f052:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f056:	05e1      	lsls	r1, r4, #23
 800f058:	bf48      	it	mi
 800f05a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f05e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f062:	0d1b      	lsrs	r3, r3, #20
 800f064:	051b      	lsls	r3, r3, #20
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1bb      	bne.n	800efe2 <_strtod_l+0x72>
 800f06a:	f7fe fbe5 	bl	800d838 <__errno>
 800f06e:	2322      	movs	r3, #34	@ 0x22
 800f070:	6003      	str	r3, [r0, #0]
 800f072:	e7b6      	b.n	800efe2 <_strtod_l+0x72>
 800f074:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f078:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f07c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f080:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f084:	e7e7      	b.n	800f056 <_strtod_l+0xe6>
 800f086:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f204 <_strtod_l+0x294>
 800f08a:	e7e4      	b.n	800f056 <_strtod_l+0xe6>
 800f08c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f090:	f04f 3aff 	mov.w	sl, #4294967295
 800f094:	e7df      	b.n	800f056 <_strtod_l+0xe6>
 800f096:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f09c:	785b      	ldrb	r3, [r3, #1]
 800f09e:	2b30      	cmp	r3, #48	@ 0x30
 800f0a0:	d0f9      	beq.n	800f096 <_strtod_l+0x126>
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d09d      	beq.n	800efe2 <_strtod_l+0x72>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	9308      	str	r3, [sp, #32]
 800f0b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0b4:	461f      	mov	r7, r3
 800f0b6:	220a      	movs	r2, #10
 800f0b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f0ba:	7805      	ldrb	r5, [r0, #0]
 800f0bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f0c0:	b2d9      	uxtb	r1, r3
 800f0c2:	2909      	cmp	r1, #9
 800f0c4:	d928      	bls.n	800f118 <_strtod_l+0x1a8>
 800f0c6:	494e      	ldr	r1, [pc, #312]	@ (800f200 <_strtod_l+0x290>)
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	f001 f979 	bl	80103c0 <strncmp>
 800f0ce:	2800      	cmp	r0, #0
 800f0d0:	d032      	beq.n	800f138 <_strtod_l+0x1c8>
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	462a      	mov	r2, r5
 800f0d6:	4681      	mov	r9, r0
 800f0d8:	463d      	mov	r5, r7
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2a65      	cmp	r2, #101	@ 0x65
 800f0de:	d001      	beq.n	800f0e4 <_strtod_l+0x174>
 800f0e0:	2a45      	cmp	r2, #69	@ 0x45
 800f0e2:	d114      	bne.n	800f10e <_strtod_l+0x19e>
 800f0e4:	b91d      	cbnz	r5, 800f0ee <_strtod_l+0x17e>
 800f0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0e8:	4302      	orrs	r2, r0
 800f0ea:	d095      	beq.n	800f018 <_strtod_l+0xa8>
 800f0ec:	2500      	movs	r5, #0
 800f0ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f0f0:	1c62      	adds	r2, r4, #1
 800f0f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0f4:	7862      	ldrb	r2, [r4, #1]
 800f0f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800f0f8:	d077      	beq.n	800f1ea <_strtod_l+0x27a>
 800f0fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800f0fc:	d07b      	beq.n	800f1f6 <_strtod_l+0x286>
 800f0fe:	f04f 0c00 	mov.w	ip, #0
 800f102:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f106:	2909      	cmp	r1, #9
 800f108:	f240 8082 	bls.w	800f210 <_strtod_l+0x2a0>
 800f10c:	9419      	str	r4, [sp, #100]	@ 0x64
 800f10e:	f04f 0800 	mov.w	r8, #0
 800f112:	e0a2      	b.n	800f25a <_strtod_l+0x2ea>
 800f114:	2300      	movs	r3, #0
 800f116:	e7c7      	b.n	800f0a8 <_strtod_l+0x138>
 800f118:	2f08      	cmp	r7, #8
 800f11a:	bfd5      	itete	le
 800f11c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f11e:	9908      	ldrgt	r1, [sp, #32]
 800f120:	fb02 3301 	mlale	r3, r2, r1, r3
 800f124:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f128:	f100 0001 	add.w	r0, r0, #1
 800f12c:	bfd4      	ite	le
 800f12e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f130:	9308      	strgt	r3, [sp, #32]
 800f132:	3701      	adds	r7, #1
 800f134:	9019      	str	r0, [sp, #100]	@ 0x64
 800f136:	e7bf      	b.n	800f0b8 <_strtod_l+0x148>
 800f138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f13a:	1c5a      	adds	r2, r3, #1
 800f13c:	9219      	str	r2, [sp, #100]	@ 0x64
 800f13e:	785a      	ldrb	r2, [r3, #1]
 800f140:	b37f      	cbz	r7, 800f1a2 <_strtod_l+0x232>
 800f142:	4681      	mov	r9, r0
 800f144:	463d      	mov	r5, r7
 800f146:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f14a:	2b09      	cmp	r3, #9
 800f14c:	d912      	bls.n	800f174 <_strtod_l+0x204>
 800f14e:	2301      	movs	r3, #1
 800f150:	e7c4      	b.n	800f0dc <_strtod_l+0x16c>
 800f152:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	9219      	str	r2, [sp, #100]	@ 0x64
 800f158:	785a      	ldrb	r2, [r3, #1]
 800f15a:	3001      	adds	r0, #1
 800f15c:	2a30      	cmp	r2, #48	@ 0x30
 800f15e:	d0f8      	beq.n	800f152 <_strtod_l+0x1e2>
 800f160:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f164:	2b08      	cmp	r3, #8
 800f166:	f200 84d3 	bhi.w	800fb10 <_strtod_l+0xba0>
 800f16a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f16c:	930c      	str	r3, [sp, #48]	@ 0x30
 800f16e:	4681      	mov	r9, r0
 800f170:	2000      	movs	r0, #0
 800f172:	4605      	mov	r5, r0
 800f174:	3a30      	subs	r2, #48	@ 0x30
 800f176:	f100 0301 	add.w	r3, r0, #1
 800f17a:	d02a      	beq.n	800f1d2 <_strtod_l+0x262>
 800f17c:	4499      	add	r9, r3
 800f17e:	eb00 0c05 	add.w	ip, r0, r5
 800f182:	462b      	mov	r3, r5
 800f184:	210a      	movs	r1, #10
 800f186:	4563      	cmp	r3, ip
 800f188:	d10d      	bne.n	800f1a6 <_strtod_l+0x236>
 800f18a:	1c69      	adds	r1, r5, #1
 800f18c:	4401      	add	r1, r0
 800f18e:	4428      	add	r0, r5
 800f190:	2808      	cmp	r0, #8
 800f192:	dc16      	bgt.n	800f1c2 <_strtod_l+0x252>
 800f194:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f196:	230a      	movs	r3, #10
 800f198:	fb03 2300 	mla	r3, r3, r0, r2
 800f19c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f19e:	2300      	movs	r3, #0
 800f1a0:	e018      	b.n	800f1d4 <_strtod_l+0x264>
 800f1a2:	4638      	mov	r0, r7
 800f1a4:	e7da      	b.n	800f15c <_strtod_l+0x1ec>
 800f1a6:	2b08      	cmp	r3, #8
 800f1a8:	f103 0301 	add.w	r3, r3, #1
 800f1ac:	dc03      	bgt.n	800f1b6 <_strtod_l+0x246>
 800f1ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f1b0:	434e      	muls	r6, r1
 800f1b2:	960a      	str	r6, [sp, #40]	@ 0x28
 800f1b4:	e7e7      	b.n	800f186 <_strtod_l+0x216>
 800f1b6:	2b10      	cmp	r3, #16
 800f1b8:	bfde      	ittt	le
 800f1ba:	9e08      	ldrle	r6, [sp, #32]
 800f1bc:	434e      	mulle	r6, r1
 800f1be:	9608      	strle	r6, [sp, #32]
 800f1c0:	e7e1      	b.n	800f186 <_strtod_l+0x216>
 800f1c2:	280f      	cmp	r0, #15
 800f1c4:	dceb      	bgt.n	800f19e <_strtod_l+0x22e>
 800f1c6:	9808      	ldr	r0, [sp, #32]
 800f1c8:	230a      	movs	r3, #10
 800f1ca:	fb03 2300 	mla	r3, r3, r0, r2
 800f1ce:	9308      	str	r3, [sp, #32]
 800f1d0:	e7e5      	b.n	800f19e <_strtod_l+0x22e>
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f1d6:	1c50      	adds	r0, r2, #1
 800f1d8:	9019      	str	r0, [sp, #100]	@ 0x64
 800f1da:	7852      	ldrb	r2, [r2, #1]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	460d      	mov	r5, r1
 800f1e0:	e7b1      	b.n	800f146 <_strtod_l+0x1d6>
 800f1e2:	f04f 0900 	mov.w	r9, #0
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	e77d      	b.n	800f0e6 <_strtod_l+0x176>
 800f1ea:	f04f 0c00 	mov.w	ip, #0
 800f1ee:	1ca2      	adds	r2, r4, #2
 800f1f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800f1f2:	78a2      	ldrb	r2, [r4, #2]
 800f1f4:	e785      	b.n	800f102 <_strtod_l+0x192>
 800f1f6:	f04f 0c01 	mov.w	ip, #1
 800f1fa:	e7f8      	b.n	800f1ee <_strtod_l+0x27e>
 800f1fc:	080120b8 	.word	0x080120b8
 800f200:	080120a0 	.word	0x080120a0
 800f204:	7ff00000 	.word	0x7ff00000
 800f208:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f20a:	1c51      	adds	r1, r2, #1
 800f20c:	9119      	str	r1, [sp, #100]	@ 0x64
 800f20e:	7852      	ldrb	r2, [r2, #1]
 800f210:	2a30      	cmp	r2, #48	@ 0x30
 800f212:	d0f9      	beq.n	800f208 <_strtod_l+0x298>
 800f214:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f218:	2908      	cmp	r1, #8
 800f21a:	f63f af78 	bhi.w	800f10e <_strtod_l+0x19e>
 800f21e:	3a30      	subs	r2, #48	@ 0x30
 800f220:	920e      	str	r2, [sp, #56]	@ 0x38
 800f222:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f224:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f226:	f04f 080a 	mov.w	r8, #10
 800f22a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f22c:	1c56      	adds	r6, r2, #1
 800f22e:	9619      	str	r6, [sp, #100]	@ 0x64
 800f230:	7852      	ldrb	r2, [r2, #1]
 800f232:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f236:	f1be 0f09 	cmp.w	lr, #9
 800f23a:	d939      	bls.n	800f2b0 <_strtod_l+0x340>
 800f23c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f23e:	1a76      	subs	r6, r6, r1
 800f240:	2e08      	cmp	r6, #8
 800f242:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f246:	dc03      	bgt.n	800f250 <_strtod_l+0x2e0>
 800f248:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f24a:	4588      	cmp	r8, r1
 800f24c:	bfa8      	it	ge
 800f24e:	4688      	movge	r8, r1
 800f250:	f1bc 0f00 	cmp.w	ip, #0
 800f254:	d001      	beq.n	800f25a <_strtod_l+0x2ea>
 800f256:	f1c8 0800 	rsb	r8, r8, #0
 800f25a:	2d00      	cmp	r5, #0
 800f25c:	d14e      	bne.n	800f2fc <_strtod_l+0x38c>
 800f25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f260:	4308      	orrs	r0, r1
 800f262:	f47f aebe 	bne.w	800efe2 <_strtod_l+0x72>
 800f266:	2b00      	cmp	r3, #0
 800f268:	f47f aed6 	bne.w	800f018 <_strtod_l+0xa8>
 800f26c:	2a69      	cmp	r2, #105	@ 0x69
 800f26e:	d028      	beq.n	800f2c2 <_strtod_l+0x352>
 800f270:	dc25      	bgt.n	800f2be <_strtod_l+0x34e>
 800f272:	2a49      	cmp	r2, #73	@ 0x49
 800f274:	d025      	beq.n	800f2c2 <_strtod_l+0x352>
 800f276:	2a4e      	cmp	r2, #78	@ 0x4e
 800f278:	f47f aece 	bne.w	800f018 <_strtod_l+0xa8>
 800f27c:	499b      	ldr	r1, [pc, #620]	@ (800f4ec <_strtod_l+0x57c>)
 800f27e:	a819      	add	r0, sp, #100	@ 0x64
 800f280:	f001 fba6 	bl	80109d0 <__match>
 800f284:	2800      	cmp	r0, #0
 800f286:	f43f aec7 	beq.w	800f018 <_strtod_l+0xa8>
 800f28a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b28      	cmp	r3, #40	@ 0x28
 800f290:	d12e      	bne.n	800f2f0 <_strtod_l+0x380>
 800f292:	4997      	ldr	r1, [pc, #604]	@ (800f4f0 <_strtod_l+0x580>)
 800f294:	aa1c      	add	r2, sp, #112	@ 0x70
 800f296:	a819      	add	r0, sp, #100	@ 0x64
 800f298:	f001 fbae 	bl	80109f8 <__hexnan>
 800f29c:	2805      	cmp	r0, #5
 800f29e:	d127      	bne.n	800f2f0 <_strtod_l+0x380>
 800f2a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f2a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f2a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f2aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f2ae:	e698      	b.n	800efe2 <_strtod_l+0x72>
 800f2b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f2b2:	fb08 2101 	mla	r1, r8, r1, r2
 800f2b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f2ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2bc:	e7b5      	b.n	800f22a <_strtod_l+0x2ba>
 800f2be:	2a6e      	cmp	r2, #110	@ 0x6e
 800f2c0:	e7da      	b.n	800f278 <_strtod_l+0x308>
 800f2c2:	498c      	ldr	r1, [pc, #560]	@ (800f4f4 <_strtod_l+0x584>)
 800f2c4:	a819      	add	r0, sp, #100	@ 0x64
 800f2c6:	f001 fb83 	bl	80109d0 <__match>
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	f43f aea4 	beq.w	800f018 <_strtod_l+0xa8>
 800f2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2d2:	4989      	ldr	r1, [pc, #548]	@ (800f4f8 <_strtod_l+0x588>)
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	a819      	add	r0, sp, #100	@ 0x64
 800f2d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f2da:	f001 fb79 	bl	80109d0 <__match>
 800f2de:	b910      	cbnz	r0, 800f2e6 <_strtod_l+0x376>
 800f2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800f2e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f508 <_strtod_l+0x598>
 800f2ea:	f04f 0a00 	mov.w	sl, #0
 800f2ee:	e678      	b.n	800efe2 <_strtod_l+0x72>
 800f2f0:	4882      	ldr	r0, [pc, #520]	@ (800f4fc <_strtod_l+0x58c>)
 800f2f2:	f001 f8a9 	bl	8010448 <nan>
 800f2f6:	ec5b ab10 	vmov	sl, fp, d0
 800f2fa:	e672      	b.n	800efe2 <_strtod_l+0x72>
 800f2fc:	eba8 0309 	sub.w	r3, r8, r9
 800f300:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f302:	9309      	str	r3, [sp, #36]	@ 0x24
 800f304:	2f00      	cmp	r7, #0
 800f306:	bf08      	it	eq
 800f308:	462f      	moveq	r7, r5
 800f30a:	2d10      	cmp	r5, #16
 800f30c:	462c      	mov	r4, r5
 800f30e:	bfa8      	it	ge
 800f310:	2410      	movge	r4, #16
 800f312:	f7f1 f917 	bl	8000544 <__aeabi_ui2d>
 800f316:	2d09      	cmp	r5, #9
 800f318:	4682      	mov	sl, r0
 800f31a:	468b      	mov	fp, r1
 800f31c:	dc13      	bgt.n	800f346 <_strtod_l+0x3d6>
 800f31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f320:	2b00      	cmp	r3, #0
 800f322:	f43f ae5e 	beq.w	800efe2 <_strtod_l+0x72>
 800f326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f328:	dd78      	ble.n	800f41c <_strtod_l+0x4ac>
 800f32a:	2b16      	cmp	r3, #22
 800f32c:	dc5f      	bgt.n	800f3ee <_strtod_l+0x47e>
 800f32e:	4974      	ldr	r1, [pc, #464]	@ (800f500 <_strtod_l+0x590>)
 800f330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f338:	4652      	mov	r2, sl
 800f33a:	465b      	mov	r3, fp
 800f33c:	f7f1 f97c 	bl	8000638 <__aeabi_dmul>
 800f340:	4682      	mov	sl, r0
 800f342:	468b      	mov	fp, r1
 800f344:	e64d      	b.n	800efe2 <_strtod_l+0x72>
 800f346:	4b6e      	ldr	r3, [pc, #440]	@ (800f500 <_strtod_l+0x590>)
 800f348:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f34c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f350:	f7f1 f972 	bl	8000638 <__aeabi_dmul>
 800f354:	4682      	mov	sl, r0
 800f356:	9808      	ldr	r0, [sp, #32]
 800f358:	468b      	mov	fp, r1
 800f35a:	f7f1 f8f3 	bl	8000544 <__aeabi_ui2d>
 800f35e:	4602      	mov	r2, r0
 800f360:	460b      	mov	r3, r1
 800f362:	4650      	mov	r0, sl
 800f364:	4659      	mov	r1, fp
 800f366:	f7f0 ffb1 	bl	80002cc <__adddf3>
 800f36a:	2d0f      	cmp	r5, #15
 800f36c:	4682      	mov	sl, r0
 800f36e:	468b      	mov	fp, r1
 800f370:	ddd5      	ble.n	800f31e <_strtod_l+0x3ae>
 800f372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f374:	1b2c      	subs	r4, r5, r4
 800f376:	441c      	add	r4, r3
 800f378:	2c00      	cmp	r4, #0
 800f37a:	f340 8096 	ble.w	800f4aa <_strtod_l+0x53a>
 800f37e:	f014 030f 	ands.w	r3, r4, #15
 800f382:	d00a      	beq.n	800f39a <_strtod_l+0x42a>
 800f384:	495e      	ldr	r1, [pc, #376]	@ (800f500 <_strtod_l+0x590>)
 800f386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f38a:	4652      	mov	r2, sl
 800f38c:	465b      	mov	r3, fp
 800f38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f392:	f7f1 f951 	bl	8000638 <__aeabi_dmul>
 800f396:	4682      	mov	sl, r0
 800f398:	468b      	mov	fp, r1
 800f39a:	f034 040f 	bics.w	r4, r4, #15
 800f39e:	d073      	beq.n	800f488 <_strtod_l+0x518>
 800f3a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f3a4:	dd48      	ble.n	800f438 <_strtod_l+0x4c8>
 800f3a6:	2400      	movs	r4, #0
 800f3a8:	46a0      	mov	r8, r4
 800f3aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800f3ac:	46a1      	mov	r9, r4
 800f3ae:	9a05      	ldr	r2, [sp, #20]
 800f3b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f508 <_strtod_l+0x598>
 800f3b4:	2322      	movs	r3, #34	@ 0x22
 800f3b6:	6013      	str	r3, [r2, #0]
 800f3b8:	f04f 0a00 	mov.w	sl, #0
 800f3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f43f ae0f 	beq.w	800efe2 <_strtod_l+0x72>
 800f3c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3c6:	9805      	ldr	r0, [sp, #20]
 800f3c8:	f7ff f940 	bl	800e64c <_Bfree>
 800f3cc:	9805      	ldr	r0, [sp, #20]
 800f3ce:	4649      	mov	r1, r9
 800f3d0:	f7ff f93c 	bl	800e64c <_Bfree>
 800f3d4:	9805      	ldr	r0, [sp, #20]
 800f3d6:	4641      	mov	r1, r8
 800f3d8:	f7ff f938 	bl	800e64c <_Bfree>
 800f3dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f3de:	9805      	ldr	r0, [sp, #20]
 800f3e0:	f7ff f934 	bl	800e64c <_Bfree>
 800f3e4:	9805      	ldr	r0, [sp, #20]
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	f7ff f930 	bl	800e64c <_Bfree>
 800f3ec:	e5f9      	b.n	800efe2 <_strtod_l+0x72>
 800f3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	dbbc      	blt.n	800f372 <_strtod_l+0x402>
 800f3f8:	4c41      	ldr	r4, [pc, #260]	@ (800f500 <_strtod_l+0x590>)
 800f3fa:	f1c5 050f 	rsb	r5, r5, #15
 800f3fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f402:	4652      	mov	r2, sl
 800f404:	465b      	mov	r3, fp
 800f406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f40a:	f7f1 f915 	bl	8000638 <__aeabi_dmul>
 800f40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f410:	1b5d      	subs	r5, r3, r5
 800f412:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f416:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f41a:	e78f      	b.n	800f33c <_strtod_l+0x3cc>
 800f41c:	3316      	adds	r3, #22
 800f41e:	dba8      	blt.n	800f372 <_strtod_l+0x402>
 800f420:	4b37      	ldr	r3, [pc, #220]	@ (800f500 <_strtod_l+0x590>)
 800f422:	eba9 0808 	sub.w	r8, r9, r8
 800f426:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f42a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f42e:	4650      	mov	r0, sl
 800f430:	4659      	mov	r1, fp
 800f432:	f7f1 fa2b 	bl	800088c <__aeabi_ddiv>
 800f436:	e783      	b.n	800f340 <_strtod_l+0x3d0>
 800f438:	4b32      	ldr	r3, [pc, #200]	@ (800f504 <_strtod_l+0x594>)
 800f43a:	9308      	str	r3, [sp, #32]
 800f43c:	2300      	movs	r3, #0
 800f43e:	1124      	asrs	r4, r4, #4
 800f440:	4650      	mov	r0, sl
 800f442:	4659      	mov	r1, fp
 800f444:	461e      	mov	r6, r3
 800f446:	2c01      	cmp	r4, #1
 800f448:	dc21      	bgt.n	800f48e <_strtod_l+0x51e>
 800f44a:	b10b      	cbz	r3, 800f450 <_strtod_l+0x4e0>
 800f44c:	4682      	mov	sl, r0
 800f44e:	468b      	mov	fp, r1
 800f450:	492c      	ldr	r1, [pc, #176]	@ (800f504 <_strtod_l+0x594>)
 800f452:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f456:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f45a:	4652      	mov	r2, sl
 800f45c:	465b      	mov	r3, fp
 800f45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f462:	f7f1 f8e9 	bl	8000638 <__aeabi_dmul>
 800f466:	4b28      	ldr	r3, [pc, #160]	@ (800f508 <_strtod_l+0x598>)
 800f468:	460a      	mov	r2, r1
 800f46a:	400b      	ands	r3, r1
 800f46c:	4927      	ldr	r1, [pc, #156]	@ (800f50c <_strtod_l+0x59c>)
 800f46e:	428b      	cmp	r3, r1
 800f470:	4682      	mov	sl, r0
 800f472:	d898      	bhi.n	800f3a6 <_strtod_l+0x436>
 800f474:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f478:	428b      	cmp	r3, r1
 800f47a:	bf86      	itte	hi
 800f47c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f510 <_strtod_l+0x5a0>
 800f480:	f04f 3aff 	movhi.w	sl, #4294967295
 800f484:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f488:	2300      	movs	r3, #0
 800f48a:	9308      	str	r3, [sp, #32]
 800f48c:	e07a      	b.n	800f584 <_strtod_l+0x614>
 800f48e:	07e2      	lsls	r2, r4, #31
 800f490:	d505      	bpl.n	800f49e <_strtod_l+0x52e>
 800f492:	9b08      	ldr	r3, [sp, #32]
 800f494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f498:	f7f1 f8ce 	bl	8000638 <__aeabi_dmul>
 800f49c:	2301      	movs	r3, #1
 800f49e:	9a08      	ldr	r2, [sp, #32]
 800f4a0:	3208      	adds	r2, #8
 800f4a2:	3601      	adds	r6, #1
 800f4a4:	1064      	asrs	r4, r4, #1
 800f4a6:	9208      	str	r2, [sp, #32]
 800f4a8:	e7cd      	b.n	800f446 <_strtod_l+0x4d6>
 800f4aa:	d0ed      	beq.n	800f488 <_strtod_l+0x518>
 800f4ac:	4264      	negs	r4, r4
 800f4ae:	f014 020f 	ands.w	r2, r4, #15
 800f4b2:	d00a      	beq.n	800f4ca <_strtod_l+0x55a>
 800f4b4:	4b12      	ldr	r3, [pc, #72]	@ (800f500 <_strtod_l+0x590>)
 800f4b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4ba:	4650      	mov	r0, sl
 800f4bc:	4659      	mov	r1, fp
 800f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c2:	f7f1 f9e3 	bl	800088c <__aeabi_ddiv>
 800f4c6:	4682      	mov	sl, r0
 800f4c8:	468b      	mov	fp, r1
 800f4ca:	1124      	asrs	r4, r4, #4
 800f4cc:	d0dc      	beq.n	800f488 <_strtod_l+0x518>
 800f4ce:	2c1f      	cmp	r4, #31
 800f4d0:	dd20      	ble.n	800f514 <_strtod_l+0x5a4>
 800f4d2:	2400      	movs	r4, #0
 800f4d4:	46a0      	mov	r8, r4
 800f4d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800f4d8:	46a1      	mov	r9, r4
 800f4da:	9a05      	ldr	r2, [sp, #20]
 800f4dc:	2322      	movs	r3, #34	@ 0x22
 800f4de:	f04f 0a00 	mov.w	sl, #0
 800f4e2:	f04f 0b00 	mov.w	fp, #0
 800f4e6:	6013      	str	r3, [r2, #0]
 800f4e8:	e768      	b.n	800f3bc <_strtod_l+0x44c>
 800f4ea:	bf00      	nop
 800f4ec:	08011e91 	.word	0x08011e91
 800f4f0:	080120a4 	.word	0x080120a4
 800f4f4:	08011e89 	.word	0x08011e89
 800f4f8:	08011ec0 	.word	0x08011ec0
 800f4fc:	0801224d 	.word	0x0801224d
 800f500:	08011fd8 	.word	0x08011fd8
 800f504:	08011fb0 	.word	0x08011fb0
 800f508:	7ff00000 	.word	0x7ff00000
 800f50c:	7ca00000 	.word	0x7ca00000
 800f510:	7fefffff 	.word	0x7fefffff
 800f514:	f014 0310 	ands.w	r3, r4, #16
 800f518:	bf18      	it	ne
 800f51a:	236a      	movne	r3, #106	@ 0x6a
 800f51c:	4ea9      	ldr	r6, [pc, #676]	@ (800f7c4 <_strtod_l+0x854>)
 800f51e:	9308      	str	r3, [sp, #32]
 800f520:	4650      	mov	r0, sl
 800f522:	4659      	mov	r1, fp
 800f524:	2300      	movs	r3, #0
 800f526:	07e2      	lsls	r2, r4, #31
 800f528:	d504      	bpl.n	800f534 <_strtod_l+0x5c4>
 800f52a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f52e:	f7f1 f883 	bl	8000638 <__aeabi_dmul>
 800f532:	2301      	movs	r3, #1
 800f534:	1064      	asrs	r4, r4, #1
 800f536:	f106 0608 	add.w	r6, r6, #8
 800f53a:	d1f4      	bne.n	800f526 <_strtod_l+0x5b6>
 800f53c:	b10b      	cbz	r3, 800f542 <_strtod_l+0x5d2>
 800f53e:	4682      	mov	sl, r0
 800f540:	468b      	mov	fp, r1
 800f542:	9b08      	ldr	r3, [sp, #32]
 800f544:	b1b3      	cbz	r3, 800f574 <_strtod_l+0x604>
 800f546:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f54a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f54e:	2b00      	cmp	r3, #0
 800f550:	4659      	mov	r1, fp
 800f552:	dd0f      	ble.n	800f574 <_strtod_l+0x604>
 800f554:	2b1f      	cmp	r3, #31
 800f556:	dd55      	ble.n	800f604 <_strtod_l+0x694>
 800f558:	2b34      	cmp	r3, #52	@ 0x34
 800f55a:	bfde      	ittt	le
 800f55c:	f04f 33ff 	movle.w	r3, #4294967295
 800f560:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f564:	4093      	lslle	r3, r2
 800f566:	f04f 0a00 	mov.w	sl, #0
 800f56a:	bfcc      	ite	gt
 800f56c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f570:	ea03 0b01 	andle.w	fp, r3, r1
 800f574:	2200      	movs	r2, #0
 800f576:	2300      	movs	r3, #0
 800f578:	4650      	mov	r0, sl
 800f57a:	4659      	mov	r1, fp
 800f57c:	f7f1 fac4 	bl	8000b08 <__aeabi_dcmpeq>
 800f580:	2800      	cmp	r0, #0
 800f582:	d1a6      	bne.n	800f4d2 <_strtod_l+0x562>
 800f584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f58a:	9805      	ldr	r0, [sp, #20]
 800f58c:	462b      	mov	r3, r5
 800f58e:	463a      	mov	r2, r7
 800f590:	f7ff f8c4 	bl	800e71c <__s2b>
 800f594:	900a      	str	r0, [sp, #40]	@ 0x28
 800f596:	2800      	cmp	r0, #0
 800f598:	f43f af05 	beq.w	800f3a6 <_strtod_l+0x436>
 800f59c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f59e:	2a00      	cmp	r2, #0
 800f5a0:	eba9 0308 	sub.w	r3, r9, r8
 800f5a4:	bfa8      	it	ge
 800f5a6:	2300      	movge	r3, #0
 800f5a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800f5aa:	2400      	movs	r4, #0
 800f5ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f5b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800f5b2:	46a0      	mov	r8, r4
 800f5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5b6:	9805      	ldr	r0, [sp, #20]
 800f5b8:	6859      	ldr	r1, [r3, #4]
 800f5ba:	f7ff f807 	bl	800e5cc <_Balloc>
 800f5be:	4681      	mov	r9, r0
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	f43f aef4 	beq.w	800f3ae <_strtod_l+0x43e>
 800f5c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5c8:	691a      	ldr	r2, [r3, #16]
 800f5ca:	3202      	adds	r2, #2
 800f5cc:	f103 010c 	add.w	r1, r3, #12
 800f5d0:	0092      	lsls	r2, r2, #2
 800f5d2:	300c      	adds	r0, #12
 800f5d4:	f000 ff28 	bl	8010428 <memcpy>
 800f5d8:	ec4b ab10 	vmov	d0, sl, fp
 800f5dc:	9805      	ldr	r0, [sp, #20]
 800f5de:	aa1c      	add	r2, sp, #112	@ 0x70
 800f5e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800f5e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f5e6:	f7ff fbd5 	bl	800ed94 <__d2b>
 800f5ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f43f aede 	beq.w	800f3ae <_strtod_l+0x43e>
 800f5f2:	9805      	ldr	r0, [sp, #20]
 800f5f4:	2101      	movs	r1, #1
 800f5f6:	f7ff f927 	bl	800e848 <__i2b>
 800f5fa:	4680      	mov	r8, r0
 800f5fc:	b948      	cbnz	r0, 800f612 <_strtod_l+0x6a2>
 800f5fe:	f04f 0800 	mov.w	r8, #0
 800f602:	e6d4      	b.n	800f3ae <_strtod_l+0x43e>
 800f604:	f04f 32ff 	mov.w	r2, #4294967295
 800f608:	fa02 f303 	lsl.w	r3, r2, r3
 800f60c:	ea03 0a0a 	and.w	sl, r3, sl
 800f610:	e7b0      	b.n	800f574 <_strtod_l+0x604>
 800f612:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f614:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f616:	2d00      	cmp	r5, #0
 800f618:	bfab      	itete	ge
 800f61a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f61c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f61e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f620:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f622:	bfac      	ite	ge
 800f624:	18ef      	addge	r7, r5, r3
 800f626:	1b5e      	sublt	r6, r3, r5
 800f628:	9b08      	ldr	r3, [sp, #32]
 800f62a:	1aed      	subs	r5, r5, r3
 800f62c:	4415      	add	r5, r2
 800f62e:	4b66      	ldr	r3, [pc, #408]	@ (800f7c8 <_strtod_l+0x858>)
 800f630:	3d01      	subs	r5, #1
 800f632:	429d      	cmp	r5, r3
 800f634:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f638:	da50      	bge.n	800f6dc <_strtod_l+0x76c>
 800f63a:	1b5b      	subs	r3, r3, r5
 800f63c:	2b1f      	cmp	r3, #31
 800f63e:	eba2 0203 	sub.w	r2, r2, r3
 800f642:	f04f 0101 	mov.w	r1, #1
 800f646:	dc3d      	bgt.n	800f6c4 <_strtod_l+0x754>
 800f648:	fa01 f303 	lsl.w	r3, r1, r3
 800f64c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f64e:	2300      	movs	r3, #0
 800f650:	9310      	str	r3, [sp, #64]	@ 0x40
 800f652:	18bd      	adds	r5, r7, r2
 800f654:	9b08      	ldr	r3, [sp, #32]
 800f656:	42af      	cmp	r7, r5
 800f658:	4416      	add	r6, r2
 800f65a:	441e      	add	r6, r3
 800f65c:	463b      	mov	r3, r7
 800f65e:	bfa8      	it	ge
 800f660:	462b      	movge	r3, r5
 800f662:	42b3      	cmp	r3, r6
 800f664:	bfa8      	it	ge
 800f666:	4633      	movge	r3, r6
 800f668:	2b00      	cmp	r3, #0
 800f66a:	bfc2      	ittt	gt
 800f66c:	1aed      	subgt	r5, r5, r3
 800f66e:	1af6      	subgt	r6, r6, r3
 800f670:	1aff      	subgt	r7, r7, r3
 800f672:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f674:	2b00      	cmp	r3, #0
 800f676:	dd16      	ble.n	800f6a6 <_strtod_l+0x736>
 800f678:	4641      	mov	r1, r8
 800f67a:	9805      	ldr	r0, [sp, #20]
 800f67c:	461a      	mov	r2, r3
 800f67e:	f7ff f9a3 	bl	800e9c8 <__pow5mult>
 800f682:	4680      	mov	r8, r0
 800f684:	2800      	cmp	r0, #0
 800f686:	d0ba      	beq.n	800f5fe <_strtod_l+0x68e>
 800f688:	4601      	mov	r1, r0
 800f68a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f68c:	9805      	ldr	r0, [sp, #20]
 800f68e:	f7ff f8f1 	bl	800e874 <__multiply>
 800f692:	900e      	str	r0, [sp, #56]	@ 0x38
 800f694:	2800      	cmp	r0, #0
 800f696:	f43f ae8a 	beq.w	800f3ae <_strtod_l+0x43e>
 800f69a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f69c:	9805      	ldr	r0, [sp, #20]
 800f69e:	f7fe ffd5 	bl	800e64c <_Bfree>
 800f6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6a6:	2d00      	cmp	r5, #0
 800f6a8:	dc1d      	bgt.n	800f6e6 <_strtod_l+0x776>
 800f6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	dd23      	ble.n	800f6f8 <_strtod_l+0x788>
 800f6b0:	4649      	mov	r1, r9
 800f6b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f6b4:	9805      	ldr	r0, [sp, #20]
 800f6b6:	f7ff f987 	bl	800e9c8 <__pow5mult>
 800f6ba:	4681      	mov	r9, r0
 800f6bc:	b9e0      	cbnz	r0, 800f6f8 <_strtod_l+0x788>
 800f6be:	f04f 0900 	mov.w	r9, #0
 800f6c2:	e674      	b.n	800f3ae <_strtod_l+0x43e>
 800f6c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f6c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f6cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f6d0:	35e2      	adds	r5, #226	@ 0xe2
 800f6d2:	fa01 f305 	lsl.w	r3, r1, r5
 800f6d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f6d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f6da:	e7ba      	b.n	800f652 <_strtod_l+0x6e2>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	9310      	str	r3, [sp, #64]	@ 0x40
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f6e4:	e7b5      	b.n	800f652 <_strtod_l+0x6e2>
 800f6e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6e8:	9805      	ldr	r0, [sp, #20]
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	f7ff f9c6 	bl	800ea7c <__lshift>
 800f6f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d1d9      	bne.n	800f6aa <_strtod_l+0x73a>
 800f6f6:	e65a      	b.n	800f3ae <_strtod_l+0x43e>
 800f6f8:	2e00      	cmp	r6, #0
 800f6fa:	dd07      	ble.n	800f70c <_strtod_l+0x79c>
 800f6fc:	4649      	mov	r1, r9
 800f6fe:	9805      	ldr	r0, [sp, #20]
 800f700:	4632      	mov	r2, r6
 800f702:	f7ff f9bb 	bl	800ea7c <__lshift>
 800f706:	4681      	mov	r9, r0
 800f708:	2800      	cmp	r0, #0
 800f70a:	d0d8      	beq.n	800f6be <_strtod_l+0x74e>
 800f70c:	2f00      	cmp	r7, #0
 800f70e:	dd08      	ble.n	800f722 <_strtod_l+0x7b2>
 800f710:	4641      	mov	r1, r8
 800f712:	9805      	ldr	r0, [sp, #20]
 800f714:	463a      	mov	r2, r7
 800f716:	f7ff f9b1 	bl	800ea7c <__lshift>
 800f71a:	4680      	mov	r8, r0
 800f71c:	2800      	cmp	r0, #0
 800f71e:	f43f ae46 	beq.w	800f3ae <_strtod_l+0x43e>
 800f722:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f724:	9805      	ldr	r0, [sp, #20]
 800f726:	464a      	mov	r2, r9
 800f728:	f7ff fa30 	bl	800eb8c <__mdiff>
 800f72c:	4604      	mov	r4, r0
 800f72e:	2800      	cmp	r0, #0
 800f730:	f43f ae3d 	beq.w	800f3ae <_strtod_l+0x43e>
 800f734:	68c3      	ldr	r3, [r0, #12]
 800f736:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f738:	2300      	movs	r3, #0
 800f73a:	60c3      	str	r3, [r0, #12]
 800f73c:	4641      	mov	r1, r8
 800f73e:	f7ff fa09 	bl	800eb54 <__mcmp>
 800f742:	2800      	cmp	r0, #0
 800f744:	da46      	bge.n	800f7d4 <_strtod_l+0x864>
 800f746:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f748:	ea53 030a 	orrs.w	r3, r3, sl
 800f74c:	d16c      	bne.n	800f828 <_strtod_l+0x8b8>
 800f74e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f752:	2b00      	cmp	r3, #0
 800f754:	d168      	bne.n	800f828 <_strtod_l+0x8b8>
 800f756:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f75a:	0d1b      	lsrs	r3, r3, #20
 800f75c:	051b      	lsls	r3, r3, #20
 800f75e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f762:	d961      	bls.n	800f828 <_strtod_l+0x8b8>
 800f764:	6963      	ldr	r3, [r4, #20]
 800f766:	b913      	cbnz	r3, 800f76e <_strtod_l+0x7fe>
 800f768:	6923      	ldr	r3, [r4, #16]
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	dd5c      	ble.n	800f828 <_strtod_l+0x8b8>
 800f76e:	4621      	mov	r1, r4
 800f770:	2201      	movs	r2, #1
 800f772:	9805      	ldr	r0, [sp, #20]
 800f774:	f7ff f982 	bl	800ea7c <__lshift>
 800f778:	4641      	mov	r1, r8
 800f77a:	4604      	mov	r4, r0
 800f77c:	f7ff f9ea 	bl	800eb54 <__mcmp>
 800f780:	2800      	cmp	r0, #0
 800f782:	dd51      	ble.n	800f828 <_strtod_l+0x8b8>
 800f784:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f788:	9a08      	ldr	r2, [sp, #32]
 800f78a:	0d1b      	lsrs	r3, r3, #20
 800f78c:	051b      	lsls	r3, r3, #20
 800f78e:	2a00      	cmp	r2, #0
 800f790:	d06b      	beq.n	800f86a <_strtod_l+0x8fa>
 800f792:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f796:	d868      	bhi.n	800f86a <_strtod_l+0x8fa>
 800f798:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f79c:	f67f ae9d 	bls.w	800f4da <_strtod_l+0x56a>
 800f7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f7cc <_strtod_l+0x85c>)
 800f7a2:	4650      	mov	r0, sl
 800f7a4:	4659      	mov	r1, fp
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f7f0 ff46 	bl	8000638 <__aeabi_dmul>
 800f7ac:	4b08      	ldr	r3, [pc, #32]	@ (800f7d0 <_strtod_l+0x860>)
 800f7ae:	400b      	ands	r3, r1
 800f7b0:	4682      	mov	sl, r0
 800f7b2:	468b      	mov	fp, r1
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f47f ae05 	bne.w	800f3c4 <_strtod_l+0x454>
 800f7ba:	9a05      	ldr	r2, [sp, #20]
 800f7bc:	2322      	movs	r3, #34	@ 0x22
 800f7be:	6013      	str	r3, [r2, #0]
 800f7c0:	e600      	b.n	800f3c4 <_strtod_l+0x454>
 800f7c2:	bf00      	nop
 800f7c4:	080120d0 	.word	0x080120d0
 800f7c8:	fffffc02 	.word	0xfffffc02
 800f7cc:	39500000 	.word	0x39500000
 800f7d0:	7ff00000 	.word	0x7ff00000
 800f7d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f7d8:	d165      	bne.n	800f8a6 <_strtod_l+0x936>
 800f7da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f7dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7e0:	b35a      	cbz	r2, 800f83a <_strtod_l+0x8ca>
 800f7e2:	4a9f      	ldr	r2, [pc, #636]	@ (800fa60 <_strtod_l+0xaf0>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d12b      	bne.n	800f840 <_strtod_l+0x8d0>
 800f7e8:	9b08      	ldr	r3, [sp, #32]
 800f7ea:	4651      	mov	r1, sl
 800f7ec:	b303      	cbz	r3, 800f830 <_strtod_l+0x8c0>
 800f7ee:	4b9d      	ldr	r3, [pc, #628]	@ (800fa64 <_strtod_l+0xaf4>)
 800f7f0:	465a      	mov	r2, fp
 800f7f2:	4013      	ands	r3, r2
 800f7f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fc:	d81b      	bhi.n	800f836 <_strtod_l+0x8c6>
 800f7fe:	0d1b      	lsrs	r3, r3, #20
 800f800:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f804:	fa02 f303 	lsl.w	r3, r2, r3
 800f808:	4299      	cmp	r1, r3
 800f80a:	d119      	bne.n	800f840 <_strtod_l+0x8d0>
 800f80c:	4b96      	ldr	r3, [pc, #600]	@ (800fa68 <_strtod_l+0xaf8>)
 800f80e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f810:	429a      	cmp	r2, r3
 800f812:	d102      	bne.n	800f81a <_strtod_l+0x8aa>
 800f814:	3101      	adds	r1, #1
 800f816:	f43f adca 	beq.w	800f3ae <_strtod_l+0x43e>
 800f81a:	4b92      	ldr	r3, [pc, #584]	@ (800fa64 <_strtod_l+0xaf4>)
 800f81c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f81e:	401a      	ands	r2, r3
 800f820:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f824:	f04f 0a00 	mov.w	sl, #0
 800f828:	9b08      	ldr	r3, [sp, #32]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d1b8      	bne.n	800f7a0 <_strtod_l+0x830>
 800f82e:	e5c9      	b.n	800f3c4 <_strtod_l+0x454>
 800f830:	f04f 33ff 	mov.w	r3, #4294967295
 800f834:	e7e8      	b.n	800f808 <_strtod_l+0x898>
 800f836:	4613      	mov	r3, r2
 800f838:	e7e6      	b.n	800f808 <_strtod_l+0x898>
 800f83a:	ea53 030a 	orrs.w	r3, r3, sl
 800f83e:	d0a1      	beq.n	800f784 <_strtod_l+0x814>
 800f840:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f842:	b1db      	cbz	r3, 800f87c <_strtod_l+0x90c>
 800f844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f846:	4213      	tst	r3, r2
 800f848:	d0ee      	beq.n	800f828 <_strtod_l+0x8b8>
 800f84a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f84c:	9a08      	ldr	r2, [sp, #32]
 800f84e:	4650      	mov	r0, sl
 800f850:	4659      	mov	r1, fp
 800f852:	b1bb      	cbz	r3, 800f884 <_strtod_l+0x914>
 800f854:	f7ff fb6c 	bl	800ef30 <sulp>
 800f858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f85c:	ec53 2b10 	vmov	r2, r3, d0
 800f860:	f7f0 fd34 	bl	80002cc <__adddf3>
 800f864:	4682      	mov	sl, r0
 800f866:	468b      	mov	fp, r1
 800f868:	e7de      	b.n	800f828 <_strtod_l+0x8b8>
 800f86a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f86e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f872:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f876:	f04f 3aff 	mov.w	sl, #4294967295
 800f87a:	e7d5      	b.n	800f828 <_strtod_l+0x8b8>
 800f87c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f87e:	ea13 0f0a 	tst.w	r3, sl
 800f882:	e7e1      	b.n	800f848 <_strtod_l+0x8d8>
 800f884:	f7ff fb54 	bl	800ef30 <sulp>
 800f888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f88c:	ec53 2b10 	vmov	r2, r3, d0
 800f890:	f7f0 fd1a 	bl	80002c8 <__aeabi_dsub>
 800f894:	2200      	movs	r2, #0
 800f896:	2300      	movs	r3, #0
 800f898:	4682      	mov	sl, r0
 800f89a:	468b      	mov	fp, r1
 800f89c:	f7f1 f934 	bl	8000b08 <__aeabi_dcmpeq>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d0c1      	beq.n	800f828 <_strtod_l+0x8b8>
 800f8a4:	e619      	b.n	800f4da <_strtod_l+0x56a>
 800f8a6:	4641      	mov	r1, r8
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f7ff facb 	bl	800ee44 <__ratio>
 800f8ae:	ec57 6b10 	vmov	r6, r7, d0
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	4639      	mov	r1, r7
 800f8bc:	f7f1 f938 	bl	8000b30 <__aeabi_dcmple>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d06f      	beq.n	800f9a4 <_strtod_l+0xa34>
 800f8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d17a      	bne.n	800f9c0 <_strtod_l+0xa50>
 800f8ca:	f1ba 0f00 	cmp.w	sl, #0
 800f8ce:	d158      	bne.n	800f982 <_strtod_l+0xa12>
 800f8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d15a      	bne.n	800f990 <_strtod_l+0xa20>
 800f8da:	4b64      	ldr	r3, [pc, #400]	@ (800fa6c <_strtod_l+0xafc>)
 800f8dc:	2200      	movs	r2, #0
 800f8de:	4630      	mov	r0, r6
 800f8e0:	4639      	mov	r1, r7
 800f8e2:	f7f1 f91b 	bl	8000b1c <__aeabi_dcmplt>
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d159      	bne.n	800f99e <_strtod_l+0xa2e>
 800f8ea:	4630      	mov	r0, r6
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	4b60      	ldr	r3, [pc, #384]	@ (800fa70 <_strtod_l+0xb00>)
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f7f0 fea1 	bl	8000638 <__aeabi_dmul>
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	460f      	mov	r7, r1
 800f8fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f8fe:	9606      	str	r6, [sp, #24]
 800f900:	9307      	str	r3, [sp, #28]
 800f902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f906:	4d57      	ldr	r5, [pc, #348]	@ (800fa64 <_strtod_l+0xaf4>)
 800f908:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f90e:	401d      	ands	r5, r3
 800f910:	4b58      	ldr	r3, [pc, #352]	@ (800fa74 <_strtod_l+0xb04>)
 800f912:	429d      	cmp	r5, r3
 800f914:	f040 80b2 	bne.w	800fa7c <_strtod_l+0xb0c>
 800f918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f91a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f91e:	ec4b ab10 	vmov	d0, sl, fp
 800f922:	f7ff f9c7 	bl	800ecb4 <__ulp>
 800f926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f92a:	ec51 0b10 	vmov	r0, r1, d0
 800f92e:	f7f0 fe83 	bl	8000638 <__aeabi_dmul>
 800f932:	4652      	mov	r2, sl
 800f934:	465b      	mov	r3, fp
 800f936:	f7f0 fcc9 	bl	80002cc <__adddf3>
 800f93a:	460b      	mov	r3, r1
 800f93c:	4949      	ldr	r1, [pc, #292]	@ (800fa64 <_strtod_l+0xaf4>)
 800f93e:	4a4e      	ldr	r2, [pc, #312]	@ (800fa78 <_strtod_l+0xb08>)
 800f940:	4019      	ands	r1, r3
 800f942:	4291      	cmp	r1, r2
 800f944:	4682      	mov	sl, r0
 800f946:	d942      	bls.n	800f9ce <_strtod_l+0xa5e>
 800f948:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f94a:	4b47      	ldr	r3, [pc, #284]	@ (800fa68 <_strtod_l+0xaf8>)
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d103      	bne.n	800f958 <_strtod_l+0x9e8>
 800f950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f952:	3301      	adds	r3, #1
 800f954:	f43f ad2b 	beq.w	800f3ae <_strtod_l+0x43e>
 800f958:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fa68 <_strtod_l+0xaf8>
 800f95c:	f04f 3aff 	mov.w	sl, #4294967295
 800f960:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f962:	9805      	ldr	r0, [sp, #20]
 800f964:	f7fe fe72 	bl	800e64c <_Bfree>
 800f968:	9805      	ldr	r0, [sp, #20]
 800f96a:	4649      	mov	r1, r9
 800f96c:	f7fe fe6e 	bl	800e64c <_Bfree>
 800f970:	9805      	ldr	r0, [sp, #20]
 800f972:	4641      	mov	r1, r8
 800f974:	f7fe fe6a 	bl	800e64c <_Bfree>
 800f978:	9805      	ldr	r0, [sp, #20]
 800f97a:	4621      	mov	r1, r4
 800f97c:	f7fe fe66 	bl	800e64c <_Bfree>
 800f980:	e618      	b.n	800f5b4 <_strtod_l+0x644>
 800f982:	f1ba 0f01 	cmp.w	sl, #1
 800f986:	d103      	bne.n	800f990 <_strtod_l+0xa20>
 800f988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f43f ada5 	beq.w	800f4da <_strtod_l+0x56a>
 800f990:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fa40 <_strtod_l+0xad0>
 800f994:	4f35      	ldr	r7, [pc, #212]	@ (800fa6c <_strtod_l+0xafc>)
 800f996:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f99a:	2600      	movs	r6, #0
 800f99c:	e7b1      	b.n	800f902 <_strtod_l+0x992>
 800f99e:	4f34      	ldr	r7, [pc, #208]	@ (800fa70 <_strtod_l+0xb00>)
 800f9a0:	2600      	movs	r6, #0
 800f9a2:	e7aa      	b.n	800f8fa <_strtod_l+0x98a>
 800f9a4:	4b32      	ldr	r3, [pc, #200]	@ (800fa70 <_strtod_l+0xb00>)
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	4639      	mov	r1, r7
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	f7f0 fe44 	bl	8000638 <__aeabi_dmul>
 800f9b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	460f      	mov	r7, r1
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d09f      	beq.n	800f8fa <_strtod_l+0x98a>
 800f9ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f9be:	e7a0      	b.n	800f902 <_strtod_l+0x992>
 800f9c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fa48 <_strtod_l+0xad8>
 800f9c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f9c8:	ec57 6b17 	vmov	r6, r7, d7
 800f9cc:	e799      	b.n	800f902 <_strtod_l+0x992>
 800f9ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f9d2:	9b08      	ldr	r3, [sp, #32]
 800f9d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1c1      	bne.n	800f960 <_strtod_l+0x9f0>
 800f9dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f9e0:	0d1b      	lsrs	r3, r3, #20
 800f9e2:	051b      	lsls	r3, r3, #20
 800f9e4:	429d      	cmp	r5, r3
 800f9e6:	d1bb      	bne.n	800f960 <_strtod_l+0x9f0>
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	f7f1 f9d4 	bl	8000d98 <__aeabi_d2lz>
 800f9f0:	f7f0 fdf4 	bl	80005dc <__aeabi_l2d>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	460b      	mov	r3, r1
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	4639      	mov	r1, r7
 800f9fc:	f7f0 fc64 	bl	80002c8 <__aeabi_dsub>
 800fa00:	460b      	mov	r3, r1
 800fa02:	4602      	mov	r2, r0
 800fa04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fa08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fa0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa0e:	ea46 060a 	orr.w	r6, r6, sl
 800fa12:	431e      	orrs	r6, r3
 800fa14:	d06f      	beq.n	800faf6 <_strtod_l+0xb86>
 800fa16:	a30e      	add	r3, pc, #56	@ (adr r3, 800fa50 <_strtod_l+0xae0>)
 800fa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1c:	f7f1 f87e 	bl	8000b1c <__aeabi_dcmplt>
 800fa20:	2800      	cmp	r0, #0
 800fa22:	f47f accf 	bne.w	800f3c4 <_strtod_l+0x454>
 800fa26:	a30c      	add	r3, pc, #48	@ (adr r3, 800fa58 <_strtod_l+0xae8>)
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa30:	f7f1 f892 	bl	8000b58 <__aeabi_dcmpgt>
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d093      	beq.n	800f960 <_strtod_l+0x9f0>
 800fa38:	e4c4      	b.n	800f3c4 <_strtod_l+0x454>
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w
 800fa40:	00000000 	.word	0x00000000
 800fa44:	bff00000 	.word	0xbff00000
 800fa48:	00000000 	.word	0x00000000
 800fa4c:	3ff00000 	.word	0x3ff00000
 800fa50:	94a03595 	.word	0x94a03595
 800fa54:	3fdfffff 	.word	0x3fdfffff
 800fa58:	35afe535 	.word	0x35afe535
 800fa5c:	3fe00000 	.word	0x3fe00000
 800fa60:	000fffff 	.word	0x000fffff
 800fa64:	7ff00000 	.word	0x7ff00000
 800fa68:	7fefffff 	.word	0x7fefffff
 800fa6c:	3ff00000 	.word	0x3ff00000
 800fa70:	3fe00000 	.word	0x3fe00000
 800fa74:	7fe00000 	.word	0x7fe00000
 800fa78:	7c9fffff 	.word	0x7c9fffff
 800fa7c:	9b08      	ldr	r3, [sp, #32]
 800fa7e:	b323      	cbz	r3, 800faca <_strtod_l+0xb5a>
 800fa80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fa84:	d821      	bhi.n	800faca <_strtod_l+0xb5a>
 800fa86:	a328      	add	r3, pc, #160	@ (adr r3, 800fb28 <_strtod_l+0xbb8>)
 800fa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	4639      	mov	r1, r7
 800fa90:	f7f1 f84e 	bl	8000b30 <__aeabi_dcmple>
 800fa94:	b1a0      	cbz	r0, 800fac0 <_strtod_l+0xb50>
 800fa96:	4639      	mov	r1, r7
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f7f1 f8a5 	bl	8000be8 <__aeabi_d2uiz>
 800fa9e:	2801      	cmp	r0, #1
 800faa0:	bf38      	it	cc
 800faa2:	2001      	movcc	r0, #1
 800faa4:	f7f0 fd4e 	bl	8000544 <__aeabi_ui2d>
 800faa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faaa:	4606      	mov	r6, r0
 800faac:	460f      	mov	r7, r1
 800faae:	b9fb      	cbnz	r3, 800faf0 <_strtod_l+0xb80>
 800fab0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fab4:	9014      	str	r0, [sp, #80]	@ 0x50
 800fab6:	9315      	str	r3, [sp, #84]	@ 0x54
 800fab8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fabc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fac0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fac2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fac6:	1b5b      	subs	r3, r3, r5
 800fac8:	9311      	str	r3, [sp, #68]	@ 0x44
 800faca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800face:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fad2:	f7ff f8ef 	bl	800ecb4 <__ulp>
 800fad6:	4650      	mov	r0, sl
 800fad8:	ec53 2b10 	vmov	r2, r3, d0
 800fadc:	4659      	mov	r1, fp
 800fade:	f7f0 fdab 	bl	8000638 <__aeabi_dmul>
 800fae2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fae6:	f7f0 fbf1 	bl	80002cc <__adddf3>
 800faea:	4682      	mov	sl, r0
 800faec:	468b      	mov	fp, r1
 800faee:	e770      	b.n	800f9d2 <_strtod_l+0xa62>
 800faf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800faf4:	e7e0      	b.n	800fab8 <_strtod_l+0xb48>
 800faf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800fb30 <_strtod_l+0xbc0>)
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	f7f1 f80e 	bl	8000b1c <__aeabi_dcmplt>
 800fb00:	e798      	b.n	800fa34 <_strtod_l+0xac4>
 800fb02:	2300      	movs	r3, #0
 800fb04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fb06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fb08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb0a:	6013      	str	r3, [r2, #0]
 800fb0c:	f7ff ba6d 	b.w	800efea <_strtod_l+0x7a>
 800fb10:	2a65      	cmp	r2, #101	@ 0x65
 800fb12:	f43f ab66 	beq.w	800f1e2 <_strtod_l+0x272>
 800fb16:	2a45      	cmp	r2, #69	@ 0x45
 800fb18:	f43f ab63 	beq.w	800f1e2 <_strtod_l+0x272>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	f7ff bb9e 	b.w	800f25e <_strtod_l+0x2ee>
 800fb22:	bf00      	nop
 800fb24:	f3af 8000 	nop.w
 800fb28:	ffc00000 	.word	0xffc00000
 800fb2c:	41dfffff 	.word	0x41dfffff
 800fb30:	94a03595 	.word	0x94a03595
 800fb34:	3fcfffff 	.word	0x3fcfffff

0800fb38 <_strtod_r>:
 800fb38:	4b01      	ldr	r3, [pc, #4]	@ (800fb40 <_strtod_r+0x8>)
 800fb3a:	f7ff ba19 	b.w	800ef70 <_strtod_l>
 800fb3e:	bf00      	nop
 800fb40:	200000d4 	.word	0x200000d4

0800fb44 <_strtol_l.constprop.0>:
 800fb44:	2b24      	cmp	r3, #36	@ 0x24
 800fb46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb4a:	4686      	mov	lr, r0
 800fb4c:	4690      	mov	r8, r2
 800fb4e:	d801      	bhi.n	800fb54 <_strtol_l.constprop.0+0x10>
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d106      	bne.n	800fb62 <_strtol_l.constprop.0+0x1e>
 800fb54:	f7fd fe70 	bl	800d838 <__errno>
 800fb58:	2316      	movs	r3, #22
 800fb5a:	6003      	str	r3, [r0, #0]
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb62:	4834      	ldr	r0, [pc, #208]	@ (800fc34 <_strtol_l.constprop.0+0xf0>)
 800fb64:	460d      	mov	r5, r1
 800fb66:	462a      	mov	r2, r5
 800fb68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb6c:	5d06      	ldrb	r6, [r0, r4]
 800fb6e:	f016 0608 	ands.w	r6, r6, #8
 800fb72:	d1f8      	bne.n	800fb66 <_strtol_l.constprop.0+0x22>
 800fb74:	2c2d      	cmp	r4, #45	@ 0x2d
 800fb76:	d12d      	bne.n	800fbd4 <_strtol_l.constprop.0+0x90>
 800fb78:	782c      	ldrb	r4, [r5, #0]
 800fb7a:	2601      	movs	r6, #1
 800fb7c:	1c95      	adds	r5, r2, #2
 800fb7e:	f033 0210 	bics.w	r2, r3, #16
 800fb82:	d109      	bne.n	800fb98 <_strtol_l.constprop.0+0x54>
 800fb84:	2c30      	cmp	r4, #48	@ 0x30
 800fb86:	d12a      	bne.n	800fbde <_strtol_l.constprop.0+0x9a>
 800fb88:	782a      	ldrb	r2, [r5, #0]
 800fb8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fb8e:	2a58      	cmp	r2, #88	@ 0x58
 800fb90:	d125      	bne.n	800fbde <_strtol_l.constprop.0+0x9a>
 800fb92:	786c      	ldrb	r4, [r5, #1]
 800fb94:	2310      	movs	r3, #16
 800fb96:	3502      	adds	r5, #2
 800fb98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fb9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fba0:	2200      	movs	r2, #0
 800fba2:	fbbc f9f3 	udiv	r9, ip, r3
 800fba6:	4610      	mov	r0, r2
 800fba8:	fb03 ca19 	mls	sl, r3, r9, ip
 800fbac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fbb0:	2f09      	cmp	r7, #9
 800fbb2:	d81b      	bhi.n	800fbec <_strtol_l.constprop.0+0xa8>
 800fbb4:	463c      	mov	r4, r7
 800fbb6:	42a3      	cmp	r3, r4
 800fbb8:	dd27      	ble.n	800fc0a <_strtol_l.constprop.0+0xc6>
 800fbba:	1c57      	adds	r7, r2, #1
 800fbbc:	d007      	beq.n	800fbce <_strtol_l.constprop.0+0x8a>
 800fbbe:	4581      	cmp	r9, r0
 800fbc0:	d320      	bcc.n	800fc04 <_strtol_l.constprop.0+0xc0>
 800fbc2:	d101      	bne.n	800fbc8 <_strtol_l.constprop.0+0x84>
 800fbc4:	45a2      	cmp	sl, r4
 800fbc6:	db1d      	blt.n	800fc04 <_strtol_l.constprop.0+0xc0>
 800fbc8:	fb00 4003 	mla	r0, r0, r3, r4
 800fbcc:	2201      	movs	r2, #1
 800fbce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbd2:	e7eb      	b.n	800fbac <_strtol_l.constprop.0+0x68>
 800fbd4:	2c2b      	cmp	r4, #43	@ 0x2b
 800fbd6:	bf04      	itt	eq
 800fbd8:	782c      	ldrbeq	r4, [r5, #0]
 800fbda:	1c95      	addeq	r5, r2, #2
 800fbdc:	e7cf      	b.n	800fb7e <_strtol_l.constprop.0+0x3a>
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d1da      	bne.n	800fb98 <_strtol_l.constprop.0+0x54>
 800fbe2:	2c30      	cmp	r4, #48	@ 0x30
 800fbe4:	bf0c      	ite	eq
 800fbe6:	2308      	moveq	r3, #8
 800fbe8:	230a      	movne	r3, #10
 800fbea:	e7d5      	b.n	800fb98 <_strtol_l.constprop.0+0x54>
 800fbec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fbf0:	2f19      	cmp	r7, #25
 800fbf2:	d801      	bhi.n	800fbf8 <_strtol_l.constprop.0+0xb4>
 800fbf4:	3c37      	subs	r4, #55	@ 0x37
 800fbf6:	e7de      	b.n	800fbb6 <_strtol_l.constprop.0+0x72>
 800fbf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fbfc:	2f19      	cmp	r7, #25
 800fbfe:	d804      	bhi.n	800fc0a <_strtol_l.constprop.0+0xc6>
 800fc00:	3c57      	subs	r4, #87	@ 0x57
 800fc02:	e7d8      	b.n	800fbb6 <_strtol_l.constprop.0+0x72>
 800fc04:	f04f 32ff 	mov.w	r2, #4294967295
 800fc08:	e7e1      	b.n	800fbce <_strtol_l.constprop.0+0x8a>
 800fc0a:	1c53      	adds	r3, r2, #1
 800fc0c:	d108      	bne.n	800fc20 <_strtol_l.constprop.0+0xdc>
 800fc0e:	2322      	movs	r3, #34	@ 0x22
 800fc10:	f8ce 3000 	str.w	r3, [lr]
 800fc14:	4660      	mov	r0, ip
 800fc16:	f1b8 0f00 	cmp.w	r8, #0
 800fc1a:	d0a0      	beq.n	800fb5e <_strtol_l.constprop.0+0x1a>
 800fc1c:	1e69      	subs	r1, r5, #1
 800fc1e:	e006      	b.n	800fc2e <_strtol_l.constprop.0+0xea>
 800fc20:	b106      	cbz	r6, 800fc24 <_strtol_l.constprop.0+0xe0>
 800fc22:	4240      	negs	r0, r0
 800fc24:	f1b8 0f00 	cmp.w	r8, #0
 800fc28:	d099      	beq.n	800fb5e <_strtol_l.constprop.0+0x1a>
 800fc2a:	2a00      	cmp	r2, #0
 800fc2c:	d1f6      	bne.n	800fc1c <_strtol_l.constprop.0+0xd8>
 800fc2e:	f8c8 1000 	str.w	r1, [r8]
 800fc32:	e794      	b.n	800fb5e <_strtol_l.constprop.0+0x1a>
 800fc34:	080120f9 	.word	0x080120f9

0800fc38 <_strtol_r>:
 800fc38:	f7ff bf84 	b.w	800fb44 <_strtol_l.constprop.0>

0800fc3c <__ssputs_r>:
 800fc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc40:	688e      	ldr	r6, [r1, #8]
 800fc42:	461f      	mov	r7, r3
 800fc44:	42be      	cmp	r6, r7
 800fc46:	680b      	ldr	r3, [r1, #0]
 800fc48:	4682      	mov	sl, r0
 800fc4a:	460c      	mov	r4, r1
 800fc4c:	4690      	mov	r8, r2
 800fc4e:	d82d      	bhi.n	800fcac <__ssputs_r+0x70>
 800fc50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc58:	d026      	beq.n	800fca8 <__ssputs_r+0x6c>
 800fc5a:	6965      	ldr	r5, [r4, #20]
 800fc5c:	6909      	ldr	r1, [r1, #16]
 800fc5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc62:	eba3 0901 	sub.w	r9, r3, r1
 800fc66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc6a:	1c7b      	adds	r3, r7, #1
 800fc6c:	444b      	add	r3, r9
 800fc6e:	106d      	asrs	r5, r5, #1
 800fc70:	429d      	cmp	r5, r3
 800fc72:	bf38      	it	cc
 800fc74:	461d      	movcc	r5, r3
 800fc76:	0553      	lsls	r3, r2, #21
 800fc78:	d527      	bpl.n	800fcca <__ssputs_r+0x8e>
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	f7fc fc24 	bl	800c4c8 <_malloc_r>
 800fc80:	4606      	mov	r6, r0
 800fc82:	b360      	cbz	r0, 800fcde <__ssputs_r+0xa2>
 800fc84:	6921      	ldr	r1, [r4, #16]
 800fc86:	464a      	mov	r2, r9
 800fc88:	f000 fbce 	bl	8010428 <memcpy>
 800fc8c:	89a3      	ldrh	r3, [r4, #12]
 800fc8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc96:	81a3      	strh	r3, [r4, #12]
 800fc98:	6126      	str	r6, [r4, #16]
 800fc9a:	6165      	str	r5, [r4, #20]
 800fc9c:	444e      	add	r6, r9
 800fc9e:	eba5 0509 	sub.w	r5, r5, r9
 800fca2:	6026      	str	r6, [r4, #0]
 800fca4:	60a5      	str	r5, [r4, #8]
 800fca6:	463e      	mov	r6, r7
 800fca8:	42be      	cmp	r6, r7
 800fcaa:	d900      	bls.n	800fcae <__ssputs_r+0x72>
 800fcac:	463e      	mov	r6, r7
 800fcae:	6820      	ldr	r0, [r4, #0]
 800fcb0:	4632      	mov	r2, r6
 800fcb2:	4641      	mov	r1, r8
 800fcb4:	f000 fb6a 	bl	801038c <memmove>
 800fcb8:	68a3      	ldr	r3, [r4, #8]
 800fcba:	1b9b      	subs	r3, r3, r6
 800fcbc:	60a3      	str	r3, [r4, #8]
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	4433      	add	r3, r6
 800fcc2:	6023      	str	r3, [r4, #0]
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcca:	462a      	mov	r2, r5
 800fccc:	f000 ff41 	bl	8010b52 <_realloc_r>
 800fcd0:	4606      	mov	r6, r0
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d1e0      	bne.n	800fc98 <__ssputs_r+0x5c>
 800fcd6:	6921      	ldr	r1, [r4, #16]
 800fcd8:	4650      	mov	r0, sl
 800fcda:	f7fe fc2d 	bl	800e538 <_free_r>
 800fcde:	230c      	movs	r3, #12
 800fce0:	f8ca 3000 	str.w	r3, [sl]
 800fce4:	89a3      	ldrh	r3, [r4, #12]
 800fce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcea:	81a3      	strh	r3, [r4, #12]
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	e7e9      	b.n	800fcc6 <__ssputs_r+0x8a>
	...

0800fcf4 <_svfiprintf_r>:
 800fcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf8:	4698      	mov	r8, r3
 800fcfa:	898b      	ldrh	r3, [r1, #12]
 800fcfc:	061b      	lsls	r3, r3, #24
 800fcfe:	b09d      	sub	sp, #116	@ 0x74
 800fd00:	4607      	mov	r7, r0
 800fd02:	460d      	mov	r5, r1
 800fd04:	4614      	mov	r4, r2
 800fd06:	d510      	bpl.n	800fd2a <_svfiprintf_r+0x36>
 800fd08:	690b      	ldr	r3, [r1, #16]
 800fd0a:	b973      	cbnz	r3, 800fd2a <_svfiprintf_r+0x36>
 800fd0c:	2140      	movs	r1, #64	@ 0x40
 800fd0e:	f7fc fbdb 	bl	800c4c8 <_malloc_r>
 800fd12:	6028      	str	r0, [r5, #0]
 800fd14:	6128      	str	r0, [r5, #16]
 800fd16:	b930      	cbnz	r0, 800fd26 <_svfiprintf_r+0x32>
 800fd18:	230c      	movs	r3, #12
 800fd1a:	603b      	str	r3, [r7, #0]
 800fd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd20:	b01d      	add	sp, #116	@ 0x74
 800fd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd26:	2340      	movs	r3, #64	@ 0x40
 800fd28:	616b      	str	r3, [r5, #20]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd2e:	2320      	movs	r3, #32
 800fd30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd34:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd38:	2330      	movs	r3, #48	@ 0x30
 800fd3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fed8 <_svfiprintf_r+0x1e4>
 800fd3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd42:	f04f 0901 	mov.w	r9, #1
 800fd46:	4623      	mov	r3, r4
 800fd48:	469a      	mov	sl, r3
 800fd4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd4e:	b10a      	cbz	r2, 800fd54 <_svfiprintf_r+0x60>
 800fd50:	2a25      	cmp	r2, #37	@ 0x25
 800fd52:	d1f9      	bne.n	800fd48 <_svfiprintf_r+0x54>
 800fd54:	ebba 0b04 	subs.w	fp, sl, r4
 800fd58:	d00b      	beq.n	800fd72 <_svfiprintf_r+0x7e>
 800fd5a:	465b      	mov	r3, fp
 800fd5c:	4622      	mov	r2, r4
 800fd5e:	4629      	mov	r1, r5
 800fd60:	4638      	mov	r0, r7
 800fd62:	f7ff ff6b 	bl	800fc3c <__ssputs_r>
 800fd66:	3001      	adds	r0, #1
 800fd68:	f000 80a7 	beq.w	800feba <_svfiprintf_r+0x1c6>
 800fd6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd6e:	445a      	add	r2, fp
 800fd70:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd72:	f89a 3000 	ldrb.w	r3, [sl]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	f000 809f 	beq.w	800feba <_svfiprintf_r+0x1c6>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd86:	f10a 0a01 	add.w	sl, sl, #1
 800fd8a:	9304      	str	r3, [sp, #16]
 800fd8c:	9307      	str	r3, [sp, #28]
 800fd8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd92:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd94:	4654      	mov	r4, sl
 800fd96:	2205      	movs	r2, #5
 800fd98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd9c:	484e      	ldr	r0, [pc, #312]	@ (800fed8 <_svfiprintf_r+0x1e4>)
 800fd9e:	f7f0 fa37 	bl	8000210 <memchr>
 800fda2:	9a04      	ldr	r2, [sp, #16]
 800fda4:	b9d8      	cbnz	r0, 800fdde <_svfiprintf_r+0xea>
 800fda6:	06d0      	lsls	r0, r2, #27
 800fda8:	bf44      	itt	mi
 800fdaa:	2320      	movmi	r3, #32
 800fdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdb0:	0711      	lsls	r1, r2, #28
 800fdb2:	bf44      	itt	mi
 800fdb4:	232b      	movmi	r3, #43	@ 0x2b
 800fdb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fdba:	f89a 3000 	ldrb.w	r3, [sl]
 800fdbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdc0:	d015      	beq.n	800fdee <_svfiprintf_r+0xfa>
 800fdc2:	9a07      	ldr	r2, [sp, #28]
 800fdc4:	4654      	mov	r4, sl
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f04f 0c0a 	mov.w	ip, #10
 800fdcc:	4621      	mov	r1, r4
 800fdce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdd2:	3b30      	subs	r3, #48	@ 0x30
 800fdd4:	2b09      	cmp	r3, #9
 800fdd6:	d94b      	bls.n	800fe70 <_svfiprintf_r+0x17c>
 800fdd8:	b1b0      	cbz	r0, 800fe08 <_svfiprintf_r+0x114>
 800fdda:	9207      	str	r2, [sp, #28]
 800fddc:	e014      	b.n	800fe08 <_svfiprintf_r+0x114>
 800fdde:	eba0 0308 	sub.w	r3, r0, r8
 800fde2:	fa09 f303 	lsl.w	r3, r9, r3
 800fde6:	4313      	orrs	r3, r2
 800fde8:	9304      	str	r3, [sp, #16]
 800fdea:	46a2      	mov	sl, r4
 800fdec:	e7d2      	b.n	800fd94 <_svfiprintf_r+0xa0>
 800fdee:	9b03      	ldr	r3, [sp, #12]
 800fdf0:	1d19      	adds	r1, r3, #4
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	9103      	str	r1, [sp, #12]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	bfbb      	ittet	lt
 800fdfa:	425b      	neglt	r3, r3
 800fdfc:	f042 0202 	orrlt.w	r2, r2, #2
 800fe00:	9307      	strge	r3, [sp, #28]
 800fe02:	9307      	strlt	r3, [sp, #28]
 800fe04:	bfb8      	it	lt
 800fe06:	9204      	strlt	r2, [sp, #16]
 800fe08:	7823      	ldrb	r3, [r4, #0]
 800fe0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe0c:	d10a      	bne.n	800fe24 <_svfiprintf_r+0x130>
 800fe0e:	7863      	ldrb	r3, [r4, #1]
 800fe10:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe12:	d132      	bne.n	800fe7a <_svfiprintf_r+0x186>
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	1d1a      	adds	r2, r3, #4
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	9203      	str	r2, [sp, #12]
 800fe1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe20:	3402      	adds	r4, #2
 800fe22:	9305      	str	r3, [sp, #20]
 800fe24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fee8 <_svfiprintf_r+0x1f4>
 800fe28:	7821      	ldrb	r1, [r4, #0]
 800fe2a:	2203      	movs	r2, #3
 800fe2c:	4650      	mov	r0, sl
 800fe2e:	f7f0 f9ef 	bl	8000210 <memchr>
 800fe32:	b138      	cbz	r0, 800fe44 <_svfiprintf_r+0x150>
 800fe34:	9b04      	ldr	r3, [sp, #16]
 800fe36:	eba0 000a 	sub.w	r0, r0, sl
 800fe3a:	2240      	movs	r2, #64	@ 0x40
 800fe3c:	4082      	lsls	r2, r0
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	3401      	adds	r4, #1
 800fe42:	9304      	str	r3, [sp, #16]
 800fe44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe48:	4824      	ldr	r0, [pc, #144]	@ (800fedc <_svfiprintf_r+0x1e8>)
 800fe4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe4e:	2206      	movs	r2, #6
 800fe50:	f7f0 f9de 	bl	8000210 <memchr>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	d036      	beq.n	800fec6 <_svfiprintf_r+0x1d2>
 800fe58:	4b21      	ldr	r3, [pc, #132]	@ (800fee0 <_svfiprintf_r+0x1ec>)
 800fe5a:	bb1b      	cbnz	r3, 800fea4 <_svfiprintf_r+0x1b0>
 800fe5c:	9b03      	ldr	r3, [sp, #12]
 800fe5e:	3307      	adds	r3, #7
 800fe60:	f023 0307 	bic.w	r3, r3, #7
 800fe64:	3308      	adds	r3, #8
 800fe66:	9303      	str	r3, [sp, #12]
 800fe68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe6a:	4433      	add	r3, r6
 800fe6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe6e:	e76a      	b.n	800fd46 <_svfiprintf_r+0x52>
 800fe70:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe74:	460c      	mov	r4, r1
 800fe76:	2001      	movs	r0, #1
 800fe78:	e7a8      	b.n	800fdcc <_svfiprintf_r+0xd8>
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	3401      	adds	r4, #1
 800fe7e:	9305      	str	r3, [sp, #20]
 800fe80:	4619      	mov	r1, r3
 800fe82:	f04f 0c0a 	mov.w	ip, #10
 800fe86:	4620      	mov	r0, r4
 800fe88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe8c:	3a30      	subs	r2, #48	@ 0x30
 800fe8e:	2a09      	cmp	r2, #9
 800fe90:	d903      	bls.n	800fe9a <_svfiprintf_r+0x1a6>
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d0c6      	beq.n	800fe24 <_svfiprintf_r+0x130>
 800fe96:	9105      	str	r1, [sp, #20]
 800fe98:	e7c4      	b.n	800fe24 <_svfiprintf_r+0x130>
 800fe9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe9e:	4604      	mov	r4, r0
 800fea0:	2301      	movs	r3, #1
 800fea2:	e7f0      	b.n	800fe86 <_svfiprintf_r+0x192>
 800fea4:	ab03      	add	r3, sp, #12
 800fea6:	9300      	str	r3, [sp, #0]
 800fea8:	462a      	mov	r2, r5
 800feaa:	4b0e      	ldr	r3, [pc, #56]	@ (800fee4 <_svfiprintf_r+0x1f0>)
 800feac:	a904      	add	r1, sp, #16
 800feae:	4638      	mov	r0, r7
 800feb0:	f7fc fc36 	bl	800c720 <_printf_float>
 800feb4:	1c42      	adds	r2, r0, #1
 800feb6:	4606      	mov	r6, r0
 800feb8:	d1d6      	bne.n	800fe68 <_svfiprintf_r+0x174>
 800feba:	89ab      	ldrh	r3, [r5, #12]
 800febc:	065b      	lsls	r3, r3, #25
 800febe:	f53f af2d 	bmi.w	800fd1c <_svfiprintf_r+0x28>
 800fec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fec4:	e72c      	b.n	800fd20 <_svfiprintf_r+0x2c>
 800fec6:	ab03      	add	r3, sp, #12
 800fec8:	9300      	str	r3, [sp, #0]
 800feca:	462a      	mov	r2, r5
 800fecc:	4b05      	ldr	r3, [pc, #20]	@ (800fee4 <_svfiprintf_r+0x1f0>)
 800fece:	a904      	add	r1, sp, #16
 800fed0:	4638      	mov	r0, r7
 800fed2:	f7fc febd 	bl	800cc50 <_printf_i>
 800fed6:	e7ed      	b.n	800feb4 <_svfiprintf_r+0x1c0>
 800fed8:	080121f9 	.word	0x080121f9
 800fedc:	08012203 	.word	0x08012203
 800fee0:	0800c721 	.word	0x0800c721
 800fee4:	0800fc3d 	.word	0x0800fc3d
 800fee8:	080121ff 	.word	0x080121ff

0800feec <__sfputc_r>:
 800feec:	6893      	ldr	r3, [r2, #8]
 800feee:	3b01      	subs	r3, #1
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	b410      	push	{r4}
 800fef4:	6093      	str	r3, [r2, #8]
 800fef6:	da08      	bge.n	800ff0a <__sfputc_r+0x1e>
 800fef8:	6994      	ldr	r4, [r2, #24]
 800fefa:	42a3      	cmp	r3, r4
 800fefc:	db01      	blt.n	800ff02 <__sfputc_r+0x16>
 800fefe:	290a      	cmp	r1, #10
 800ff00:	d103      	bne.n	800ff0a <__sfputc_r+0x1e>
 800ff02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff06:	f7fd bba0 	b.w	800d64a <__swbuf_r>
 800ff0a:	6813      	ldr	r3, [r2, #0]
 800ff0c:	1c58      	adds	r0, r3, #1
 800ff0e:	6010      	str	r0, [r2, #0]
 800ff10:	7019      	strb	r1, [r3, #0]
 800ff12:	4608      	mov	r0, r1
 800ff14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff18:	4770      	bx	lr

0800ff1a <__sfputs_r>:
 800ff1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	460f      	mov	r7, r1
 800ff20:	4614      	mov	r4, r2
 800ff22:	18d5      	adds	r5, r2, r3
 800ff24:	42ac      	cmp	r4, r5
 800ff26:	d101      	bne.n	800ff2c <__sfputs_r+0x12>
 800ff28:	2000      	movs	r0, #0
 800ff2a:	e007      	b.n	800ff3c <__sfputs_r+0x22>
 800ff2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff30:	463a      	mov	r2, r7
 800ff32:	4630      	mov	r0, r6
 800ff34:	f7ff ffda 	bl	800feec <__sfputc_r>
 800ff38:	1c43      	adds	r3, r0, #1
 800ff3a:	d1f3      	bne.n	800ff24 <__sfputs_r+0xa>
 800ff3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff40 <_vfiprintf_r>:
 800ff40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff44:	460d      	mov	r5, r1
 800ff46:	b09d      	sub	sp, #116	@ 0x74
 800ff48:	4614      	mov	r4, r2
 800ff4a:	4698      	mov	r8, r3
 800ff4c:	4606      	mov	r6, r0
 800ff4e:	b118      	cbz	r0, 800ff58 <_vfiprintf_r+0x18>
 800ff50:	6a03      	ldr	r3, [r0, #32]
 800ff52:	b90b      	cbnz	r3, 800ff58 <_vfiprintf_r+0x18>
 800ff54:	f7fd fa3c 	bl	800d3d0 <__sinit>
 800ff58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff5a:	07d9      	lsls	r1, r3, #31
 800ff5c:	d405      	bmi.n	800ff6a <_vfiprintf_r+0x2a>
 800ff5e:	89ab      	ldrh	r3, [r5, #12]
 800ff60:	059a      	lsls	r2, r3, #22
 800ff62:	d402      	bmi.n	800ff6a <_vfiprintf_r+0x2a>
 800ff64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff66:	f7fd fc92 	bl	800d88e <__retarget_lock_acquire_recursive>
 800ff6a:	89ab      	ldrh	r3, [r5, #12]
 800ff6c:	071b      	lsls	r3, r3, #28
 800ff6e:	d501      	bpl.n	800ff74 <_vfiprintf_r+0x34>
 800ff70:	692b      	ldr	r3, [r5, #16]
 800ff72:	b99b      	cbnz	r3, 800ff9c <_vfiprintf_r+0x5c>
 800ff74:	4629      	mov	r1, r5
 800ff76:	4630      	mov	r0, r6
 800ff78:	f7fd fba6 	bl	800d6c8 <__swsetup_r>
 800ff7c:	b170      	cbz	r0, 800ff9c <_vfiprintf_r+0x5c>
 800ff7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff80:	07dc      	lsls	r4, r3, #31
 800ff82:	d504      	bpl.n	800ff8e <_vfiprintf_r+0x4e>
 800ff84:	f04f 30ff 	mov.w	r0, #4294967295
 800ff88:	b01d      	add	sp, #116	@ 0x74
 800ff8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8e:	89ab      	ldrh	r3, [r5, #12]
 800ff90:	0598      	lsls	r0, r3, #22
 800ff92:	d4f7      	bmi.n	800ff84 <_vfiprintf_r+0x44>
 800ff94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff96:	f7fd fc7b 	bl	800d890 <__retarget_lock_release_recursive>
 800ff9a:	e7f3      	b.n	800ff84 <_vfiprintf_r+0x44>
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffa0:	2320      	movs	r3, #32
 800ffa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ffa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffaa:	2330      	movs	r3, #48	@ 0x30
 800ffac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801015c <_vfiprintf_r+0x21c>
 800ffb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ffb4:	f04f 0901 	mov.w	r9, #1
 800ffb8:	4623      	mov	r3, r4
 800ffba:	469a      	mov	sl, r3
 800ffbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffc0:	b10a      	cbz	r2, 800ffc6 <_vfiprintf_r+0x86>
 800ffc2:	2a25      	cmp	r2, #37	@ 0x25
 800ffc4:	d1f9      	bne.n	800ffba <_vfiprintf_r+0x7a>
 800ffc6:	ebba 0b04 	subs.w	fp, sl, r4
 800ffca:	d00b      	beq.n	800ffe4 <_vfiprintf_r+0xa4>
 800ffcc:	465b      	mov	r3, fp
 800ffce:	4622      	mov	r2, r4
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f7ff ffa1 	bl	800ff1a <__sfputs_r>
 800ffd8:	3001      	adds	r0, #1
 800ffda:	f000 80a7 	beq.w	801012c <_vfiprintf_r+0x1ec>
 800ffde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ffe0:	445a      	add	r2, fp
 800ffe2:	9209      	str	r2, [sp, #36]	@ 0x24
 800ffe4:	f89a 3000 	ldrb.w	r3, [sl]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	f000 809f 	beq.w	801012c <_vfiprintf_r+0x1ec>
 800ffee:	2300      	movs	r3, #0
 800fff0:	f04f 32ff 	mov.w	r2, #4294967295
 800fff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fff8:	f10a 0a01 	add.w	sl, sl, #1
 800fffc:	9304      	str	r3, [sp, #16]
 800fffe:	9307      	str	r3, [sp, #28]
 8010000:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010004:	931a      	str	r3, [sp, #104]	@ 0x68
 8010006:	4654      	mov	r4, sl
 8010008:	2205      	movs	r2, #5
 801000a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000e:	4853      	ldr	r0, [pc, #332]	@ (801015c <_vfiprintf_r+0x21c>)
 8010010:	f7f0 f8fe 	bl	8000210 <memchr>
 8010014:	9a04      	ldr	r2, [sp, #16]
 8010016:	b9d8      	cbnz	r0, 8010050 <_vfiprintf_r+0x110>
 8010018:	06d1      	lsls	r1, r2, #27
 801001a:	bf44      	itt	mi
 801001c:	2320      	movmi	r3, #32
 801001e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010022:	0713      	lsls	r3, r2, #28
 8010024:	bf44      	itt	mi
 8010026:	232b      	movmi	r3, #43	@ 0x2b
 8010028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801002c:	f89a 3000 	ldrb.w	r3, [sl]
 8010030:	2b2a      	cmp	r3, #42	@ 0x2a
 8010032:	d015      	beq.n	8010060 <_vfiprintf_r+0x120>
 8010034:	9a07      	ldr	r2, [sp, #28]
 8010036:	4654      	mov	r4, sl
 8010038:	2000      	movs	r0, #0
 801003a:	f04f 0c0a 	mov.w	ip, #10
 801003e:	4621      	mov	r1, r4
 8010040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010044:	3b30      	subs	r3, #48	@ 0x30
 8010046:	2b09      	cmp	r3, #9
 8010048:	d94b      	bls.n	80100e2 <_vfiprintf_r+0x1a2>
 801004a:	b1b0      	cbz	r0, 801007a <_vfiprintf_r+0x13a>
 801004c:	9207      	str	r2, [sp, #28]
 801004e:	e014      	b.n	801007a <_vfiprintf_r+0x13a>
 8010050:	eba0 0308 	sub.w	r3, r0, r8
 8010054:	fa09 f303 	lsl.w	r3, r9, r3
 8010058:	4313      	orrs	r3, r2
 801005a:	9304      	str	r3, [sp, #16]
 801005c:	46a2      	mov	sl, r4
 801005e:	e7d2      	b.n	8010006 <_vfiprintf_r+0xc6>
 8010060:	9b03      	ldr	r3, [sp, #12]
 8010062:	1d19      	adds	r1, r3, #4
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	9103      	str	r1, [sp, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	bfbb      	ittet	lt
 801006c:	425b      	neglt	r3, r3
 801006e:	f042 0202 	orrlt.w	r2, r2, #2
 8010072:	9307      	strge	r3, [sp, #28]
 8010074:	9307      	strlt	r3, [sp, #28]
 8010076:	bfb8      	it	lt
 8010078:	9204      	strlt	r2, [sp, #16]
 801007a:	7823      	ldrb	r3, [r4, #0]
 801007c:	2b2e      	cmp	r3, #46	@ 0x2e
 801007e:	d10a      	bne.n	8010096 <_vfiprintf_r+0x156>
 8010080:	7863      	ldrb	r3, [r4, #1]
 8010082:	2b2a      	cmp	r3, #42	@ 0x2a
 8010084:	d132      	bne.n	80100ec <_vfiprintf_r+0x1ac>
 8010086:	9b03      	ldr	r3, [sp, #12]
 8010088:	1d1a      	adds	r2, r3, #4
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	9203      	str	r2, [sp, #12]
 801008e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010092:	3402      	adds	r4, #2
 8010094:	9305      	str	r3, [sp, #20]
 8010096:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801016c <_vfiprintf_r+0x22c>
 801009a:	7821      	ldrb	r1, [r4, #0]
 801009c:	2203      	movs	r2, #3
 801009e:	4650      	mov	r0, sl
 80100a0:	f7f0 f8b6 	bl	8000210 <memchr>
 80100a4:	b138      	cbz	r0, 80100b6 <_vfiprintf_r+0x176>
 80100a6:	9b04      	ldr	r3, [sp, #16]
 80100a8:	eba0 000a 	sub.w	r0, r0, sl
 80100ac:	2240      	movs	r2, #64	@ 0x40
 80100ae:	4082      	lsls	r2, r0
 80100b0:	4313      	orrs	r3, r2
 80100b2:	3401      	adds	r4, #1
 80100b4:	9304      	str	r3, [sp, #16]
 80100b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ba:	4829      	ldr	r0, [pc, #164]	@ (8010160 <_vfiprintf_r+0x220>)
 80100bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80100c0:	2206      	movs	r2, #6
 80100c2:	f7f0 f8a5 	bl	8000210 <memchr>
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d03f      	beq.n	801014a <_vfiprintf_r+0x20a>
 80100ca:	4b26      	ldr	r3, [pc, #152]	@ (8010164 <_vfiprintf_r+0x224>)
 80100cc:	bb1b      	cbnz	r3, 8010116 <_vfiprintf_r+0x1d6>
 80100ce:	9b03      	ldr	r3, [sp, #12]
 80100d0:	3307      	adds	r3, #7
 80100d2:	f023 0307 	bic.w	r3, r3, #7
 80100d6:	3308      	adds	r3, #8
 80100d8:	9303      	str	r3, [sp, #12]
 80100da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100dc:	443b      	add	r3, r7
 80100de:	9309      	str	r3, [sp, #36]	@ 0x24
 80100e0:	e76a      	b.n	800ffb8 <_vfiprintf_r+0x78>
 80100e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80100e6:	460c      	mov	r4, r1
 80100e8:	2001      	movs	r0, #1
 80100ea:	e7a8      	b.n	801003e <_vfiprintf_r+0xfe>
 80100ec:	2300      	movs	r3, #0
 80100ee:	3401      	adds	r4, #1
 80100f0:	9305      	str	r3, [sp, #20]
 80100f2:	4619      	mov	r1, r3
 80100f4:	f04f 0c0a 	mov.w	ip, #10
 80100f8:	4620      	mov	r0, r4
 80100fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100fe:	3a30      	subs	r2, #48	@ 0x30
 8010100:	2a09      	cmp	r2, #9
 8010102:	d903      	bls.n	801010c <_vfiprintf_r+0x1cc>
 8010104:	2b00      	cmp	r3, #0
 8010106:	d0c6      	beq.n	8010096 <_vfiprintf_r+0x156>
 8010108:	9105      	str	r1, [sp, #20]
 801010a:	e7c4      	b.n	8010096 <_vfiprintf_r+0x156>
 801010c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010110:	4604      	mov	r4, r0
 8010112:	2301      	movs	r3, #1
 8010114:	e7f0      	b.n	80100f8 <_vfiprintf_r+0x1b8>
 8010116:	ab03      	add	r3, sp, #12
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	462a      	mov	r2, r5
 801011c:	4b12      	ldr	r3, [pc, #72]	@ (8010168 <_vfiprintf_r+0x228>)
 801011e:	a904      	add	r1, sp, #16
 8010120:	4630      	mov	r0, r6
 8010122:	f7fc fafd 	bl	800c720 <_printf_float>
 8010126:	4607      	mov	r7, r0
 8010128:	1c78      	adds	r0, r7, #1
 801012a:	d1d6      	bne.n	80100da <_vfiprintf_r+0x19a>
 801012c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801012e:	07d9      	lsls	r1, r3, #31
 8010130:	d405      	bmi.n	801013e <_vfiprintf_r+0x1fe>
 8010132:	89ab      	ldrh	r3, [r5, #12]
 8010134:	059a      	lsls	r2, r3, #22
 8010136:	d402      	bmi.n	801013e <_vfiprintf_r+0x1fe>
 8010138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801013a:	f7fd fba9 	bl	800d890 <__retarget_lock_release_recursive>
 801013e:	89ab      	ldrh	r3, [r5, #12]
 8010140:	065b      	lsls	r3, r3, #25
 8010142:	f53f af1f 	bmi.w	800ff84 <_vfiprintf_r+0x44>
 8010146:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010148:	e71e      	b.n	800ff88 <_vfiprintf_r+0x48>
 801014a:	ab03      	add	r3, sp, #12
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	462a      	mov	r2, r5
 8010150:	4b05      	ldr	r3, [pc, #20]	@ (8010168 <_vfiprintf_r+0x228>)
 8010152:	a904      	add	r1, sp, #16
 8010154:	4630      	mov	r0, r6
 8010156:	f7fc fd7b 	bl	800cc50 <_printf_i>
 801015a:	e7e4      	b.n	8010126 <_vfiprintf_r+0x1e6>
 801015c:	080121f9 	.word	0x080121f9
 8010160:	08012203 	.word	0x08012203
 8010164:	0800c721 	.word	0x0800c721
 8010168:	0800ff1b 	.word	0x0800ff1b
 801016c:	080121ff 	.word	0x080121ff

08010170 <__sflush_r>:
 8010170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010178:	0716      	lsls	r6, r2, #28
 801017a:	4605      	mov	r5, r0
 801017c:	460c      	mov	r4, r1
 801017e:	d454      	bmi.n	801022a <__sflush_r+0xba>
 8010180:	684b      	ldr	r3, [r1, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	dc02      	bgt.n	801018c <__sflush_r+0x1c>
 8010186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010188:	2b00      	cmp	r3, #0
 801018a:	dd48      	ble.n	801021e <__sflush_r+0xae>
 801018c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801018e:	2e00      	cmp	r6, #0
 8010190:	d045      	beq.n	801021e <__sflush_r+0xae>
 8010192:	2300      	movs	r3, #0
 8010194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010198:	682f      	ldr	r7, [r5, #0]
 801019a:	6a21      	ldr	r1, [r4, #32]
 801019c:	602b      	str	r3, [r5, #0]
 801019e:	d030      	beq.n	8010202 <__sflush_r+0x92>
 80101a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80101a2:	89a3      	ldrh	r3, [r4, #12]
 80101a4:	0759      	lsls	r1, r3, #29
 80101a6:	d505      	bpl.n	80101b4 <__sflush_r+0x44>
 80101a8:	6863      	ldr	r3, [r4, #4]
 80101aa:	1ad2      	subs	r2, r2, r3
 80101ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80101ae:	b10b      	cbz	r3, 80101b4 <__sflush_r+0x44>
 80101b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80101b2:	1ad2      	subs	r2, r2, r3
 80101b4:	2300      	movs	r3, #0
 80101b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80101b8:	6a21      	ldr	r1, [r4, #32]
 80101ba:	4628      	mov	r0, r5
 80101bc:	47b0      	blx	r6
 80101be:	1c43      	adds	r3, r0, #1
 80101c0:	89a3      	ldrh	r3, [r4, #12]
 80101c2:	d106      	bne.n	80101d2 <__sflush_r+0x62>
 80101c4:	6829      	ldr	r1, [r5, #0]
 80101c6:	291d      	cmp	r1, #29
 80101c8:	d82b      	bhi.n	8010222 <__sflush_r+0xb2>
 80101ca:	4a2a      	ldr	r2, [pc, #168]	@ (8010274 <__sflush_r+0x104>)
 80101cc:	410a      	asrs	r2, r1
 80101ce:	07d6      	lsls	r6, r2, #31
 80101d0:	d427      	bmi.n	8010222 <__sflush_r+0xb2>
 80101d2:	2200      	movs	r2, #0
 80101d4:	6062      	str	r2, [r4, #4]
 80101d6:	04d9      	lsls	r1, r3, #19
 80101d8:	6922      	ldr	r2, [r4, #16]
 80101da:	6022      	str	r2, [r4, #0]
 80101dc:	d504      	bpl.n	80101e8 <__sflush_r+0x78>
 80101de:	1c42      	adds	r2, r0, #1
 80101e0:	d101      	bne.n	80101e6 <__sflush_r+0x76>
 80101e2:	682b      	ldr	r3, [r5, #0]
 80101e4:	b903      	cbnz	r3, 80101e8 <__sflush_r+0x78>
 80101e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80101e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80101ea:	602f      	str	r7, [r5, #0]
 80101ec:	b1b9      	cbz	r1, 801021e <__sflush_r+0xae>
 80101ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101f2:	4299      	cmp	r1, r3
 80101f4:	d002      	beq.n	80101fc <__sflush_r+0x8c>
 80101f6:	4628      	mov	r0, r5
 80101f8:	f7fe f99e 	bl	800e538 <_free_r>
 80101fc:	2300      	movs	r3, #0
 80101fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8010200:	e00d      	b.n	801021e <__sflush_r+0xae>
 8010202:	2301      	movs	r3, #1
 8010204:	4628      	mov	r0, r5
 8010206:	47b0      	blx	r6
 8010208:	4602      	mov	r2, r0
 801020a:	1c50      	adds	r0, r2, #1
 801020c:	d1c9      	bne.n	80101a2 <__sflush_r+0x32>
 801020e:	682b      	ldr	r3, [r5, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d0c6      	beq.n	80101a2 <__sflush_r+0x32>
 8010214:	2b1d      	cmp	r3, #29
 8010216:	d001      	beq.n	801021c <__sflush_r+0xac>
 8010218:	2b16      	cmp	r3, #22
 801021a:	d11e      	bne.n	801025a <__sflush_r+0xea>
 801021c:	602f      	str	r7, [r5, #0]
 801021e:	2000      	movs	r0, #0
 8010220:	e022      	b.n	8010268 <__sflush_r+0xf8>
 8010222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010226:	b21b      	sxth	r3, r3
 8010228:	e01b      	b.n	8010262 <__sflush_r+0xf2>
 801022a:	690f      	ldr	r7, [r1, #16]
 801022c:	2f00      	cmp	r7, #0
 801022e:	d0f6      	beq.n	801021e <__sflush_r+0xae>
 8010230:	0793      	lsls	r3, r2, #30
 8010232:	680e      	ldr	r6, [r1, #0]
 8010234:	bf08      	it	eq
 8010236:	694b      	ldreq	r3, [r1, #20]
 8010238:	600f      	str	r7, [r1, #0]
 801023a:	bf18      	it	ne
 801023c:	2300      	movne	r3, #0
 801023e:	eba6 0807 	sub.w	r8, r6, r7
 8010242:	608b      	str	r3, [r1, #8]
 8010244:	f1b8 0f00 	cmp.w	r8, #0
 8010248:	dde9      	ble.n	801021e <__sflush_r+0xae>
 801024a:	6a21      	ldr	r1, [r4, #32]
 801024c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801024e:	4643      	mov	r3, r8
 8010250:	463a      	mov	r2, r7
 8010252:	4628      	mov	r0, r5
 8010254:	47b0      	blx	r6
 8010256:	2800      	cmp	r0, #0
 8010258:	dc08      	bgt.n	801026c <__sflush_r+0xfc>
 801025a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801025e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010262:	81a3      	strh	r3, [r4, #12]
 8010264:	f04f 30ff 	mov.w	r0, #4294967295
 8010268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801026c:	4407      	add	r7, r0
 801026e:	eba8 0800 	sub.w	r8, r8, r0
 8010272:	e7e7      	b.n	8010244 <__sflush_r+0xd4>
 8010274:	dfbffffe 	.word	0xdfbffffe

08010278 <_fflush_r>:
 8010278:	b538      	push	{r3, r4, r5, lr}
 801027a:	690b      	ldr	r3, [r1, #16]
 801027c:	4605      	mov	r5, r0
 801027e:	460c      	mov	r4, r1
 8010280:	b913      	cbnz	r3, 8010288 <_fflush_r+0x10>
 8010282:	2500      	movs	r5, #0
 8010284:	4628      	mov	r0, r5
 8010286:	bd38      	pop	{r3, r4, r5, pc}
 8010288:	b118      	cbz	r0, 8010292 <_fflush_r+0x1a>
 801028a:	6a03      	ldr	r3, [r0, #32]
 801028c:	b90b      	cbnz	r3, 8010292 <_fflush_r+0x1a>
 801028e:	f7fd f89f 	bl	800d3d0 <__sinit>
 8010292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d0f3      	beq.n	8010282 <_fflush_r+0xa>
 801029a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801029c:	07d0      	lsls	r0, r2, #31
 801029e:	d404      	bmi.n	80102aa <_fflush_r+0x32>
 80102a0:	0599      	lsls	r1, r3, #22
 80102a2:	d402      	bmi.n	80102aa <_fflush_r+0x32>
 80102a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102a6:	f7fd faf2 	bl	800d88e <__retarget_lock_acquire_recursive>
 80102aa:	4628      	mov	r0, r5
 80102ac:	4621      	mov	r1, r4
 80102ae:	f7ff ff5f 	bl	8010170 <__sflush_r>
 80102b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80102b4:	07da      	lsls	r2, r3, #31
 80102b6:	4605      	mov	r5, r0
 80102b8:	d4e4      	bmi.n	8010284 <_fflush_r+0xc>
 80102ba:	89a3      	ldrh	r3, [r4, #12]
 80102bc:	059b      	lsls	r3, r3, #22
 80102be:	d4e1      	bmi.n	8010284 <_fflush_r+0xc>
 80102c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80102c2:	f7fd fae5 	bl	800d890 <__retarget_lock_release_recursive>
 80102c6:	e7dd      	b.n	8010284 <_fflush_r+0xc>

080102c8 <__swhatbuf_r>:
 80102c8:	b570      	push	{r4, r5, r6, lr}
 80102ca:	460c      	mov	r4, r1
 80102cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d0:	2900      	cmp	r1, #0
 80102d2:	b096      	sub	sp, #88	@ 0x58
 80102d4:	4615      	mov	r5, r2
 80102d6:	461e      	mov	r6, r3
 80102d8:	da0d      	bge.n	80102f6 <__swhatbuf_r+0x2e>
 80102da:	89a3      	ldrh	r3, [r4, #12]
 80102dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80102e0:	f04f 0100 	mov.w	r1, #0
 80102e4:	bf14      	ite	ne
 80102e6:	2340      	movne	r3, #64	@ 0x40
 80102e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80102ec:	2000      	movs	r0, #0
 80102ee:	6031      	str	r1, [r6, #0]
 80102f0:	602b      	str	r3, [r5, #0]
 80102f2:	b016      	add	sp, #88	@ 0x58
 80102f4:	bd70      	pop	{r4, r5, r6, pc}
 80102f6:	466a      	mov	r2, sp
 80102f8:	f000 f874 	bl	80103e4 <_fstat_r>
 80102fc:	2800      	cmp	r0, #0
 80102fe:	dbec      	blt.n	80102da <__swhatbuf_r+0x12>
 8010300:	9901      	ldr	r1, [sp, #4]
 8010302:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010306:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801030a:	4259      	negs	r1, r3
 801030c:	4159      	adcs	r1, r3
 801030e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010312:	e7eb      	b.n	80102ec <__swhatbuf_r+0x24>

08010314 <__smakebuf_r>:
 8010314:	898b      	ldrh	r3, [r1, #12]
 8010316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010318:	079d      	lsls	r5, r3, #30
 801031a:	4606      	mov	r6, r0
 801031c:	460c      	mov	r4, r1
 801031e:	d507      	bpl.n	8010330 <__smakebuf_r+0x1c>
 8010320:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	6123      	str	r3, [r4, #16]
 8010328:	2301      	movs	r3, #1
 801032a:	6163      	str	r3, [r4, #20]
 801032c:	b003      	add	sp, #12
 801032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010330:	ab01      	add	r3, sp, #4
 8010332:	466a      	mov	r2, sp
 8010334:	f7ff ffc8 	bl	80102c8 <__swhatbuf_r>
 8010338:	9f00      	ldr	r7, [sp, #0]
 801033a:	4605      	mov	r5, r0
 801033c:	4639      	mov	r1, r7
 801033e:	4630      	mov	r0, r6
 8010340:	f7fc f8c2 	bl	800c4c8 <_malloc_r>
 8010344:	b948      	cbnz	r0, 801035a <__smakebuf_r+0x46>
 8010346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801034a:	059a      	lsls	r2, r3, #22
 801034c:	d4ee      	bmi.n	801032c <__smakebuf_r+0x18>
 801034e:	f023 0303 	bic.w	r3, r3, #3
 8010352:	f043 0302 	orr.w	r3, r3, #2
 8010356:	81a3      	strh	r3, [r4, #12]
 8010358:	e7e2      	b.n	8010320 <__smakebuf_r+0xc>
 801035a:	89a3      	ldrh	r3, [r4, #12]
 801035c:	6020      	str	r0, [r4, #0]
 801035e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010362:	81a3      	strh	r3, [r4, #12]
 8010364:	9b01      	ldr	r3, [sp, #4]
 8010366:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801036a:	b15b      	cbz	r3, 8010384 <__smakebuf_r+0x70>
 801036c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010370:	4630      	mov	r0, r6
 8010372:	f000 f849 	bl	8010408 <_isatty_r>
 8010376:	b128      	cbz	r0, 8010384 <__smakebuf_r+0x70>
 8010378:	89a3      	ldrh	r3, [r4, #12]
 801037a:	f023 0303 	bic.w	r3, r3, #3
 801037e:	f043 0301 	orr.w	r3, r3, #1
 8010382:	81a3      	strh	r3, [r4, #12]
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	431d      	orrs	r5, r3
 8010388:	81a5      	strh	r5, [r4, #12]
 801038a:	e7cf      	b.n	801032c <__smakebuf_r+0x18>

0801038c <memmove>:
 801038c:	4288      	cmp	r0, r1
 801038e:	b510      	push	{r4, lr}
 8010390:	eb01 0402 	add.w	r4, r1, r2
 8010394:	d902      	bls.n	801039c <memmove+0x10>
 8010396:	4284      	cmp	r4, r0
 8010398:	4623      	mov	r3, r4
 801039a:	d807      	bhi.n	80103ac <memmove+0x20>
 801039c:	1e43      	subs	r3, r0, #1
 801039e:	42a1      	cmp	r1, r4
 80103a0:	d008      	beq.n	80103b4 <memmove+0x28>
 80103a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103aa:	e7f8      	b.n	801039e <memmove+0x12>
 80103ac:	4402      	add	r2, r0
 80103ae:	4601      	mov	r1, r0
 80103b0:	428a      	cmp	r2, r1
 80103b2:	d100      	bne.n	80103b6 <memmove+0x2a>
 80103b4:	bd10      	pop	{r4, pc}
 80103b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103be:	e7f7      	b.n	80103b0 <memmove+0x24>

080103c0 <strncmp>:
 80103c0:	b510      	push	{r4, lr}
 80103c2:	b16a      	cbz	r2, 80103e0 <strncmp+0x20>
 80103c4:	3901      	subs	r1, #1
 80103c6:	1884      	adds	r4, r0, r2
 80103c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80103d0:	429a      	cmp	r2, r3
 80103d2:	d103      	bne.n	80103dc <strncmp+0x1c>
 80103d4:	42a0      	cmp	r0, r4
 80103d6:	d001      	beq.n	80103dc <strncmp+0x1c>
 80103d8:	2a00      	cmp	r2, #0
 80103da:	d1f5      	bne.n	80103c8 <strncmp+0x8>
 80103dc:	1ad0      	subs	r0, r2, r3
 80103de:	bd10      	pop	{r4, pc}
 80103e0:	4610      	mov	r0, r2
 80103e2:	e7fc      	b.n	80103de <strncmp+0x1e>

080103e4 <_fstat_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	4d07      	ldr	r5, [pc, #28]	@ (8010404 <_fstat_r+0x20>)
 80103e8:	2300      	movs	r3, #0
 80103ea:	4604      	mov	r4, r0
 80103ec:	4608      	mov	r0, r1
 80103ee:	4611      	mov	r1, r2
 80103f0:	602b      	str	r3, [r5, #0]
 80103f2:	f7f3 ff53 	bl	800429c <_fstat>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	d102      	bne.n	8010400 <_fstat_r+0x1c>
 80103fa:	682b      	ldr	r3, [r5, #0]
 80103fc:	b103      	cbz	r3, 8010400 <_fstat_r+0x1c>
 80103fe:	6023      	str	r3, [r4, #0]
 8010400:	bd38      	pop	{r3, r4, r5, pc}
 8010402:	bf00      	nop
 8010404:	200032e0 	.word	0x200032e0

08010408 <_isatty_r>:
 8010408:	b538      	push	{r3, r4, r5, lr}
 801040a:	4d06      	ldr	r5, [pc, #24]	@ (8010424 <_isatty_r+0x1c>)
 801040c:	2300      	movs	r3, #0
 801040e:	4604      	mov	r4, r0
 8010410:	4608      	mov	r0, r1
 8010412:	602b      	str	r3, [r5, #0]
 8010414:	f7f3 ff52 	bl	80042bc <_isatty>
 8010418:	1c43      	adds	r3, r0, #1
 801041a:	d102      	bne.n	8010422 <_isatty_r+0x1a>
 801041c:	682b      	ldr	r3, [r5, #0]
 801041e:	b103      	cbz	r3, 8010422 <_isatty_r+0x1a>
 8010420:	6023      	str	r3, [r4, #0]
 8010422:	bd38      	pop	{r3, r4, r5, pc}
 8010424:	200032e0 	.word	0x200032e0

08010428 <memcpy>:
 8010428:	440a      	add	r2, r1
 801042a:	4291      	cmp	r1, r2
 801042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010430:	d100      	bne.n	8010434 <memcpy+0xc>
 8010432:	4770      	bx	lr
 8010434:	b510      	push	{r4, lr}
 8010436:	f811 4b01 	ldrb.w	r4, [r1], #1
 801043a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801043e:	4291      	cmp	r1, r2
 8010440:	d1f9      	bne.n	8010436 <memcpy+0xe>
 8010442:	bd10      	pop	{r4, pc}
 8010444:	0000      	movs	r0, r0
	...

08010448 <nan>:
 8010448:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010450 <nan+0x8>
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	00000000 	.word	0x00000000
 8010454:	7ff80000 	.word	0x7ff80000

08010458 <__assert_func>:
 8010458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801045a:	4614      	mov	r4, r2
 801045c:	461a      	mov	r2, r3
 801045e:	4b09      	ldr	r3, [pc, #36]	@ (8010484 <__assert_func+0x2c>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	4605      	mov	r5, r0
 8010464:	68d8      	ldr	r0, [r3, #12]
 8010466:	b954      	cbnz	r4, 801047e <__assert_func+0x26>
 8010468:	4b07      	ldr	r3, [pc, #28]	@ (8010488 <__assert_func+0x30>)
 801046a:	461c      	mov	r4, r3
 801046c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010470:	9100      	str	r1, [sp, #0]
 8010472:	462b      	mov	r3, r5
 8010474:	4905      	ldr	r1, [pc, #20]	@ (801048c <__assert_func+0x34>)
 8010476:	f000 fba7 	bl	8010bc8 <fiprintf>
 801047a:	f000 fbb7 	bl	8010bec <abort>
 801047e:	4b04      	ldr	r3, [pc, #16]	@ (8010490 <__assert_func+0x38>)
 8010480:	e7f4      	b.n	801046c <__assert_func+0x14>
 8010482:	bf00      	nop
 8010484:	20000084 	.word	0x20000084
 8010488:	0801224d 	.word	0x0801224d
 801048c:	0801221f 	.word	0x0801221f
 8010490:	08012212 	.word	0x08012212

08010494 <_calloc_r>:
 8010494:	b570      	push	{r4, r5, r6, lr}
 8010496:	fba1 5402 	umull	r5, r4, r1, r2
 801049a:	b93c      	cbnz	r4, 80104ac <_calloc_r+0x18>
 801049c:	4629      	mov	r1, r5
 801049e:	f7fc f813 	bl	800c4c8 <_malloc_r>
 80104a2:	4606      	mov	r6, r0
 80104a4:	b928      	cbnz	r0, 80104b2 <_calloc_r+0x1e>
 80104a6:	2600      	movs	r6, #0
 80104a8:	4630      	mov	r0, r6
 80104aa:	bd70      	pop	{r4, r5, r6, pc}
 80104ac:	220c      	movs	r2, #12
 80104ae:	6002      	str	r2, [r0, #0]
 80104b0:	e7f9      	b.n	80104a6 <_calloc_r+0x12>
 80104b2:	462a      	mov	r2, r5
 80104b4:	4621      	mov	r1, r4
 80104b6:	f7fd f95d 	bl	800d774 <memset>
 80104ba:	e7f5      	b.n	80104a8 <_calloc_r+0x14>

080104bc <rshift>:
 80104bc:	6903      	ldr	r3, [r0, #16]
 80104be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80104c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80104ca:	f100 0414 	add.w	r4, r0, #20
 80104ce:	dd45      	ble.n	801055c <rshift+0xa0>
 80104d0:	f011 011f 	ands.w	r1, r1, #31
 80104d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80104d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80104dc:	d10c      	bne.n	80104f8 <rshift+0x3c>
 80104de:	f100 0710 	add.w	r7, r0, #16
 80104e2:	4629      	mov	r1, r5
 80104e4:	42b1      	cmp	r1, r6
 80104e6:	d334      	bcc.n	8010552 <rshift+0x96>
 80104e8:	1a9b      	subs	r3, r3, r2
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	1eea      	subs	r2, r5, #3
 80104ee:	4296      	cmp	r6, r2
 80104f0:	bf38      	it	cc
 80104f2:	2300      	movcc	r3, #0
 80104f4:	4423      	add	r3, r4
 80104f6:	e015      	b.n	8010524 <rshift+0x68>
 80104f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80104fc:	f1c1 0820 	rsb	r8, r1, #32
 8010500:	40cf      	lsrs	r7, r1
 8010502:	f105 0e04 	add.w	lr, r5, #4
 8010506:	46a1      	mov	r9, r4
 8010508:	4576      	cmp	r6, lr
 801050a:	46f4      	mov	ip, lr
 801050c:	d815      	bhi.n	801053a <rshift+0x7e>
 801050e:	1a9a      	subs	r2, r3, r2
 8010510:	0092      	lsls	r2, r2, #2
 8010512:	3a04      	subs	r2, #4
 8010514:	3501      	adds	r5, #1
 8010516:	42ae      	cmp	r6, r5
 8010518:	bf38      	it	cc
 801051a:	2200      	movcc	r2, #0
 801051c:	18a3      	adds	r3, r4, r2
 801051e:	50a7      	str	r7, [r4, r2]
 8010520:	b107      	cbz	r7, 8010524 <rshift+0x68>
 8010522:	3304      	adds	r3, #4
 8010524:	1b1a      	subs	r2, r3, r4
 8010526:	42a3      	cmp	r3, r4
 8010528:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801052c:	bf08      	it	eq
 801052e:	2300      	moveq	r3, #0
 8010530:	6102      	str	r2, [r0, #16]
 8010532:	bf08      	it	eq
 8010534:	6143      	streq	r3, [r0, #20]
 8010536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801053a:	f8dc c000 	ldr.w	ip, [ip]
 801053e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010542:	ea4c 0707 	orr.w	r7, ip, r7
 8010546:	f849 7b04 	str.w	r7, [r9], #4
 801054a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801054e:	40cf      	lsrs	r7, r1
 8010550:	e7da      	b.n	8010508 <rshift+0x4c>
 8010552:	f851 cb04 	ldr.w	ip, [r1], #4
 8010556:	f847 cf04 	str.w	ip, [r7, #4]!
 801055a:	e7c3      	b.n	80104e4 <rshift+0x28>
 801055c:	4623      	mov	r3, r4
 801055e:	e7e1      	b.n	8010524 <rshift+0x68>

08010560 <__hexdig_fun>:
 8010560:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010564:	2b09      	cmp	r3, #9
 8010566:	d802      	bhi.n	801056e <__hexdig_fun+0xe>
 8010568:	3820      	subs	r0, #32
 801056a:	b2c0      	uxtb	r0, r0
 801056c:	4770      	bx	lr
 801056e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010572:	2b05      	cmp	r3, #5
 8010574:	d801      	bhi.n	801057a <__hexdig_fun+0x1a>
 8010576:	3847      	subs	r0, #71	@ 0x47
 8010578:	e7f7      	b.n	801056a <__hexdig_fun+0xa>
 801057a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801057e:	2b05      	cmp	r3, #5
 8010580:	d801      	bhi.n	8010586 <__hexdig_fun+0x26>
 8010582:	3827      	subs	r0, #39	@ 0x27
 8010584:	e7f1      	b.n	801056a <__hexdig_fun+0xa>
 8010586:	2000      	movs	r0, #0
 8010588:	4770      	bx	lr
	...

0801058c <__gethex>:
 801058c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010590:	b085      	sub	sp, #20
 8010592:	468a      	mov	sl, r1
 8010594:	9302      	str	r3, [sp, #8]
 8010596:	680b      	ldr	r3, [r1, #0]
 8010598:	9001      	str	r0, [sp, #4]
 801059a:	4690      	mov	r8, r2
 801059c:	1c9c      	adds	r4, r3, #2
 801059e:	46a1      	mov	r9, r4
 80105a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80105a4:	2830      	cmp	r0, #48	@ 0x30
 80105a6:	d0fa      	beq.n	801059e <__gethex+0x12>
 80105a8:	eba9 0303 	sub.w	r3, r9, r3
 80105ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80105b0:	f7ff ffd6 	bl	8010560 <__hexdig_fun>
 80105b4:	4605      	mov	r5, r0
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d168      	bne.n	801068c <__gethex+0x100>
 80105ba:	49a0      	ldr	r1, [pc, #640]	@ (801083c <__gethex+0x2b0>)
 80105bc:	2201      	movs	r2, #1
 80105be:	4648      	mov	r0, r9
 80105c0:	f7ff fefe 	bl	80103c0 <strncmp>
 80105c4:	4607      	mov	r7, r0
 80105c6:	2800      	cmp	r0, #0
 80105c8:	d167      	bne.n	801069a <__gethex+0x10e>
 80105ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80105ce:	4626      	mov	r6, r4
 80105d0:	f7ff ffc6 	bl	8010560 <__hexdig_fun>
 80105d4:	2800      	cmp	r0, #0
 80105d6:	d062      	beq.n	801069e <__gethex+0x112>
 80105d8:	4623      	mov	r3, r4
 80105da:	7818      	ldrb	r0, [r3, #0]
 80105dc:	2830      	cmp	r0, #48	@ 0x30
 80105de:	4699      	mov	r9, r3
 80105e0:	f103 0301 	add.w	r3, r3, #1
 80105e4:	d0f9      	beq.n	80105da <__gethex+0x4e>
 80105e6:	f7ff ffbb 	bl	8010560 <__hexdig_fun>
 80105ea:	fab0 f580 	clz	r5, r0
 80105ee:	096d      	lsrs	r5, r5, #5
 80105f0:	f04f 0b01 	mov.w	fp, #1
 80105f4:	464a      	mov	r2, r9
 80105f6:	4616      	mov	r6, r2
 80105f8:	3201      	adds	r2, #1
 80105fa:	7830      	ldrb	r0, [r6, #0]
 80105fc:	f7ff ffb0 	bl	8010560 <__hexdig_fun>
 8010600:	2800      	cmp	r0, #0
 8010602:	d1f8      	bne.n	80105f6 <__gethex+0x6a>
 8010604:	498d      	ldr	r1, [pc, #564]	@ (801083c <__gethex+0x2b0>)
 8010606:	2201      	movs	r2, #1
 8010608:	4630      	mov	r0, r6
 801060a:	f7ff fed9 	bl	80103c0 <strncmp>
 801060e:	2800      	cmp	r0, #0
 8010610:	d13f      	bne.n	8010692 <__gethex+0x106>
 8010612:	b944      	cbnz	r4, 8010626 <__gethex+0x9a>
 8010614:	1c74      	adds	r4, r6, #1
 8010616:	4622      	mov	r2, r4
 8010618:	4616      	mov	r6, r2
 801061a:	3201      	adds	r2, #1
 801061c:	7830      	ldrb	r0, [r6, #0]
 801061e:	f7ff ff9f 	bl	8010560 <__hexdig_fun>
 8010622:	2800      	cmp	r0, #0
 8010624:	d1f8      	bne.n	8010618 <__gethex+0x8c>
 8010626:	1ba4      	subs	r4, r4, r6
 8010628:	00a7      	lsls	r7, r4, #2
 801062a:	7833      	ldrb	r3, [r6, #0]
 801062c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010630:	2b50      	cmp	r3, #80	@ 0x50
 8010632:	d13e      	bne.n	80106b2 <__gethex+0x126>
 8010634:	7873      	ldrb	r3, [r6, #1]
 8010636:	2b2b      	cmp	r3, #43	@ 0x2b
 8010638:	d033      	beq.n	80106a2 <__gethex+0x116>
 801063a:	2b2d      	cmp	r3, #45	@ 0x2d
 801063c:	d034      	beq.n	80106a8 <__gethex+0x11c>
 801063e:	1c71      	adds	r1, r6, #1
 8010640:	2400      	movs	r4, #0
 8010642:	7808      	ldrb	r0, [r1, #0]
 8010644:	f7ff ff8c 	bl	8010560 <__hexdig_fun>
 8010648:	1e43      	subs	r3, r0, #1
 801064a:	b2db      	uxtb	r3, r3
 801064c:	2b18      	cmp	r3, #24
 801064e:	d830      	bhi.n	80106b2 <__gethex+0x126>
 8010650:	f1a0 0210 	sub.w	r2, r0, #16
 8010654:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010658:	f7ff ff82 	bl	8010560 <__hexdig_fun>
 801065c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010660:	fa5f fc8c 	uxtb.w	ip, ip
 8010664:	f1bc 0f18 	cmp.w	ip, #24
 8010668:	f04f 030a 	mov.w	r3, #10
 801066c:	d91e      	bls.n	80106ac <__gethex+0x120>
 801066e:	b104      	cbz	r4, 8010672 <__gethex+0xe6>
 8010670:	4252      	negs	r2, r2
 8010672:	4417      	add	r7, r2
 8010674:	f8ca 1000 	str.w	r1, [sl]
 8010678:	b1ed      	cbz	r5, 80106b6 <__gethex+0x12a>
 801067a:	f1bb 0f00 	cmp.w	fp, #0
 801067e:	bf0c      	ite	eq
 8010680:	2506      	moveq	r5, #6
 8010682:	2500      	movne	r5, #0
 8010684:	4628      	mov	r0, r5
 8010686:	b005      	add	sp, #20
 8010688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801068c:	2500      	movs	r5, #0
 801068e:	462c      	mov	r4, r5
 8010690:	e7b0      	b.n	80105f4 <__gethex+0x68>
 8010692:	2c00      	cmp	r4, #0
 8010694:	d1c7      	bne.n	8010626 <__gethex+0x9a>
 8010696:	4627      	mov	r7, r4
 8010698:	e7c7      	b.n	801062a <__gethex+0x9e>
 801069a:	464e      	mov	r6, r9
 801069c:	462f      	mov	r7, r5
 801069e:	2501      	movs	r5, #1
 80106a0:	e7c3      	b.n	801062a <__gethex+0x9e>
 80106a2:	2400      	movs	r4, #0
 80106a4:	1cb1      	adds	r1, r6, #2
 80106a6:	e7cc      	b.n	8010642 <__gethex+0xb6>
 80106a8:	2401      	movs	r4, #1
 80106aa:	e7fb      	b.n	80106a4 <__gethex+0x118>
 80106ac:	fb03 0002 	mla	r0, r3, r2, r0
 80106b0:	e7ce      	b.n	8010650 <__gethex+0xc4>
 80106b2:	4631      	mov	r1, r6
 80106b4:	e7de      	b.n	8010674 <__gethex+0xe8>
 80106b6:	eba6 0309 	sub.w	r3, r6, r9
 80106ba:	3b01      	subs	r3, #1
 80106bc:	4629      	mov	r1, r5
 80106be:	2b07      	cmp	r3, #7
 80106c0:	dc0a      	bgt.n	80106d8 <__gethex+0x14c>
 80106c2:	9801      	ldr	r0, [sp, #4]
 80106c4:	f7fd ff82 	bl	800e5cc <_Balloc>
 80106c8:	4604      	mov	r4, r0
 80106ca:	b940      	cbnz	r0, 80106de <__gethex+0x152>
 80106cc:	4b5c      	ldr	r3, [pc, #368]	@ (8010840 <__gethex+0x2b4>)
 80106ce:	4602      	mov	r2, r0
 80106d0:	21e4      	movs	r1, #228	@ 0xe4
 80106d2:	485c      	ldr	r0, [pc, #368]	@ (8010844 <__gethex+0x2b8>)
 80106d4:	f7ff fec0 	bl	8010458 <__assert_func>
 80106d8:	3101      	adds	r1, #1
 80106da:	105b      	asrs	r3, r3, #1
 80106dc:	e7ef      	b.n	80106be <__gethex+0x132>
 80106de:	f100 0a14 	add.w	sl, r0, #20
 80106e2:	2300      	movs	r3, #0
 80106e4:	4655      	mov	r5, sl
 80106e6:	469b      	mov	fp, r3
 80106e8:	45b1      	cmp	r9, r6
 80106ea:	d337      	bcc.n	801075c <__gethex+0x1d0>
 80106ec:	f845 bb04 	str.w	fp, [r5], #4
 80106f0:	eba5 050a 	sub.w	r5, r5, sl
 80106f4:	10ad      	asrs	r5, r5, #2
 80106f6:	6125      	str	r5, [r4, #16]
 80106f8:	4658      	mov	r0, fp
 80106fa:	f7fe f859 	bl	800e7b0 <__hi0bits>
 80106fe:	016d      	lsls	r5, r5, #5
 8010700:	f8d8 6000 	ldr.w	r6, [r8]
 8010704:	1a2d      	subs	r5, r5, r0
 8010706:	42b5      	cmp	r5, r6
 8010708:	dd54      	ble.n	80107b4 <__gethex+0x228>
 801070a:	1bad      	subs	r5, r5, r6
 801070c:	4629      	mov	r1, r5
 801070e:	4620      	mov	r0, r4
 8010710:	f7fe fbed 	bl	800eeee <__any_on>
 8010714:	4681      	mov	r9, r0
 8010716:	b178      	cbz	r0, 8010738 <__gethex+0x1ac>
 8010718:	1e6b      	subs	r3, r5, #1
 801071a:	1159      	asrs	r1, r3, #5
 801071c:	f003 021f 	and.w	r2, r3, #31
 8010720:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010724:	f04f 0901 	mov.w	r9, #1
 8010728:	fa09 f202 	lsl.w	r2, r9, r2
 801072c:	420a      	tst	r2, r1
 801072e:	d003      	beq.n	8010738 <__gethex+0x1ac>
 8010730:	454b      	cmp	r3, r9
 8010732:	dc36      	bgt.n	80107a2 <__gethex+0x216>
 8010734:	f04f 0902 	mov.w	r9, #2
 8010738:	4629      	mov	r1, r5
 801073a:	4620      	mov	r0, r4
 801073c:	f7ff febe 	bl	80104bc <rshift>
 8010740:	442f      	add	r7, r5
 8010742:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010746:	42bb      	cmp	r3, r7
 8010748:	da42      	bge.n	80107d0 <__gethex+0x244>
 801074a:	9801      	ldr	r0, [sp, #4]
 801074c:	4621      	mov	r1, r4
 801074e:	f7fd ff7d 	bl	800e64c <_Bfree>
 8010752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010754:	2300      	movs	r3, #0
 8010756:	6013      	str	r3, [r2, #0]
 8010758:	25a3      	movs	r5, #163	@ 0xa3
 801075a:	e793      	b.n	8010684 <__gethex+0xf8>
 801075c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010760:	2a2e      	cmp	r2, #46	@ 0x2e
 8010762:	d012      	beq.n	801078a <__gethex+0x1fe>
 8010764:	2b20      	cmp	r3, #32
 8010766:	d104      	bne.n	8010772 <__gethex+0x1e6>
 8010768:	f845 bb04 	str.w	fp, [r5], #4
 801076c:	f04f 0b00 	mov.w	fp, #0
 8010770:	465b      	mov	r3, fp
 8010772:	7830      	ldrb	r0, [r6, #0]
 8010774:	9303      	str	r3, [sp, #12]
 8010776:	f7ff fef3 	bl	8010560 <__hexdig_fun>
 801077a:	9b03      	ldr	r3, [sp, #12]
 801077c:	f000 000f 	and.w	r0, r0, #15
 8010780:	4098      	lsls	r0, r3
 8010782:	ea4b 0b00 	orr.w	fp, fp, r0
 8010786:	3304      	adds	r3, #4
 8010788:	e7ae      	b.n	80106e8 <__gethex+0x15c>
 801078a:	45b1      	cmp	r9, r6
 801078c:	d8ea      	bhi.n	8010764 <__gethex+0x1d8>
 801078e:	492b      	ldr	r1, [pc, #172]	@ (801083c <__gethex+0x2b0>)
 8010790:	9303      	str	r3, [sp, #12]
 8010792:	2201      	movs	r2, #1
 8010794:	4630      	mov	r0, r6
 8010796:	f7ff fe13 	bl	80103c0 <strncmp>
 801079a:	9b03      	ldr	r3, [sp, #12]
 801079c:	2800      	cmp	r0, #0
 801079e:	d1e1      	bne.n	8010764 <__gethex+0x1d8>
 80107a0:	e7a2      	b.n	80106e8 <__gethex+0x15c>
 80107a2:	1ea9      	subs	r1, r5, #2
 80107a4:	4620      	mov	r0, r4
 80107a6:	f7fe fba2 	bl	800eeee <__any_on>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d0c2      	beq.n	8010734 <__gethex+0x1a8>
 80107ae:	f04f 0903 	mov.w	r9, #3
 80107b2:	e7c1      	b.n	8010738 <__gethex+0x1ac>
 80107b4:	da09      	bge.n	80107ca <__gethex+0x23e>
 80107b6:	1b75      	subs	r5, r6, r5
 80107b8:	4621      	mov	r1, r4
 80107ba:	9801      	ldr	r0, [sp, #4]
 80107bc:	462a      	mov	r2, r5
 80107be:	f7fe f95d 	bl	800ea7c <__lshift>
 80107c2:	1b7f      	subs	r7, r7, r5
 80107c4:	4604      	mov	r4, r0
 80107c6:	f100 0a14 	add.w	sl, r0, #20
 80107ca:	f04f 0900 	mov.w	r9, #0
 80107ce:	e7b8      	b.n	8010742 <__gethex+0x1b6>
 80107d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80107d4:	42bd      	cmp	r5, r7
 80107d6:	dd6f      	ble.n	80108b8 <__gethex+0x32c>
 80107d8:	1bed      	subs	r5, r5, r7
 80107da:	42ae      	cmp	r6, r5
 80107dc:	dc34      	bgt.n	8010848 <__gethex+0x2bc>
 80107de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	d022      	beq.n	801082c <__gethex+0x2a0>
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	d024      	beq.n	8010834 <__gethex+0x2a8>
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d115      	bne.n	801081a <__gethex+0x28e>
 80107ee:	42ae      	cmp	r6, r5
 80107f0:	d113      	bne.n	801081a <__gethex+0x28e>
 80107f2:	2e01      	cmp	r6, #1
 80107f4:	d10b      	bne.n	801080e <__gethex+0x282>
 80107f6:	9a02      	ldr	r2, [sp, #8]
 80107f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80107fc:	6013      	str	r3, [r2, #0]
 80107fe:	2301      	movs	r3, #1
 8010800:	6123      	str	r3, [r4, #16]
 8010802:	f8ca 3000 	str.w	r3, [sl]
 8010806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010808:	2562      	movs	r5, #98	@ 0x62
 801080a:	601c      	str	r4, [r3, #0]
 801080c:	e73a      	b.n	8010684 <__gethex+0xf8>
 801080e:	1e71      	subs	r1, r6, #1
 8010810:	4620      	mov	r0, r4
 8010812:	f7fe fb6c 	bl	800eeee <__any_on>
 8010816:	2800      	cmp	r0, #0
 8010818:	d1ed      	bne.n	80107f6 <__gethex+0x26a>
 801081a:	9801      	ldr	r0, [sp, #4]
 801081c:	4621      	mov	r1, r4
 801081e:	f7fd ff15 	bl	800e64c <_Bfree>
 8010822:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010824:	2300      	movs	r3, #0
 8010826:	6013      	str	r3, [r2, #0]
 8010828:	2550      	movs	r5, #80	@ 0x50
 801082a:	e72b      	b.n	8010684 <__gethex+0xf8>
 801082c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801082e:	2b00      	cmp	r3, #0
 8010830:	d1f3      	bne.n	801081a <__gethex+0x28e>
 8010832:	e7e0      	b.n	80107f6 <__gethex+0x26a>
 8010834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010836:	2b00      	cmp	r3, #0
 8010838:	d1dd      	bne.n	80107f6 <__gethex+0x26a>
 801083a:	e7ee      	b.n	801081a <__gethex+0x28e>
 801083c:	080120a0 	.word	0x080120a0
 8010840:	08011f39 	.word	0x08011f39
 8010844:	0801224e 	.word	0x0801224e
 8010848:	1e6f      	subs	r7, r5, #1
 801084a:	f1b9 0f00 	cmp.w	r9, #0
 801084e:	d130      	bne.n	80108b2 <__gethex+0x326>
 8010850:	b127      	cbz	r7, 801085c <__gethex+0x2d0>
 8010852:	4639      	mov	r1, r7
 8010854:	4620      	mov	r0, r4
 8010856:	f7fe fb4a 	bl	800eeee <__any_on>
 801085a:	4681      	mov	r9, r0
 801085c:	117a      	asrs	r2, r7, #5
 801085e:	2301      	movs	r3, #1
 8010860:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010864:	f007 071f 	and.w	r7, r7, #31
 8010868:	40bb      	lsls	r3, r7
 801086a:	4213      	tst	r3, r2
 801086c:	4629      	mov	r1, r5
 801086e:	4620      	mov	r0, r4
 8010870:	bf18      	it	ne
 8010872:	f049 0902 	orrne.w	r9, r9, #2
 8010876:	f7ff fe21 	bl	80104bc <rshift>
 801087a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801087e:	1b76      	subs	r6, r6, r5
 8010880:	2502      	movs	r5, #2
 8010882:	f1b9 0f00 	cmp.w	r9, #0
 8010886:	d047      	beq.n	8010918 <__gethex+0x38c>
 8010888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801088c:	2b02      	cmp	r3, #2
 801088e:	d015      	beq.n	80108bc <__gethex+0x330>
 8010890:	2b03      	cmp	r3, #3
 8010892:	d017      	beq.n	80108c4 <__gethex+0x338>
 8010894:	2b01      	cmp	r3, #1
 8010896:	d109      	bne.n	80108ac <__gethex+0x320>
 8010898:	f019 0f02 	tst.w	r9, #2
 801089c:	d006      	beq.n	80108ac <__gethex+0x320>
 801089e:	f8da 3000 	ldr.w	r3, [sl]
 80108a2:	ea49 0903 	orr.w	r9, r9, r3
 80108a6:	f019 0f01 	tst.w	r9, #1
 80108aa:	d10e      	bne.n	80108ca <__gethex+0x33e>
 80108ac:	f045 0510 	orr.w	r5, r5, #16
 80108b0:	e032      	b.n	8010918 <__gethex+0x38c>
 80108b2:	f04f 0901 	mov.w	r9, #1
 80108b6:	e7d1      	b.n	801085c <__gethex+0x2d0>
 80108b8:	2501      	movs	r5, #1
 80108ba:	e7e2      	b.n	8010882 <__gethex+0x2f6>
 80108bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108be:	f1c3 0301 	rsb	r3, r3, #1
 80108c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80108c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d0f0      	beq.n	80108ac <__gethex+0x320>
 80108ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80108ce:	f104 0314 	add.w	r3, r4, #20
 80108d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80108d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80108da:	f04f 0c00 	mov.w	ip, #0
 80108de:	4618      	mov	r0, r3
 80108e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80108e8:	d01b      	beq.n	8010922 <__gethex+0x396>
 80108ea:	3201      	adds	r2, #1
 80108ec:	6002      	str	r2, [r0, #0]
 80108ee:	2d02      	cmp	r5, #2
 80108f0:	f104 0314 	add.w	r3, r4, #20
 80108f4:	d13c      	bne.n	8010970 <__gethex+0x3e4>
 80108f6:	f8d8 2000 	ldr.w	r2, [r8]
 80108fa:	3a01      	subs	r2, #1
 80108fc:	42b2      	cmp	r2, r6
 80108fe:	d109      	bne.n	8010914 <__gethex+0x388>
 8010900:	1171      	asrs	r1, r6, #5
 8010902:	2201      	movs	r2, #1
 8010904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010908:	f006 061f 	and.w	r6, r6, #31
 801090c:	fa02 f606 	lsl.w	r6, r2, r6
 8010910:	421e      	tst	r6, r3
 8010912:	d13a      	bne.n	801098a <__gethex+0x3fe>
 8010914:	f045 0520 	orr.w	r5, r5, #32
 8010918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801091a:	601c      	str	r4, [r3, #0]
 801091c:	9b02      	ldr	r3, [sp, #8]
 801091e:	601f      	str	r7, [r3, #0]
 8010920:	e6b0      	b.n	8010684 <__gethex+0xf8>
 8010922:	4299      	cmp	r1, r3
 8010924:	f843 cc04 	str.w	ip, [r3, #-4]
 8010928:	d8d9      	bhi.n	80108de <__gethex+0x352>
 801092a:	68a3      	ldr	r3, [r4, #8]
 801092c:	459b      	cmp	fp, r3
 801092e:	db17      	blt.n	8010960 <__gethex+0x3d4>
 8010930:	6861      	ldr	r1, [r4, #4]
 8010932:	9801      	ldr	r0, [sp, #4]
 8010934:	3101      	adds	r1, #1
 8010936:	f7fd fe49 	bl	800e5cc <_Balloc>
 801093a:	4681      	mov	r9, r0
 801093c:	b918      	cbnz	r0, 8010946 <__gethex+0x3ba>
 801093e:	4b1a      	ldr	r3, [pc, #104]	@ (80109a8 <__gethex+0x41c>)
 8010940:	4602      	mov	r2, r0
 8010942:	2184      	movs	r1, #132	@ 0x84
 8010944:	e6c5      	b.n	80106d2 <__gethex+0x146>
 8010946:	6922      	ldr	r2, [r4, #16]
 8010948:	3202      	adds	r2, #2
 801094a:	f104 010c 	add.w	r1, r4, #12
 801094e:	0092      	lsls	r2, r2, #2
 8010950:	300c      	adds	r0, #12
 8010952:	f7ff fd69 	bl	8010428 <memcpy>
 8010956:	4621      	mov	r1, r4
 8010958:	9801      	ldr	r0, [sp, #4]
 801095a:	f7fd fe77 	bl	800e64c <_Bfree>
 801095e:	464c      	mov	r4, r9
 8010960:	6923      	ldr	r3, [r4, #16]
 8010962:	1c5a      	adds	r2, r3, #1
 8010964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010968:	6122      	str	r2, [r4, #16]
 801096a:	2201      	movs	r2, #1
 801096c:	615a      	str	r2, [r3, #20]
 801096e:	e7be      	b.n	80108ee <__gethex+0x362>
 8010970:	6922      	ldr	r2, [r4, #16]
 8010972:	455a      	cmp	r2, fp
 8010974:	dd0b      	ble.n	801098e <__gethex+0x402>
 8010976:	2101      	movs	r1, #1
 8010978:	4620      	mov	r0, r4
 801097a:	f7ff fd9f 	bl	80104bc <rshift>
 801097e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010982:	3701      	adds	r7, #1
 8010984:	42bb      	cmp	r3, r7
 8010986:	f6ff aee0 	blt.w	801074a <__gethex+0x1be>
 801098a:	2501      	movs	r5, #1
 801098c:	e7c2      	b.n	8010914 <__gethex+0x388>
 801098e:	f016 061f 	ands.w	r6, r6, #31
 8010992:	d0fa      	beq.n	801098a <__gethex+0x3fe>
 8010994:	4453      	add	r3, sl
 8010996:	f1c6 0620 	rsb	r6, r6, #32
 801099a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801099e:	f7fd ff07 	bl	800e7b0 <__hi0bits>
 80109a2:	42b0      	cmp	r0, r6
 80109a4:	dbe7      	blt.n	8010976 <__gethex+0x3ea>
 80109a6:	e7f0      	b.n	801098a <__gethex+0x3fe>
 80109a8:	08011f39 	.word	0x08011f39

080109ac <L_shift>:
 80109ac:	f1c2 0208 	rsb	r2, r2, #8
 80109b0:	0092      	lsls	r2, r2, #2
 80109b2:	b570      	push	{r4, r5, r6, lr}
 80109b4:	f1c2 0620 	rsb	r6, r2, #32
 80109b8:	6843      	ldr	r3, [r0, #4]
 80109ba:	6804      	ldr	r4, [r0, #0]
 80109bc:	fa03 f506 	lsl.w	r5, r3, r6
 80109c0:	432c      	orrs	r4, r5
 80109c2:	40d3      	lsrs	r3, r2
 80109c4:	6004      	str	r4, [r0, #0]
 80109c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80109ca:	4288      	cmp	r0, r1
 80109cc:	d3f4      	bcc.n	80109b8 <L_shift+0xc>
 80109ce:	bd70      	pop	{r4, r5, r6, pc}

080109d0 <__match>:
 80109d0:	b530      	push	{r4, r5, lr}
 80109d2:	6803      	ldr	r3, [r0, #0]
 80109d4:	3301      	adds	r3, #1
 80109d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109da:	b914      	cbnz	r4, 80109e2 <__match+0x12>
 80109dc:	6003      	str	r3, [r0, #0]
 80109de:	2001      	movs	r0, #1
 80109e0:	bd30      	pop	{r4, r5, pc}
 80109e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80109ea:	2d19      	cmp	r5, #25
 80109ec:	bf98      	it	ls
 80109ee:	3220      	addls	r2, #32
 80109f0:	42a2      	cmp	r2, r4
 80109f2:	d0f0      	beq.n	80109d6 <__match+0x6>
 80109f4:	2000      	movs	r0, #0
 80109f6:	e7f3      	b.n	80109e0 <__match+0x10>

080109f8 <__hexnan>:
 80109f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fc:	680b      	ldr	r3, [r1, #0]
 80109fe:	6801      	ldr	r1, [r0, #0]
 8010a00:	115e      	asrs	r6, r3, #5
 8010a02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010a06:	f013 031f 	ands.w	r3, r3, #31
 8010a0a:	b087      	sub	sp, #28
 8010a0c:	bf18      	it	ne
 8010a0e:	3604      	addne	r6, #4
 8010a10:	2500      	movs	r5, #0
 8010a12:	1f37      	subs	r7, r6, #4
 8010a14:	4682      	mov	sl, r0
 8010a16:	4690      	mov	r8, r2
 8010a18:	9301      	str	r3, [sp, #4]
 8010a1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010a1e:	46b9      	mov	r9, r7
 8010a20:	463c      	mov	r4, r7
 8010a22:	9502      	str	r5, [sp, #8]
 8010a24:	46ab      	mov	fp, r5
 8010a26:	784a      	ldrb	r2, [r1, #1]
 8010a28:	1c4b      	adds	r3, r1, #1
 8010a2a:	9303      	str	r3, [sp, #12]
 8010a2c:	b342      	cbz	r2, 8010a80 <__hexnan+0x88>
 8010a2e:	4610      	mov	r0, r2
 8010a30:	9105      	str	r1, [sp, #20]
 8010a32:	9204      	str	r2, [sp, #16]
 8010a34:	f7ff fd94 	bl	8010560 <__hexdig_fun>
 8010a38:	2800      	cmp	r0, #0
 8010a3a:	d151      	bne.n	8010ae0 <__hexnan+0xe8>
 8010a3c:	9a04      	ldr	r2, [sp, #16]
 8010a3e:	9905      	ldr	r1, [sp, #20]
 8010a40:	2a20      	cmp	r2, #32
 8010a42:	d818      	bhi.n	8010a76 <__hexnan+0x7e>
 8010a44:	9b02      	ldr	r3, [sp, #8]
 8010a46:	459b      	cmp	fp, r3
 8010a48:	dd13      	ble.n	8010a72 <__hexnan+0x7a>
 8010a4a:	454c      	cmp	r4, r9
 8010a4c:	d206      	bcs.n	8010a5c <__hexnan+0x64>
 8010a4e:	2d07      	cmp	r5, #7
 8010a50:	dc04      	bgt.n	8010a5c <__hexnan+0x64>
 8010a52:	462a      	mov	r2, r5
 8010a54:	4649      	mov	r1, r9
 8010a56:	4620      	mov	r0, r4
 8010a58:	f7ff ffa8 	bl	80109ac <L_shift>
 8010a5c:	4544      	cmp	r4, r8
 8010a5e:	d952      	bls.n	8010b06 <__hexnan+0x10e>
 8010a60:	2300      	movs	r3, #0
 8010a62:	f1a4 0904 	sub.w	r9, r4, #4
 8010a66:	f844 3c04 	str.w	r3, [r4, #-4]
 8010a6a:	f8cd b008 	str.w	fp, [sp, #8]
 8010a6e:	464c      	mov	r4, r9
 8010a70:	461d      	mov	r5, r3
 8010a72:	9903      	ldr	r1, [sp, #12]
 8010a74:	e7d7      	b.n	8010a26 <__hexnan+0x2e>
 8010a76:	2a29      	cmp	r2, #41	@ 0x29
 8010a78:	d157      	bne.n	8010b2a <__hexnan+0x132>
 8010a7a:	3102      	adds	r1, #2
 8010a7c:	f8ca 1000 	str.w	r1, [sl]
 8010a80:	f1bb 0f00 	cmp.w	fp, #0
 8010a84:	d051      	beq.n	8010b2a <__hexnan+0x132>
 8010a86:	454c      	cmp	r4, r9
 8010a88:	d206      	bcs.n	8010a98 <__hexnan+0xa0>
 8010a8a:	2d07      	cmp	r5, #7
 8010a8c:	dc04      	bgt.n	8010a98 <__hexnan+0xa0>
 8010a8e:	462a      	mov	r2, r5
 8010a90:	4649      	mov	r1, r9
 8010a92:	4620      	mov	r0, r4
 8010a94:	f7ff ff8a 	bl	80109ac <L_shift>
 8010a98:	4544      	cmp	r4, r8
 8010a9a:	d936      	bls.n	8010b0a <__hexnan+0x112>
 8010a9c:	f1a8 0204 	sub.w	r2, r8, #4
 8010aa0:	4623      	mov	r3, r4
 8010aa2:	f853 1b04 	ldr.w	r1, [r3], #4
 8010aa6:	f842 1f04 	str.w	r1, [r2, #4]!
 8010aaa:	429f      	cmp	r7, r3
 8010aac:	d2f9      	bcs.n	8010aa2 <__hexnan+0xaa>
 8010aae:	1b3b      	subs	r3, r7, r4
 8010ab0:	f023 0303 	bic.w	r3, r3, #3
 8010ab4:	3304      	adds	r3, #4
 8010ab6:	3401      	adds	r4, #1
 8010ab8:	3e03      	subs	r6, #3
 8010aba:	42b4      	cmp	r4, r6
 8010abc:	bf88      	it	hi
 8010abe:	2304      	movhi	r3, #4
 8010ac0:	4443      	add	r3, r8
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f843 2b04 	str.w	r2, [r3], #4
 8010ac8:	429f      	cmp	r7, r3
 8010aca:	d2fb      	bcs.n	8010ac4 <__hexnan+0xcc>
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	b91b      	cbnz	r3, 8010ad8 <__hexnan+0xe0>
 8010ad0:	4547      	cmp	r7, r8
 8010ad2:	d128      	bne.n	8010b26 <__hexnan+0x12e>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	603b      	str	r3, [r7, #0]
 8010ad8:	2005      	movs	r0, #5
 8010ada:	b007      	add	sp, #28
 8010adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae0:	3501      	adds	r5, #1
 8010ae2:	2d08      	cmp	r5, #8
 8010ae4:	f10b 0b01 	add.w	fp, fp, #1
 8010ae8:	dd06      	ble.n	8010af8 <__hexnan+0x100>
 8010aea:	4544      	cmp	r4, r8
 8010aec:	d9c1      	bls.n	8010a72 <__hexnan+0x7a>
 8010aee:	2300      	movs	r3, #0
 8010af0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010af4:	2501      	movs	r5, #1
 8010af6:	3c04      	subs	r4, #4
 8010af8:	6822      	ldr	r2, [r4, #0]
 8010afa:	f000 000f 	and.w	r0, r0, #15
 8010afe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010b02:	6020      	str	r0, [r4, #0]
 8010b04:	e7b5      	b.n	8010a72 <__hexnan+0x7a>
 8010b06:	2508      	movs	r5, #8
 8010b08:	e7b3      	b.n	8010a72 <__hexnan+0x7a>
 8010b0a:	9b01      	ldr	r3, [sp, #4]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d0dd      	beq.n	8010acc <__hexnan+0xd4>
 8010b10:	f1c3 0320 	rsb	r3, r3, #32
 8010b14:	f04f 32ff 	mov.w	r2, #4294967295
 8010b18:	40da      	lsrs	r2, r3
 8010b1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010b1e:	4013      	ands	r3, r2
 8010b20:	f846 3c04 	str.w	r3, [r6, #-4]
 8010b24:	e7d2      	b.n	8010acc <__hexnan+0xd4>
 8010b26:	3f04      	subs	r7, #4
 8010b28:	e7d0      	b.n	8010acc <__hexnan+0xd4>
 8010b2a:	2004      	movs	r0, #4
 8010b2c:	e7d5      	b.n	8010ada <__hexnan+0xe2>

08010b2e <__ascii_mbtowc>:
 8010b2e:	b082      	sub	sp, #8
 8010b30:	b901      	cbnz	r1, 8010b34 <__ascii_mbtowc+0x6>
 8010b32:	a901      	add	r1, sp, #4
 8010b34:	b142      	cbz	r2, 8010b48 <__ascii_mbtowc+0x1a>
 8010b36:	b14b      	cbz	r3, 8010b4c <__ascii_mbtowc+0x1e>
 8010b38:	7813      	ldrb	r3, [r2, #0]
 8010b3a:	600b      	str	r3, [r1, #0]
 8010b3c:	7812      	ldrb	r2, [r2, #0]
 8010b3e:	1e10      	subs	r0, r2, #0
 8010b40:	bf18      	it	ne
 8010b42:	2001      	movne	r0, #1
 8010b44:	b002      	add	sp, #8
 8010b46:	4770      	bx	lr
 8010b48:	4610      	mov	r0, r2
 8010b4a:	e7fb      	b.n	8010b44 <__ascii_mbtowc+0x16>
 8010b4c:	f06f 0001 	mvn.w	r0, #1
 8010b50:	e7f8      	b.n	8010b44 <__ascii_mbtowc+0x16>

08010b52 <_realloc_r>:
 8010b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b56:	4680      	mov	r8, r0
 8010b58:	4615      	mov	r5, r2
 8010b5a:	460c      	mov	r4, r1
 8010b5c:	b921      	cbnz	r1, 8010b68 <_realloc_r+0x16>
 8010b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b62:	4611      	mov	r1, r2
 8010b64:	f7fb bcb0 	b.w	800c4c8 <_malloc_r>
 8010b68:	b92a      	cbnz	r2, 8010b76 <_realloc_r+0x24>
 8010b6a:	f7fd fce5 	bl	800e538 <_free_r>
 8010b6e:	2400      	movs	r4, #0
 8010b70:	4620      	mov	r0, r4
 8010b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b76:	f000 f840 	bl	8010bfa <_malloc_usable_size_r>
 8010b7a:	4285      	cmp	r5, r0
 8010b7c:	4606      	mov	r6, r0
 8010b7e:	d802      	bhi.n	8010b86 <_realloc_r+0x34>
 8010b80:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010b84:	d8f4      	bhi.n	8010b70 <_realloc_r+0x1e>
 8010b86:	4629      	mov	r1, r5
 8010b88:	4640      	mov	r0, r8
 8010b8a:	f7fb fc9d 	bl	800c4c8 <_malloc_r>
 8010b8e:	4607      	mov	r7, r0
 8010b90:	2800      	cmp	r0, #0
 8010b92:	d0ec      	beq.n	8010b6e <_realloc_r+0x1c>
 8010b94:	42b5      	cmp	r5, r6
 8010b96:	462a      	mov	r2, r5
 8010b98:	4621      	mov	r1, r4
 8010b9a:	bf28      	it	cs
 8010b9c:	4632      	movcs	r2, r6
 8010b9e:	f7ff fc43 	bl	8010428 <memcpy>
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	f7fd fcc7 	bl	800e538 <_free_r>
 8010baa:	463c      	mov	r4, r7
 8010bac:	e7e0      	b.n	8010b70 <_realloc_r+0x1e>

08010bae <__ascii_wctomb>:
 8010bae:	4603      	mov	r3, r0
 8010bb0:	4608      	mov	r0, r1
 8010bb2:	b141      	cbz	r1, 8010bc6 <__ascii_wctomb+0x18>
 8010bb4:	2aff      	cmp	r2, #255	@ 0xff
 8010bb6:	d904      	bls.n	8010bc2 <__ascii_wctomb+0x14>
 8010bb8:	228a      	movs	r2, #138	@ 0x8a
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc0:	4770      	bx	lr
 8010bc2:	700a      	strb	r2, [r1, #0]
 8010bc4:	2001      	movs	r0, #1
 8010bc6:	4770      	bx	lr

08010bc8 <fiprintf>:
 8010bc8:	b40e      	push	{r1, r2, r3}
 8010bca:	b503      	push	{r0, r1, lr}
 8010bcc:	4601      	mov	r1, r0
 8010bce:	ab03      	add	r3, sp, #12
 8010bd0:	4805      	ldr	r0, [pc, #20]	@ (8010be8 <fiprintf+0x20>)
 8010bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bd6:	6800      	ldr	r0, [r0, #0]
 8010bd8:	9301      	str	r3, [sp, #4]
 8010bda:	f7ff f9b1 	bl	800ff40 <_vfiprintf_r>
 8010bde:	b002      	add	sp, #8
 8010be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010be4:	b003      	add	sp, #12
 8010be6:	4770      	bx	lr
 8010be8:	20000084 	.word	0x20000084

08010bec <abort>:
 8010bec:	b508      	push	{r3, lr}
 8010bee:	2006      	movs	r0, #6
 8010bf0:	f000 f834 	bl	8010c5c <raise>
 8010bf4:	2001      	movs	r0, #1
 8010bf6:	f7f3 fb01 	bl	80041fc <_exit>

08010bfa <_malloc_usable_size_r>:
 8010bfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bfe:	1f18      	subs	r0, r3, #4
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	bfbc      	itt	lt
 8010c04:	580b      	ldrlt	r3, [r1, r0]
 8010c06:	18c0      	addlt	r0, r0, r3
 8010c08:	4770      	bx	lr

08010c0a <_raise_r>:
 8010c0a:	291f      	cmp	r1, #31
 8010c0c:	b538      	push	{r3, r4, r5, lr}
 8010c0e:	4605      	mov	r5, r0
 8010c10:	460c      	mov	r4, r1
 8010c12:	d904      	bls.n	8010c1e <_raise_r+0x14>
 8010c14:	2316      	movs	r3, #22
 8010c16:	6003      	str	r3, [r0, #0]
 8010c18:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1c:	bd38      	pop	{r3, r4, r5, pc}
 8010c1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010c20:	b112      	cbz	r2, 8010c28 <_raise_r+0x1e>
 8010c22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010c26:	b94b      	cbnz	r3, 8010c3c <_raise_r+0x32>
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f000 f831 	bl	8010c90 <_getpid_r>
 8010c2e:	4622      	mov	r2, r4
 8010c30:	4601      	mov	r1, r0
 8010c32:	4628      	mov	r0, r5
 8010c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c38:	f000 b818 	b.w	8010c6c <_kill_r>
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d00a      	beq.n	8010c56 <_raise_r+0x4c>
 8010c40:	1c59      	adds	r1, r3, #1
 8010c42:	d103      	bne.n	8010c4c <_raise_r+0x42>
 8010c44:	2316      	movs	r3, #22
 8010c46:	6003      	str	r3, [r0, #0]
 8010c48:	2001      	movs	r0, #1
 8010c4a:	e7e7      	b.n	8010c1c <_raise_r+0x12>
 8010c4c:	2100      	movs	r1, #0
 8010c4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010c52:	4620      	mov	r0, r4
 8010c54:	4798      	blx	r3
 8010c56:	2000      	movs	r0, #0
 8010c58:	e7e0      	b.n	8010c1c <_raise_r+0x12>
	...

08010c5c <raise>:
 8010c5c:	4b02      	ldr	r3, [pc, #8]	@ (8010c68 <raise+0xc>)
 8010c5e:	4601      	mov	r1, r0
 8010c60:	6818      	ldr	r0, [r3, #0]
 8010c62:	f7ff bfd2 	b.w	8010c0a <_raise_r>
 8010c66:	bf00      	nop
 8010c68:	20000084 	.word	0x20000084

08010c6c <_kill_r>:
 8010c6c:	b538      	push	{r3, r4, r5, lr}
 8010c6e:	4d07      	ldr	r5, [pc, #28]	@ (8010c8c <_kill_r+0x20>)
 8010c70:	2300      	movs	r3, #0
 8010c72:	4604      	mov	r4, r0
 8010c74:	4608      	mov	r0, r1
 8010c76:	4611      	mov	r1, r2
 8010c78:	602b      	str	r3, [r5, #0]
 8010c7a:	f7f3 faaf 	bl	80041dc <_kill>
 8010c7e:	1c43      	adds	r3, r0, #1
 8010c80:	d102      	bne.n	8010c88 <_kill_r+0x1c>
 8010c82:	682b      	ldr	r3, [r5, #0]
 8010c84:	b103      	cbz	r3, 8010c88 <_kill_r+0x1c>
 8010c86:	6023      	str	r3, [r4, #0]
 8010c88:	bd38      	pop	{r3, r4, r5, pc}
 8010c8a:	bf00      	nop
 8010c8c:	200032e0 	.word	0x200032e0

08010c90 <_getpid_r>:
 8010c90:	f7f3 ba9c 	b.w	80041cc <_getpid>

08010c94 <_init>:
 8010c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c96:	bf00      	nop
 8010c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c9a:	bc08      	pop	{r3}
 8010c9c:	469e      	mov	lr, r3
 8010c9e:	4770      	bx	lr

08010ca0 <_fini>:
 8010ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ca2:	bf00      	nop
 8010ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ca6:	bc08      	pop	{r3}
 8010ca8:	469e      	mov	lr, r3
 8010caa:	4770      	bx	lr
